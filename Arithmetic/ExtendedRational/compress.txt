#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/ExtendedRational/a_Body.hpp"
#else
TE <TY INT1,TY INT2>INT1 GCD(CO INT1& b_0,CO INT2& b_1){INT1 a_0 = b_0 < 0?-b_0:b_0;INT1 a_1 = b_1 < 0?-b_1:b_1;WH(a_1 != 0){swap(a_0 %= a_1,a_1);}RE a_0;}TE <TY INT1,TY INT2> IN INT1 LCM(CO INT1& b_0,CO INT2& b_1){RE(b_0 == 0 && b_1 == 0)?0:(b_0 / GCD(b_0,b_1))* b_1;}

#define DC_OF_OP_FOR_EXTENED_RATIONAL(OPR)CE ExtendedRational<T,reducing>& OP OPR ## =(CO ExtendedRational<T,reducing>& r);CE ExtendedRational<T,reducing> OP OPR(CO ExtendedRational<T,reducing>& r)CO
#define DF_OF_OP_FOR_EXTENED_RATIONAL(OPR)TE <TY T,bool reducing> CE ExtendedRational<T,reducing>& ExtendedRational<T,reducing>::OP OPR ## =(CO ExtendedRational<T,reducing>& r){RE *TH = *TH + r;}
#define DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(OPR)TE <TY T,bool reducing,TY ARG> CE ExtendedRational<T,reducing> OP OPR(CO ARG& t,CO ExtendedRational<T,reducing>& r)
TE <TY T,bool reducing = true>CL ExtendedRational{PU:T m_n;T m_d;CE ExtendedRational(T n = 0,T d = 1,CO bool& reducingd = false);CE ExtendedRational(CO ExtendedRational<T,reducing>& r);CE ExtendedRational(ExtendedRational<T,reducing>&& r);TE <TY U,bool red> CE ExtendedRational(ExtendedRational<U,red> r);CE VO Reduce();CE ExtendedRational<T,reducing>& OP=(ExtendedRational<T,reducing> r)NE;CE bool OP==(CO ExtendedRational<T,reducing>& r)CO;CE bool OP!=(CO ExtendedRational<T,reducing>& r)CO;CE bool OP<=(CO ExtendedRational<T,reducing>& r)CO;CE bool OP>=(CO ExtendedRational<T,reducing>& r)CO;CE bool OP<(CO ExtendedRational<T,reducing>& r)CO;CE bool OP>(CO ExtendedRational<T,reducing>& r)CO;DC_OF_OP_FOR_EXTENED_RATIONAL(+);DC_OF_OP_FOR_EXTENED_RATIONAL(-);CE ExtendedRational<T,reducing> OP-()CO NE;DC_OF_OP_FOR_EXTENED_RATIONAL(*);CE ExtendedRational<T,reducing> Inverse()CO NE;DC_OF_OP_FOR_EXTENED_RATIONAL(/);CE CO T& GetNumerator()CO NE;CE CO T& GetDenominator()CO NE;ST CE T DifferenceNumerator(CO ExtendedRational<T,reducing>& r0,CO ExtendedRational<T,reducing>& r1);};
TE <TY T,bool reducing> CE ExtendedRational<T,reducing>::ExtendedRational(T n,T d,CO bool& reduced):m_n(MO(n)),m_d(MO(d)){AS(m_n != 0 || m_d != 0);if(reduced){AS(m_d > 0?(m_n != 0 || m_d == 1):(m_n ==(m_n > 0?1:-1)&& m_d == 0));}else{if(m_d < 0){m_n *= -1;m_d *= -1;}if CE(reducing){Reduce();}}}TE <TY T,bool reducing> CE ExtendedRational<T,reducing>::ExtendedRational(CO ExtendedRational<T,reducing>& r):m_n(r.m_n),m_d(r.m_d){}TE <TY T,bool reducing> CE ExtendedRational<T,reducing>::ExtendedRational(ExtendedRational<T,reducing>&& r):m_n(MO(r.m_n)),m_d(MO(r.m_d)){}TE <TY T,bool reducing> TE <TY U,bool red> CE ExtendedRational<T,reducing>::ExtendedRational(ExtendedRational<U,red> r):ExtendedRational(MO(r.m_n),MO(r.m_d)){}TE <TY T,bool reducing> CE VO ExtendedRational<T,reducing>::Reduce(){if(m_d == 0){m_n = m_n > 0?1:-1;}else if(m_n == 0){m_d = 1;}else if(m_d != 1){CO T gcd = GCD(m_n,m_d);AS(gcd != 0);m_n /= gcd;m_d /= gcd;}}TE <TY T,bool reducing> CE ExtendedRational<T,reducing>& ExtendedRational<T,reducing>::OP=(ExtendedRational<T,reducing> r)NE{m_n = MO(r.m_n);m_d = MO(r.m_d);RE *TH;}TE <TY T,bool reducing> CE T ExtendedRational<T,reducing>::DifferenceNumerator(CO ExtendedRational<T,reducing>& r0,CO ExtendedRational<T,reducing>& r1){if(r0.m_d == 0){AS(r1.m_d != 0 ||(r0.m_n > 0)==(r1.m_n > 0));RE r0.m_n > 0?1:-1;}if(r1.m_d == 0){RE r1.m_n > 0?-1:1;}RE r0.m_n * r1.m_d - r1.m_n * r0.m_d;}TE <TY T,bool reducing> CE bool ExtendedRational<T,reducing>::OP==(CO ExtendedRational<T,reducing>& r)CO{RE reducing?m_n == r.m_n && m_d == r.m_d:DifferenceNumerator(*TH,r)== 0;}TE <TY T,bool reducing> CE bool ExtendedRational<T,reducing>::OP!=(CO ExtendedRational<T,reducing>& r)CO{RE !(*TH == r);}TE <TY T,bool reducing> CE bool ExtendedRational<T,reducing>::OP<=(CO ExtendedRational<T,reducing>& r)CO{RE *TH == r || *TH < r;}TE <TY T,bool reducing> CE bool ExtendedRational<T,reducing>::OP>=(CO ExtendedRational<T,reducing>& r)CO{RE r <= *TH;}TE <TY T,bool reducing> CE bool ExtendedRational<T,reducing>::OP<(CO ExtendedRational<T,reducing>& r)CO{RE DifferenceNumerator(*TH,r)< 0;}TE <TY T,bool reducing> CE bool ExtendedRational<T,reducing>::OP>(CO ExtendedRational<T,reducing>& r)CO{RE r < *TH;}DF_OF_OP_FOR_EXTENED_RATIONAL(+);DF_OF_OP_FOR_EXTENED_RATIONAL(-);DF_OF_OP_FOR_EXTENED_RATIONAL(*);DF_OF_OP_FOR_EXTENED_RATIONAL(/);TE <TY T,bool reducing> CE ExtendedRational<T,reducing> ExtendedRational<T,reducing>::OP+(CO ExtendedRational<T,reducing>& r)CO{if(m_d == 0){AS(r.m_d != 0 ||(m_n > 0)==(r.m_n > 0));RE *TH;}if(r.m_d == 0){RE r;}CO T gcd = GCD(m_d,r.m_d),d = gcd == 0?gcd:r.m_d / gcd;RE gcd == 0?*TH:ExtendedRational<T,reducing>{m_n * d + r.m_n *(m_d / gcd),m_d * d};}TE <TY T,bool reducing> CE ExtendedRational<T,reducing> ExtendedRational<T,reducing>::OP-()CO NE{RE ExtendedRational<T,reducing>{-m_n,m_d,true};}TE <TY T,bool reducing> CE ExtendedRational<T,reducing> ExtendedRational<T,reducing>::OP-(CO ExtendedRational<T,reducing>& r)CO{RE *TH +(-r);}TE <TY T,bool reducing> CE ExtendedRational<T,reducing> ExtendedRational<T,reducing>::OP*(CO ExtendedRational<T,reducing>& r)CO{if(m_d == 0){AS(r.m_n != 0);RE *TH;}if(r.m_d == 0){AS(m_n != 0);RE r;}CO T gcd1 = GCD(m_n,r.m_d),gcd2 = GCD(m_d,r.m_n);RE ExtendedRational<T,reducing>{(m_n / gcd1)*(r.m_n / gcd2),(m_d / gcd2)*(r.m_d / gcd1),reducing};}TE <TY T,bool reducing> CE ExtendedRational<T,reducing> ExtendedRational<T,reducing>::Inverse()CO NE{RE ExtendedRational<T,reducing>{m_n > 0?m_d:m_n < 0?-m_d:T{1},m_n < 0?-m_n:m_n,reducing};}TE <TY T,bool reducing> CE ExtendedRational<T,reducing> ExtendedRational<T,reducing>::OP/(CO ExtendedRational<T,reducing>& r)CO{RE *TH * r.Inverse();}TE <TY T,bool reducing> CE CO T& ExtendedRational<T,reducing>::GetNumerator()CO NE{RE m_n;}TE <TY T,bool reducing> CE CO T& ExtendedRational<T,reducing>::GetDenominator()CO NE{RE m_d;}TE <TY T,bool reducing> CE bool OP==(CO T& n,CO ExtendedRational<T,reducing>& r){RE n * r.GetDenominator()== r.GetNumerator();}TE <TY T,bool reducing> CE bool OP!=(CO T& n,CO ExtendedRational<T,reducing>& r){RE !(n == r);}TE <TY T,bool reducing> CE bool OP<=(CO T& n,CO ExtendedRational<T,reducing>& r){RE n * r.GetDenominator()<= r.GetNumerator();}TE <TY T,bool reducing> CE bool OP>=(CO T& n,CO ExtendedRational<T,reducing>& r){RE r <= n;}TE <TY T,bool reducing> CE bool OP<(CO T& n,CO ExtendedRational<T,reducing>& r){RE n * r.GetDenominator()< r.GetNumerator();}TE <TY T,bool reducing> CE bool OP>(CO T& n,CO ExtendedRational<T,reducing>& r){RE r < n;}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(+){CO T& d = r.GetDenominator();RE ExtendedRational(t * d + r.GetNumerator(),d,true);}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(-){CO T& d = r.GetDenominator();RE ExtendedRational(t * d - r.GetNumerator(),d,true);}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(*){RE ExtendedRational<T,reducing>(t)* r;}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(/){RE ExtendedRational<T,reducing>(t)/ r;}TE <TY T,bool reducing,CL Traits> IN IS& OP>>(IS& is,ExtendedRational<T,reducing>& r){T temp;cin >> temp;r = temp;RE cin;}TE <TY T,bool reducing,CL Traits> IN OS& OP<<(OS& os,CO ExtendedRational<T,reducing>& r){RE os << r.GetNumerator()<< " " << r.GetDenominator();}

TE <TY T,bool reducing> DC_OF_HASH(ExtendedRational<T,reducing>);
TE <TY T,bool reducing> IN size_t hash<ExtendedRational<T,reducing>>::OP()(CO ExtendedRational<T,reducing>& r)CO{ST CO size_t seed =(GetRand(1e3,1e8)<< 1)| 1;if CE(reducing){ST CO hash<T> h;RE(h(r.GetNumerator())* seed)^ h(r.GetDenominator());}ST CO hash<ExtendedRational<T,true>> h;RE h(r);}
;
#endif

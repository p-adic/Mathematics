CEXPR(uint,P,998244353);
#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/Mod/DynamicModulo/Debug/a_Body.hpp"
#else
// SetModulo( M , M_is_prime = false );
// M_is_primeÇ™trueÇÃéûÇÕinverseÇÃåvéZÇ™ÉÅÉÇâªçƒãAÇ≥ÇÍÇÈÅB
#define RP Represent
#define DeRP Derepresent

TE <TY INT1,TY INT2> CE INT1 Residue(INT1 n,CO INT2& M)NE{RE MO(n < 0?((((++n)*= -1)%= M)*= -1)+= M - 1:n < M?n:n %= M);}
TE <TY INT> IN INT ModularInverse(CO INT& base,ll c){AS(base > 0);ll a[2]={0,1 % base};INT b[2]={base,INT((c %= base)< 0?c += base:c)};WH(b[1]!= 0){CO INT q = b[0]/ b[1];(a[0]-= q * a[1]% base)< 0?a[0]+= base:a[0];b[0]-= q * b[1];swap(a[0],a[1]);swap(b[0],b[1]);}AS(b[0]== 1 &&(a[0]* c - 1)% base == 0);RE a[0];}

TE <int NUM> CL DMods;TE <int NUM>CL COantsForDMods{PU:COantsForDMods()= delete;ST uint g_M;ST CE CO uint g_memory_bound = 2e6;ST uint g_memory_le;ST uint g_M_minus;ST bool g_M_is_prime;};
TE <int NUM> uint COantsForDMods<NUM>::g_M = P;TE <int NUM> uint COantsForDMods<NUM>::g_memory_le = g_memory_bound;TE <int NUM> uint COantsForDMods<NUM>::g_M_minus = P-1;TE <int NUM> bool COantsForDMods<NUM>::g_M_is_prime = true;

#define SFINAE_FOR_DMOD enable_if_t<is_COructible_v<uint,decay_t<T>>>*
#define DC_OF_CM_FOR_DMOD(OPR)IN bool OP OPR(CO DMods<NUM>& n)CO NE
#define DC_OF_AR_FOR_DMOD(OPR,EX)IN DMods<NUM> OP OPR(DMods<NUM> n)CO EX;
#define DF_OF_CM_FOR_DMOD(OPR)TE <int NUM> IN bool DMods<NUM>::OP OPR(CO DMods<NUM>& n)CO NE{RE m_n OPR n.m_n;}
#define DF_OF_AR_FOR_DMOD(OPR,EX,LEFT,OPR2)TE <int NUM> IN DMods<NUM> DMods<NUM>::OP OPR(DMods<NUM> n)CO EX{RE MO(LEFT OPR2 ## = *TH);}TE <int NUM,TY T,SFINAE_FOR_DMOD = nullptr> IN DMods<NUM> OP OPR(T n0,CO DMods<NUM>& n1)EX{RE MO(DMods<NUM>(MO(n0))OPR ## = n1);}
TE <int NUM>CL DMods{PU:uint m_n;IN DMods()NE;IN DMods(CO DMods<NUM>& n)NE;IN DMods(DMods<NUM>&& n)NE;TE <TY T,SFINAE_FOR_DMOD = nullptr> IN DMods(T n)NE;IN DMods<NUM>& OP=(DMods<NUM> n)NE;IN DMods<NUM>& OP+=(CO DMods<NUM>& n)NE;IN DMods<NUM>& OP-=(CO DMods<NUM>& n)NE;IN DMods<NUM>& OP*=(CO DMods<NUM>& n)NE;IN DMods<NUM>& OP/=(DMods<NUM> n);IN DMods<NUM>& OP^=(ll EX);IN DMods<NUM>& OP<<=(ll n);IN DMods<NUM>& OP>>=(ll n);IN DMods<NUM>& OP++()NE;IN DMods<NUM> OP++(int)NE;IN DMods<NUM>& OP--()NE;IN DMods<NUM> OP--(int)NE;DC_OF_CM_FOR_DMOD(==);DC_OF_CM_FOR_DMOD(!=);DC_OF_CM_FOR_DMOD(<);DC_OF_CM_FOR_DMOD(<=);DC_OF_CM_FOR_DMOD(>);DC_OF_CM_FOR_DMOD(>=);DC_OF_AR_FOR_DMOD(+,NE);DC_OF_AR_FOR_DMOD(-,NE);DC_OF_AR_FOR_DMOD(*,NE);DC_OF_AR_FOR_DMOD(/,);IN DMods<NUM> OP^(ll EX)CO;IN DMods<NUM> OP<<(ll n)CO;IN DMods<NUM> OP>>(ll n)CO;IN DMods<NUM> OP-()CO NE;IN VO swap(DMods<NUM>& n)NE;IN CRUI RP()CO NE;ST IN DMods<NUM> DeRP(uint n)NE;ST IN CO DMods<NUM>& Factorial(CRL n);ST IN CO DMods<NUM>& FactorialInverse(CRL n);ST IN DMods<NUM> Combination(CRL n,CRL i);ST IN CO DMods<NUM>& zero()NE;ST IN CO DMods<NUM>& one()NE;ST IN CRUI GetModulo()NE;ST IN VO SetModulo(CRUI M,CO bool& M_is_prime = false)NE;IN DMods<NUM>& SignInvert()NE;IN DMods<NUM>& Invert();IN DMods<NUM>& PPW(ll EX)NE;IN DMods<NUM>& NNPW(ll EX)NE;ST IN CO DMods<NUM>& Inverse(CRI n);ST IN CO DMods<NUM>& TwoPower(CRI n);ST IN CO DMods<NUM>& TwoPowerInverse(CRI n);US COants = COantsForDMods<NUM>;};
US DMod = DMods<0>;
TE <int NUM> IN DMods<NUM>::DMods()NE:m_n(){}TE <int NUM> IN DMods<NUM>::DMods(CO DMods<NUM>& n)NE:m_n(n.m_n){}TE <int NUM> IN DMods<NUM>::DMods(DMods<NUM>&& n)NE:m_n(MO(n.m_n)){}TE <int NUM> TE <TY T,SFINAE_FOR_DMOD> IN DMods<NUM>::DMods(T n)NE:m_n(Residue(MO(n),COants::g_M)){}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP=(DMods<NUM> n)NE{m_n = MO(n.m_n);RE *TH;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP+=(CO DMods<NUM>& n)NE{(m_n += n.m_n)< COants::g_M?m_n:m_n -= COants::g_M;RE *TH;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP-=(CO DMods<NUM>& n)NE{m_n < n.m_n?(m_n += COants::g_M)-= n.m_n:m_n -= n.m_n;RE *TH;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP*=(CO DMods<NUM>& n)NE{m_n = Residue(MO(ull(m_n)* n.m_n),COants::g_M);RE *TH;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP/=(DMods<NUM> n){RE OP*=(n.Invert());}TE <int NUM> IN DMods<NUM>& DMods<NUM>::PPW(ll EX)NE{DMods<NUM> pw{*TH};EX--;WH(EX != 0){(EX & 1)== 1?*TH *= pw:*TH;EX >>= 1;pw *= pw;}RE *TH;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::NNPW(ll EX)NE{RE EX == 0?(m_n = 1,*TH):PPW(MO(EX));}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP^=(ll EX){if(EX < 0){m_n = ModularInverse(COants::g_M,MO(m_n));EX *= -1;}RE NNPW(MO(EX));}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP<<=(ll n){RE *TH *=(n < 0 && -n < int(COants::g_memory_le))?TwoPowerInverse(- int(n)):(n >= 0 && n < int(COants::g_memory_le))?TwoPower(int(n)):DMods<NUM>(2)^= MO(n);}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP>>=(ll n){RE *TH <<= MO(n *= -1);}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP++()NE{m_n < COants::g_M_minus?++m_n:m_n = 0;RE *TH;}TE <int NUM> IN DMods<NUM> DMods<NUM>::OP++(int)NE{DMods<NUM> n{*TH};OP++();RE n;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::OP--()NE{m_n == 0?m_n = COants::g_M_minus:--m_n;RE *TH;}TE <int NUM> IN DMods<NUM> DMods<NUM>::OP--(int)NE{DMods<NUM> n{*TH};OP--();RE n;}DF_OF_CM_FOR_DMOD(==);DF_OF_CM_FOR_DMOD(!=);DF_OF_CM_FOR_DMOD(>);DF_OF_CM_FOR_DMOD(>=);DF_OF_CM_FOR_DMOD(<);DF_OF_CM_FOR_DMOD(<=);DF_OF_AR_FOR_DMOD(+,NE,n,+);DF_OF_AR_FOR_DMOD(-,NE,n.SignInvert(),+);DF_OF_AR_FOR_DMOD(*,NE,n,*);DF_OF_AR_FOR_DMOD(/,,n.Invert(),*);TE <int NUM> IN DMods<NUM> DMods<NUM>::OP^(ll EX)CO{RE MO(DMods<NUM>(*TH)^= MO(EX));}TE <int NUM> IN DMods<NUM> DMods<NUM>::OP<<(ll n)CO{RE MO(DMods<NUM>(*TH)<<= MO(n));}TE <int NUM> IN DMods<NUM> DMods<NUM>::OP>>(ll n)CO{RE MO(DMods<NUM>(*TH)>>= MO(n));}TE <int NUM> IN DMods<NUM> DMods<NUM>::OP-()CO NE{RE MO(DMods<NUM>(*TH).SignInvert());}TE <int NUM> IN DMods<NUM>& DMods<NUM>::SignInvert()NE{m_n > 0?m_n = COants::g_M - m_n:m_n;RE *TH;}TE <int NUM> IN DMods<NUM>& DMods<NUM>::Invert(){m_n = COants::g_M_is_prime && m_n < COants::g_memory_le?Inverse(int(m_n)).m_n:ModularInverse(COants::g_M,MO(m_n));RE *TH;}TE <int NUM> IN VO DMods<NUM>::swap(DMods<NUM>& n)NE{std::swap(m_n,n.m_n);}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::Inverse(CRI n){if(COants::g_M == 1){RE zero();}AS(COants::g_M_is_prime && 0 < n && n < int(COants::g_memory_le));ST VE<DMods<NUM>> memory ={zero(),one()};ST int le_curr = 2;WH(le_curr <= n){memory.push_back(DeRP(COants::g_M - memory[COants::g_M % le_curr].m_n * ull(COants::g_M / le_curr)% COants::g_M));le_curr++;}RE memory[n];}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::TwoPower(CRI n){if(COants::g_M == 1){RE zero();}AS(0 <= n && n < int(COants::g_memory_le));ST VE<DMods<NUM>> memory ={one()};ST int le_curr = 1;WH(le_curr <= n){memory.push_back(memory.back()+ memory.back());le_curr++;}RE memory[n];}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::TwoPowerInverse(CRI n){if(COants::g_M == 1){RE zero();}AS(0 <= n && n < int(COants::g_memory_le));ST VE<DMods<NUM>> memory ={one()};ST int le_curr = 1;WH(le_curr <= n){auto& m = memory.back().m_n;memory.push_back(DeRP(((m & 1)== 0?m:m + COants::g_M)>> 1));le_curr++;}RE memory[n];}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::Factorial(CRL n){AS(0 <= n);if(ll(COants::g_M)<= n){RE zero();}ST VE<DMods<NUM>> memory ={one(),one()};ST int le_curr = 2;WH(le_curr <= n && memory.back().m_n != 0){memory.push_back(memory.back()* DeRP(le_curr));le_curr++;}RE le_curr <= n?memory.back():memory[n];}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::FactorialInverse(CRL n){AS(0 <= n && n < COants::g_M);ST VE<DMods<NUM>> memory ={one(),one()};ST int le_curr = 2;WH(le_curr <= n){memory.push_back(memory[le_curr - 1]* Inverse(le_curr));le_curr++;}RE memory[n];}TE <int NUM> IN DMods<NUM> DMods<NUM>::Combination(CRL n,CRL i){RE 0 <= i && i <= n?Factorial(n)* FactorialInverse(i)* FactorialInverse(n - i):zero();}TE <int NUM> IN CRUI DMods<NUM>::RP()CO NE{RE m_n;}TE <int NUM> IN DMods<NUM> DMods<NUM>::DeRP(uint n)NE{DMods<NUM> n_copy{};n_copy.m_n = MO(n);RE n_copy;}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::zero()NE{ST CO DMods<NUM> z{};RE z;}TE <int NUM> IN CO DMods<NUM>& DMods<NUM>::one()NE{ST CO DMods<NUM> o{1};RE o;}TE <int NUM> IN CRUI DMods<NUM>::GetModulo()NE{RE COants::g_M;}TE <int NUM> IN VO DMods<NUM>::SetModulo(CRUI M,CO bool& M_is_prime)NE{COants::g_M = M;COants::g_memory_le = M < COants::g_memory_bound?M:COants::g_memory_bound;COants::g_M_minus = M - 1;COants::g_M_is_prime = M_is_prime;}TE <int NUM> IN DMods<NUM> Inverse(CO DMods<NUM>& n){RE MO(DMods<NUM>(n).Invert());}TE <int NUM> IN DMods<NUM> Power(DMods<NUM> n,ll EX){RE MO(n ^= MO(EX));}TE <int NUM> IN VO swap(DMods<NUM>& n0,DMods<NUM>& n1)NE{n0.swap(n1);}TE <int NUM,CL Traits> IN IS& OP>>(IS& is,DMods<NUM>& n){ll m;is >> m;n = m;RE is;}TE <int NUM,CL Traits> IN OS& OP<<(OS& os,CO DMods<NUM>& n){RE os << n.RP();}

TE <TY INT1,TY INT2>INT1 GCD(CO INT1& b_0,CO INT2& b_1){INT1 a_0 = b_0 < 0?-b_0:b_0;INT1 a_1 = b_1 < 0?-b_1:b_1;WH(a_1 != 0){swap(a_0 %= a_1,a_1);}RE a_0;}TE <TY INT1,TY INT2> IN INT1 LCM(CO INT1& b_0,CO INT2& b_1){RE(b_0 == 0 && b_1 == 0)?0:(b_0 / GCD(b_0,b_1))* b_1;}

#define DF_OF_HASH_FOR_MOD(MOD)IN size_t hash<MOD>::OP()(CO MOD& n)CO{ST CO hash<decldecay_t(n.RP())> h;RE h(n.RP());}
TE <int NUM> DC_OF_HASH(DMods<NUM>);TE <int NUM> DF_OF_HASH_FOR_MOD( DMods<NUM> );
#endif
US MP = DMod;

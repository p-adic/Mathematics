#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/Mod/DynamicModulo/Shifted/a_Body.hpp"
#else
TE <int NUM>CL COantsForShiftedMods{PU:COantsForShiftedMods()= delete;ST uint g_K;ST uint g_M;ST uint g_KM;};
TE <int NUM> uint COantsForShiftedMods<NUM>::g_K = 0;TE <int NUM> uint COantsForShiftedMods<NUM>::g_M = 0;TE <int NUM> uint COantsForShiftedMods<NUM>::g_KM = 0;

#define DC_OF_CM_FOR_SHIFTED_MOD(OPR)IN bool OP OPR(CO ShiftedMods<NUM>& n)CO NE
#define DC_OF_AR_FOR_SHIFTED_MOD(OPR,EX)IN ShiftedMods<NUM> OP OPR(ShiftedMods<NUM> n)CO EX;
#define DF_OF_CM_FOR_SHIFTED_MOD(OPR)TE <int NUM> IN bool ShiftedMods<NUM>::OP OPR(CO ShiftedMods<NUM>& n)CO NE{RE m_n OPR n.m_n;}
#define DF_OF_AR_FOR_SHIFTED_MOD(OPR,EX,LEFT,OPR2)TE <int NUM> IN ShiftedMods<NUM> ShiftedMods<NUM>::OP OPR(ShiftedMods<NUM> n)CO EX{RE MO(LEFT OPR2 ## = *TH);}TE <int NUM,TY T> IN ShiftedMods<NUM> OP OPR(T n0,CO ShiftedMods<NUM>& n1)EX{RE MO(ShiftedMods<NUM>(MO(n0))OPR ## = n1);}
TE <int NUM>CL ShiftedMods{PU:uint m_n;IN ShiftedMods()NE;IN ShiftedMods(CO ShiftedMods<NUM>& n)NE;IN ShiftedMods(ShiftedMods<NUM>&& n)NE;TE <TY T> IN ShiftedMods(T n)NE;IN ShiftedMods<NUM>& OP=(ShiftedMods<NUM> n)NE;IN ShiftedMods<NUM>& OP+=(CO ShiftedMods<NUM>& n)NE;IN ShiftedMods<NUM>& OP*=(CO ShiftedMods<NUM>& n)NE;TE <TY INT> IN ShiftedMods<NUM>& OP<<=(INT n);IN ShiftedMods<NUM>& OP++()NE;IN ShiftedMods<NUM> OP++(int)NE;DC_OF_CM_FOR_SHIFTED_MOD(==);DC_OF_CM_FOR_SHIFTED_MOD(!=);DC_OF_CM_FOR_SHIFTED_MOD(<);DC_OF_CM_FOR_SHIFTED_MOD(<=);DC_OF_CM_FOR_SHIFTED_MOD(>);DC_OF_CM_FOR_SHIFTED_MOD(>=);DC_OF_AR_FOR_SHIFTED_MOD(+,NE);DC_OF_AR_FOR_SHIFTED_MOD(*,NE);TE <TY INT> IN ShiftedMods<NUM> OP^(INT EX)CO;TE <TY INT> IN ShiftedMods<NUM> OP<<(INT n)CO;TE <TY INT> IN ShiftedMods<NUM>& PW(INT EX);IN VO swap(ShiftedMods<NUM>& n)NE;IN CRUI RP()CO NE;ST IN ShiftedMods<NUM> DeRP(uint n)NE;TE <TY T> ST IN T RS(T n);ST IN CO ShiftedMods<NUM>& Factorial(CRI n);ST IN CO ShiftedMods<NUM>& zero()NE;ST IN CO ShiftedMods<NUM>& one()NE;ST IN CRUI GetShift()NE;ST IN CRUI GetModulo()NE;ST IN VO SetModulo(CRUI K,CRUI M)NE;TE <TY INT> IN ShiftedMods<NUM>& PositivePW(INT EX)NE;TE <TY INT> IN ShiftedMods<NUM>& NonNegativePW(INT EX)NE;US COants = COantsForShiftedMods<NUM>;};US ShiftedMod = ShiftedMods<0>;
TE <int NUM> IN ShiftedMods<NUM>::ShiftedMods()NE:m_n(){}TE <int NUM> IN ShiftedMods<NUM>::ShiftedMods(CO ShiftedMods<NUM>& n)NE:m_n(n.m_n){}TE <int NUM> IN ShiftedMods<NUM>::ShiftedMods(ShiftedMods<NUM>&& n)NE:m_n(MO(n.m_n)){}TE <int NUM> TE <TY T> IN ShiftedMods<NUM>::ShiftedMods(T n)NE:m_n(RS(MO(n))){ST_AS(is_COructible_v<uint,decay_t<T> >);}TE <int NUM> IN ShiftedMods<NUM>& ShiftedMods<NUM>::OP=(ShiftedMods<NUM> n)NE{m_n = MO(n.m_n);RE *TH;}TE <int NUM> IN ShiftedMods<NUM>& ShiftedMods<NUM>::OP+=(CO ShiftedMods<NUM>& n)NE{m_n = RS(MO(m_n += n.m_n));RE *TH;}TE <int NUM> IN ShiftedMods<NUM>& ShiftedMods<NUM>::OP*=(CO ShiftedMods<NUM>& n)NE{m_n = RS(MO(ull(m_n)* n.m_n));RE *TH;}TE <int NUM> TE <TY INT> IN ShiftedMods<NUM>& ShiftedMods<NUM>::OP<<=(INT n){RE *TH *= ShiftedMods<NUM>(2).PW(MO(n));}TE <int NUM> IN ShiftedMods<NUM>& ShiftedMods<NUM>::OP++()NE{++m_n < T(COants::g_KM)?m_n:m_n = COants::g_K;RE *TH;}TE <int NUM> IN ShiftedMods<NUM> ShiftedMods<NUM>::OP++(int)NE{ShiftedMods<NUM> n{*TH};OP++();RE n;}DF_OF_CM_FOR_SHIFTED_MOD(==);DF_OF_CM_FOR_SHIFTED_MOD(!=);DF_OF_CM_FOR_SHIFTED_MOD(>);DF_OF_CM_FOR_SHIFTED_MOD(>=);DF_OF_CM_FOR_SHIFTED_MOD(<);DF_OF_CM_FOR_SHIFTED_MOD(<=);DF_OF_AR_FOR_SHIFTED_MOD(+,NE,n,+);DF_OF_AR_FOR_SHIFTED_MOD(*,NE,n,*);TE <int NUM> TE <TY INT> IN ShiftedMods<NUM> ShiftedMods<NUM>::OP^(INT EX)CO{RE MO(ShiftedMods<NUM>(*TH).PW(MO(EX)));}TE <int NUM> TE <TY INT> IN ShiftedMods<NUM> ShiftedMods<NUM>::OP<<(INT n)CO{RE MO(ShiftedMods<NUM>(*TH)<<= MO(n));}TE <int NUM> TE <TY INT> IN ShiftedMods<NUM>& ShiftedMods<NUM>::PositivePW(INT EX)NE{ShiftedMods<NUM> PW{*TH};EX--;WH(EX != 0){(EX & 1)== 1?*TH *= PW:*TH;EX >>= 1;PW *= PW;}RE *TH;}TE <int NUM> TE <TY INT> IN ShiftedMods<NUM>& ShiftedMods<NUM>::PW(INT EX){AS(EX >= 0);RE EX == 0?(m_n = 1,*TH):PositivePW(MO(EX));}TE <int NUM> IN VO ShiftedMods<NUM>::swap(ShiftedMods<NUM>& n)NE{std::swap(m_n,n.m_n);}TE <int NUM> IN CRUI ShiftedMods<NUM>::RP()CO NE{RE m_n;}TE <int NUM> IN ShiftedMods<NUM> ShiftedMods<NUM>::DeRP(uint n)NE{ShiftedMods<NUM> n_copy{};n_copy.m_n = MO(n);RE n_copy;}TE <int NUM> TE <TY T> IN T ShiftedMods<NUM>::RS(T n){AS(n >= 0);RE MO(n < T(COants::g_KM)?n:((n -= COants::g_K)%= COants::g_M)+= COants::g_K);}TE <int NUM> IN CO ShiftedMods<NUM>& ShiftedMods<NUM>::Factorial(CRI n){AS(n >= 0);ST VE<ShiftedMods<NUM>> memory ={one(),one()};ST int LE_curr = 2;WH(LE_curr <= n){memory.push_back(memory.back()* DeRP(LE_curr));LE_curr++;}RE memory[n];}TE <int NUM> IN CO ShiftedMods<NUM>& ShiftedMods<NUM>::zero()NE{ST CO ShiftedMods<NUM> z{};RE z;}TE <int NUM> IN CO ShiftedMods<NUM>& ShiftedMods<NUM>::one()NE{ST CO ShiftedMods<NUM> o{1};RE o;}TE <int NUM> IN CRUI ShiftedMods<NUM>::GetShift()NE{RE COants::g_K;}TE <int NUM> IN CRUI ShiftedMods<NUM>::GetModulo()NE{RE COants::g_M;}TE <int NUM> IN VO ShiftedMods<NUM>::SetModulo(CRUI K,CRUI M)NE{COants::g_K = K;COants::g_M = M;COants::g_KM = K + M;}TE <int NUM> IN VO swap(ShiftedMods<NUM>& n0,ShiftedMods<NUM>& n1)NE{n0.swap(n1);}TE <int NUM> IN string to_string(CO ShiftedMods<NUM>& n)NE{RE to_string(n.RP());}TE <int NUM,CL Traits> IN IS& OP>>(IS& is,ShiftedMods<NUM>& n){ll m;is >> m;n = m;RE is;}TE <int NUM,CL Traits> IN OS& OP<<(OS& os,CO ShiftedMods<NUM>& n){RE os << n.RP();}
TE <int NUM> DC_OF_HASH( ShiftedMods<NUM> );TE <int NUM> DF_OF_HASH_FOR_MOD( ShiftedMods<NUM> );
#endif


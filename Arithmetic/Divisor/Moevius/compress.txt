#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/Divisor/Moevius/a_Body.hpp"
#else
// PrimeEnumeration:
// val_limit = 316 ≒ sqrt(1e5) -> length = 65
// val_limit = 448 ≒ sqrt(2e5) -> length = 86
// val_limit = 1e5 -> length = 9592
// val_limit = 1e6 -> length = 78498
// nの素因数分解：PrimeFactorisation(CO PE/LD& pe,CO INT& n) O(√n/log n)/O(log n)
// nの素羃への分解：PrimePowerFactorisation(CO PE/LD& pe,CO INT& n) O(√n/log n)/O(log n)
// nのメビウス関数：MoeviusFunction(CO PE/LD& pe,CO INT& n) O(√n/log n)/O(log n/log log n)
// n_max以下のメビウス関数：TotalMoeviusFunction(CO LD& ld,CO INT& n) O(n_max)
TE <int val_limit,int le_max = val_limit>CL PrimeEnumeration{PU:bool m_is_composite[val_limit];int m_val[le_max];int m_le;CE PrimeEnumeration();IN CRI OP[](CRI i)CO;CE CRI Get(CRI i)CO;CE CO bool& IsComposite(CRI n)CO;CE CRI length()CO NE;};
TE <int val_limit,int le_max> CE PrimeEnumeration<val_limit,le_max>::PrimeEnumeration():m_is_composite(),m_val(),m_le(0){for(int i = 2;i < val_limit;i++){if(! m_is_composite[i]){for(int j = ll(i)* i;j < val_limit;j += i){m_is_composite[j]= true;}m_val[m_le++]= i;if(m_le >= le_max){break;}}}}TE <int val_limit,int le_max> IN CRI PrimeEnumeration<val_limit,le_max>::OP[](CRI i)CO{AS(0 <= i && i < m_le);RE m_val[i];}TE <int val_limit,int le_max> CE CRI PrimeEnumeration<val_limit,le_max>::Get(CRI i)CO{RE m_val[i];}TE <int val_limit,int le_max> CE CO bool& PrimeEnumeration<val_limit,le_max>::IsComposite(CRI n)CO{RE m_is_composite[n];}TE <int val_limit,int le_max> CE CRI PrimeEnumeration<val_limit,le_max>::length()CO NE{RE m_le;}
CL HeapPrimeEnumeration{PU:int m_val_limit;VE<bool> m_is_composite;VE<int> m_val;int m_le;IN HeapPrimeEnumeration(CRI val_limit);IN CRI OP[](CRI i)CO;IN CRI Get(CRI i)CO;IN bool IsComposite(CRI n)CO;IN CRI length()CO NE;};
IN HeapPrimeEnumeration::HeapPrimeEnumeration(CRI val_limit):m_val_limit(val_limit),m_is_composite(m_val_limit),m_val(),m_le(0){for(int i = 2;i < m_val_limit;i++){if(! m_is_composite[i]){for(int j = ll(i)* i;j < val_limit;j += i){m_is_composite[j]= true;}m_val.push_back(i);}}m_le = m_val.SZ();}IN CRI HeapPrimeEnumeration::OP[](CRI i)CO{AS(0 <= i && i < m_le);RE m_val[i];}IN CRI HeapPrimeEnumeration::Get(CRI i)CO{RE OP[](i);}IN bool HeapPrimeEnumeration::IsComposite(CRI n)CO{AS(0 <= n && n < m_val_limit);RE m_is_composite[n];}IN CRI HeapPrimeEnumeration::length()CO NE{RE m_le;}

TE <TY PE> auto CheckPE(CO PE& pe)-> decltype(pe.IsComposite(0),true_type());TE <TY...> false_type CheckPE(...);TE <TY T>CE bool IsPE = decltype(CheckPE(declval<T>()))();

TE <int val_limit>CL LeastDivisor{PU:int m_val[val_limit];CE LeastDivisor()NE;IN CRI OP[](CRI i)CO;CE CRI Get(CRI i)CO;};
TE <int val_limit> CE LeastDivisor<val_limit>::LeastDivisor()NE:m_val{}{for(int d = 2;d < val_limit;d++){if(m_val[d]== 0){for(int n = d;n < val_limit;n += d){m_val[n]== 0?m_val[n]= d:d;}}}}TE <int val_limit> IN CRI LeastDivisor<val_limit>::OP[](CRI i)CO{AS(0 <= i && i < val_limit);RE m_val[i];}TE <int val_limit> CE CRI LeastDivisor<val_limit>::Get(CRI i)CO{RE m_val[i];}
CL HeapLeastDivisor{PU:int m_val_limit;VE<int> m_val;IN HeapLeastDivisor(CRI val_limit)NE;IN CRI OP[](CRI i)CO;IN CRI Get(CRI i)CO;IN CRI length()CO NE;};
IN HeapLeastDivisor::HeapLeastDivisor(CRI val_limit)NE:m_val_limit(val_limit),m_val(m_val_limit){for(int d = 2;d < m_val_limit;d++){if(m_val[d]== 0){for(int n = d;n < m_val_limit;n += d){m_val[n]== 0?m_val[n]= d:d;}}}}IN CRI HeapLeastDivisor::OP[](CRI i)CO{AS(0 <= i && i < m_val_limit);RE m_val[i];}IN CRI HeapLeastDivisor::Get(CRI i)CO{RE m_val[i];}IN CRI HeapLeastDivisor::length()CO NE{RE m_val_limit;}

TE <TY PE,TY INT>auto MoeviusFunction(CO PE& pe,INT n)NE -> enable_if_t<IsPE<PE>,int>{CRI le = pe.le();int AN = 1;int i = 0;WH(i < le && n > 1){auto& p = pe[i++];if(n % p == 0){if((n /= p)% p == 0){RE 0;}AN *= -1;}}RE n == 1?AN:AN *= -1;}TE <TY LD,TY INT>auto MoeviusFunction(CO LD& ld,INT n)-> enable_if_t<!IsPE<LD>,int>{int AN = 1;WH(n > 1){auto& p = ld[n];if((n /= p)% p == 0){RE 0;}AN *= -1;}RE AN;}TE <TY LD,TY INT>VE<INT> TotalMoeviusFunction(CO LD& ld,CO INT& n_max){VE<INT> AN(n_max + 1,1);AN[0]= 0;for(int i = 2;i <= n_max;i++){auto& p = ld[i];CO int j = i / p;AN[i]= j % p == 0?0:-AN[j];}RE AN;}
#endif

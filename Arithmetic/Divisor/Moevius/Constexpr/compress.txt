#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/Divisor/Moevius/Constexpr/a_Body.hpp"
#else
TE <TY INT,INT val_limit>CL LeastDivisor{PU:INT m_val[val_limit];CE LeastDivisor()NE;IN CO INT& OP[](CRI i)CO;CE CO INT& Get(CRI i)CO;};
TE <TY INT,INT val_limit> CE LeastDivisor<INT,val_limit>::LeastDivisor()NE:m_val{}{for(int d = 2;d < val_limit;d++){if(m_val[d]== 0){for(int n = d;n < val_limit;n += d){m_val[n]== 0?m_val[n]= d:d;}}}}TE <TY INT,INT val_limit> IN CO INT& LeastDivisor<INT,val_limit>::OP[](CRI i)CO{AS(0 <= i && i < val_limit);RE m_val[i];}TE <TY INT,INT val_limit> CE CO INT& LeastDivisor<INT,val_limit>::Get(CRI i)CO{RE m_val[i];}

TE <TY INT,INT val_limit>CL MoeviusFunction{PU:INT m_val[val_limit];CE MoeviusFunction(CO LeastDivisor<INT,val_limit>& ld)NE;IN CO INT& OP()(CRI n)CO;};
TE <TY INT,INT val_limit> CE MoeviusFunction<INT,val_limit>::MoeviusFunction(CO LeastDivisor<INT,val_limit>& ld)NE:m_val{0,1}{for(int i = 2;i < val_limit;i++){auto& p = ld[i];CO int j = i / p;m_val[i]= j % p == 0?0:-m_val[j];}}TE <TY INT,INT val_limit> IN CO INT& MoeviusFunction<INT,val_limit>::OP()(CRI n)CO{AS(0 <= n && n < val_limit);RE m_val[n];}
#endif

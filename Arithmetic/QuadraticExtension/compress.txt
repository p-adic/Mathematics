#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/QuadraticExtension/a_Body.hpp"
#else
TE <TY INT,int NUM>CL COantsForQuadraticExtensions{PU:COantsForQuadraticExtensions()= delete;ST INT g_D;};
TE <TY INT,int NUM> INT COantsForQuadraticExtensions<INT,NUM>::g_D = INT{};
TE <TY INT,int NUM>CL QuadraticExtensions{PU:INT m_a;INT m_b;IN QuadraticExtensions()NE;IN QuadraticExtensions(CO INT& a)NE;IN QuadraticExtensions(CO INT& a,CO INT& b)NE;IN QuadraticExtensions(CO QuadraticExtensions<INT,NUM>& n)NE;IN QuadraticExtensions(QuadraticExtensions<INT,NUM>&& n)NE;IN QuadraticExtensions<INT,NUM>& OP=(QuadraticExtensions<INT,NUM> n)NE;IN pair<CO INT&,CO INT&> Get()CO NE;IN QuadraticExtensions<INT,NUM>& OP+=(CO QuadraticExtensions<INT,NUM>& n)NE;TE <TY T> IN auto OP+=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;TE <TY T> IN auto OP+=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;IN QuadraticExtensions<INT,NUM>& OP-=(CO QuadraticExtensions<INT,NUM>& n)NE;TE <TY T> IN auto OP-=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;TE <TY T> IN auto OP-=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;IN QuadraticExtensions<INT,NUM>& OP*=(CO QuadraticExtensions<INT,NUM>& n)NE;TE <TY T> IN auto OP*=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;TE <TY T> IN auto OP*=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;IN QuadraticExtensions<INT,NUM>& OP/=(QuadraticExtensions<INT,NUM> n)NE;TE <TY T> IN auto OP/=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;TE <TY T> IN auto OP/=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;TE <TY T> IN auto OP%=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>;IN bool OP==(CO QuadraticExtensions<INT,NUM>& n)NE;TE <TY T> IN bool OP==(CO T& n)NE;TE <TY T> IN bool OP!=(CO T& n)NE;TE <TY SINT> IN QuadraticExtensions<INT,NUM> OP^(SINT EX)CO;IN QuadraticExtensions<INT,NUM> OP-()CO NE;IN INT Norm()CO NE;IN QuadraticExtensions<INT,NUM> Adjoint()CO NE;TE <TY SINT> IN QuadraticExtensions<INT,NUM>& Power(SINT EX);IN VO swap(QuadraticExtensions<INT,NUM>& n)NE;ST IN CO QuadraticExtensions<INT,NUM>& zero()NE;ST IN CO QuadraticExtensions<INT,NUM>& one()NE;ST IN CO INT& GetD()NE;ST IN VO SetD(CO INT& M)NE;TE <TY UINT> IN QuadraticExtensions<INT,NUM>& PositivePower(UINT EX)NE;TE <TY UINT> IN QuadraticExtensions<INT,NUM>& NonNegativePower(UINT EX)NE;US COants = COantsForQuadraticExtensions<INT,NUM>;};
TE <TY INT>US QuadraticExtension = QuadraticExtensions<INT,0>;
TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>::QuadraticExtensions()NE:m_a(),m_b(){}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>::QuadraticExtensions(CO INT& a)NE:m_a(a),m_b(){}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>::QuadraticExtensions(CO INT& a,CO INT& b)NE:m_a(a),m_b(b){}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>::QuadraticExtensions(CO QuadraticExtensions<INT,NUM>& n)NE:m_a(n.m_a),m_b(n.m_b){}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>::QuadraticExtensions(QuadraticExtensions<INT,NUM>&& n)NE:m_a(MO(n.m_a)),m_b(MO(n.m_b)){}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::OP=(QuadraticExtensions<INT,NUM> n)NE{m_a = MO(n.m_a);m_b = MO(n.m_b);RE *TH;}TE <TY INT,int NUM> IN pair<CO INT&,CO INT&> QuadraticExtensions<INT,NUM>::Get()CO NE{RE{m_a,m_b};}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::OP+=(CO QuadraticExtensions<INT,NUM>& n)NE{m_a += n.m_a;m_b += n.m_b;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP+=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{m_a += a;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP+=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{RE *TH += QuadraticExtensions<INT,NUM>(n);}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::OP-=(CO QuadraticExtensions<INT,NUM>& n)NE{m_a -= n.m_a;m_b -= n.m_b;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP-=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{m_a -= a;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP-=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{RE *TH -= QuadraticExtensions<INT,NUM>(n);}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::OP*=(CO QuadraticExtensions<INT,NUM>& n)NE{CO INT a = m_a * n.m_a + m_b * n.m_b * COants::g_D;m_b = m_a * n.m_b + m_b * n.m_a;m_a = a;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP*=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{m_a *= a;m_b *= a;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP*=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{RE *TH *= QuadraticExtensions<INT,NUM>(n);}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::OP/=(QuadraticExtensions<INT,NUM> n)NE{RE(*TH *= n.Adjoint())/= n.Norm();}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP/=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{m_a /= a;m_b /= a;RE *TH;}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP/=(CO T& n)NE -> enable_if_t<!is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{RE *TH /= QuadraticExtensions<INT,NUM>(n);}TE <TY INT,int NUM> TE <TY T> IN auto QuadraticExtensions<INT,NUM>::OP%=(CO T& a)NE -> enable_if_t<is_COructible_v<INT,T>,QuadraticExtensions<INT,NUM>&>{m_a %= a;m_b %= a;RE *TH;}TE <TY INT,int NUM> IN bool QuadraticExtensions<INT,NUM>::OP==(CO QuadraticExtensions<INT,NUM>& n)NE{RE m_a == n.m_a && m_b == n.m_b;}TE <TY INT,int NUM> TE <TY T> IN bool QuadraticExtensions<INT,NUM>::OP==(CO T& n)NE{RE *TH == QuadraticExtensions<INT,NUM>(n);}TE <TY INT,int NUM> TE <TY T> IN bool QuadraticExtensions<INT,NUM>::OP!=(CO T& n)NE{RE !(*TH == n);}TE <TY INT,int NUM> TE <TY SINT> IN QuadraticExtensions<INT,NUM> QuadraticExtensions<INT,NUM>::OP^(SINT EX)CO{RE MO(QuadraticExtensions<INT,NUM>(*TH).Power(MO(EX)));}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM> QuadraticExtensions<INT,NUM>::OP-()CO NE{auto AN = *TH;AN.m_a = -AN.m_a;AN.m_b = -AN.m_b;RE AN;}TE <TY INT,int NUM> IN INT QuadraticExtensions<INT,NUM>::Norm()CO NE{RE m_a * m_a - m_b * m_b * COants::g_D;}TE <TY INT,int NUM> IN QuadraticExtensions<INT,NUM> QuadraticExtensions<INT,NUM>::Adjoint()CO NE{RE QuadraticExtensions<INT,NUM>(m_a,-m_b);}TE <TY INT,int NUM> TE <TY UINT> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::PositivePower(UINT EX)NE{QuadraticExtensions<INT,NUM> pw{*TH};EX--;WH(EX != 0){(EX & 1)== 1?*TH *= pw:*TH;EX >>= 1;pw *= pw;}RE *TH;}TE <TY INT,int NUM> TE <TY UINT> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::NonNegativePower(UINT EX)NE{RE EX == 0?(m_a = 1,m_b = 0,*TH):PositivePower(MO(EX));}TE <TY INT,int NUM> TE <TY SINT> IN QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::Power(SINT EX){RE EX < 0?(*TH = Adjoint()/ Norm()).PositivePower(-EX):NonNegativePower(MO(EX));}TE <TY INT,int NUM> IN VO QuadraticExtensions<INT,NUM>::swap(QuadraticExtensions<INT,NUM>& n)NE{std::swap(m_a,n.m_a);std::swap(m_b,n.m_b);}TE <TY INT,int NUM> IN CO QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::zero()NE{ST CO QuadraticExtensions<INT,NUM> zero{};RE zero;}TE <TY INT,int NUM> IN CO QuadraticExtensions<INT,NUM>& QuadraticExtensions<INT,NUM>::one()NE{ST CO QuadraticExtensions<INT,NUM> one{INT(1)};RE one;}TE <TY INT,int NUM> IN CO INT& QuadraticExtensions<INT,NUM>::GetD()NE{RE COants::g_D;}TE <TY INT,int NUM> IN VO QuadraticExtensions<INT,NUM>::SetD(CO INT& D)NE{COants::g_D = D;}TE <TY INT,int NUM,TY T> IN QuadraticExtensions<INT,NUM> OP+(QuadraticExtensions<INT,NUM> n,CO T& a)NE{RE MO(n += a);}TE <TY INT,int NUM,TY T> IN QuadraticExtensions<INT,NUM> OP-(QuadraticExtensions<INT,NUM> n,CO T& a)NE{RE MO(n -= a);}TE <TY INT,int NUM,TY T> IN QuadraticExtensions<INT,NUM> OP*(QuadraticExtensions<INT,NUM> n,CO T& a)NE{RE MO(n *= a);}TE <TY INT,int NUM,TY T> IN QuadraticExtensions<INT,NUM> OP/(QuadraticExtensions<INT,NUM> n,T&& a)NE{RE MO(n /= forward<T>(a));}TE <TY INT,int NUM,TY T> IN QuadraticExtensions<INT,NUM> OP%(QuadraticExtensions<INT,NUM> n,CO T& a)NE{RE MO(n %= a);}TE <TY INT,int NUM,TY SINT> IN QuadraticExtensions<INT,NUM> Power(QuadraticExtensions<INT,NUM> n,SINT EX){RE MO(n.Power(MO(EX)));}
#endif


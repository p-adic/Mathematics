#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/Sum/a_Body.hpp"
#else
TE <TY T,TE <TY...> TY V,TY MONOID>T MonoidalProd(MONOID M,V<T> f){if(f.empty()){f.push_back(M.One());}auto EN = f.EN();WH(f.SZ()> 1){auto IT = f.BE();WH(IT != EN){auto& t = *IT;IT++;if(IT != EN){t = M.Product(MO(t),*IT);IT = f.erase(IT);}}}RE MO(f.front());}TE <TY T,TE <TY...> TY V> IN T Sum(V<T> f){RE MonoidalProd(AdditiveMonoid<T>(),MO(f));}TE <TY T,TE <TY...> TY V> IN T Prod(V<T> f,T unit = 1){RE MonoidalProd(MultiplicativeMonoid<T>(unit),MO(f));}<TY T,TY UINT>T Power(T t,UINT EX,T init = 1){(EX & 1)== 1?init *= t:init;EX >>= 1;WH(EX > 0){t = Square(t);(EX & 1)== 1?init *= t:init;EX >>= 1;}RE MO(init);}TE <TY INT> IN INT ArithmeticProgressionSum(CO INT& l,INT r,CO INT& d = 1){AS(l <= r);CO INT c =(r - l)/ d;RE(c & 1)== 0?(c + 1)*(l + d *(c >> 1)):((c + 1)>> 1)*((l << 1)+ d * c);}TE <TY INT> IN INT ArithmeticProgressionSum(CO INT& r){RE ArithmeticProgressionSum(INT{},r);}TE <TY T,TY UINT> IN T GeometricProgressionSum(T rate,UINT EX_max,CO T& init = 1){T rate_minus = rate - 1;RE rate_minus == 0?init * ++EX_max:(Power(MO(rate),MO(++EX_max))- 1)/ MO(rate_minus)* init;}TE <TY T,TY UINT>T GeometricProgressionLinearCombinationSum(VE<T> rate,VE<UINT> EX_max,CO VE<T>& init){CO int SZ = init.SZ();AS(int(rate.SZ())== SZ && int(EX_max.SZ())== SZ);T AN{};for(int i = 0;i < SZ;i++){AN += GeometricProgressionSum(MO(rate[i]),MO(EX_max[i]),init[i]);}RE AN;}
#endif

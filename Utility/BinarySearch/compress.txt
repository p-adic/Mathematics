#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Utility/BinarySearch/Debug/a_Body.hpp"
#else
/* EXPRESSIONがANSWERの広義単調関数の時、EXPRESSION >= CONST_TARGETの整数解を格納。*/
#define BS(AN,MINIMUM,MAXIMUM,EXPRESSION,DESIRED_INEQUALITY,CO_TARGET,INEQUALITY_FOR_CHECK,UPDATE_U,UPDATE_L,UPDATE_AN)ST_AS(! is_same<decldecay_t(CO_TARGET),uint>::value && ! is_same<decldecay_t(CO_TARGET),ull>::value);ll AN = MINIMUM;{ll AN ## _L = MINIMUM;ll AN ## _R = MAXIMUM;AN = UPDATE_AN;ll EXPRESSION_BS;CO ll CO_TARGET_BS =(CO_TARGET);ll DIFFERENCE_BS;WH(AN ## _L < AN ## _R){DIFFERENCE_BS =(EXPRESSION_BS =(EXPRESSION))- CO_TARGET_BS;if(DIFFERENCE_BS INEQUALITY_FOR_CHECK 0){AN ## _R = UPDATE_U;}else{AN ## _L = UPDATE_L;}AN = UPDATE_AN;}if(AN ## _L > AN ## _R || !((EXPRESSION)DESIRED_INEQUALITY CO_TARGET_BS)){AN = MAXIMUM + 1;}}\
// 単調増加の時にEXPRESSION >= CO_TARGETの最小解を格納。
#define MIN_GEQ(AN,MINIMUM,MAXIMUM,EXPRESSION,CO_TARGET)BS(AN,MINIMUM,MAXIMUM,EXPRESSION,>=,CO_TARGET,>=,AN,AN + 1,Mid(AN ## _L,AN ## _R))
// 単調増加の時にEXPRESSION <= CO_TARGETの最大解を格納。
#define MAX_LEQ(AN,MINIMUM,MAXIMUM,EXPRESSION,CO_TARGET)BS(AN,MINIMUM,MAXIMUM,EXPRESSION,<=,CO_TARGET,>,AN - 1,AN,Mid(AN ## _L + 1,AN ## _R))
// 単調減少の時にEXPRESSION >= CO_TARGETの最大解を格納。
#define MAX_GEQ(AN,MINIMUM,MAXIMUM,EXPRESSION,CO_TARGET)BS(AN,MINIMUM,MAXIMUM,EXPRESSION,>=,CO_TARGET,<,AN - 1,AN,Mid(AN ## _L + 1,AN ## _R))
// 単調減少の時にEXPRESSION <= CO_TARGETの最小解を格納。
#define MIN_LEQ(AN,MINIMUM,MAXIMUM,EXPRESSION,CO_TARGET)BS(AN,MINIMUM,MAXIMUM,EXPRESSION,<=,CO_TARGET,<=,AN,AN + 1,Mid(AN ## _L,AN ## _R))
TE <TY INT> IN CE INT Mid(CO INT& l,CO INT& r){RE l +((r - l)>> 1);}
#endif



#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Utility/TwoPointerApproach/Debug/a_Body.hpp"
#else
/* VAR_TPAは尺取り法用の変数名の接頭辞で、実際の変数名ではなく、_Lと_Rと_infoがつく。
ANSWER ## _temp = {VAR_TPA ## _L,VAR_TPA ## _R,VPA_TPA ## _info}を
{INIT,INIT,INFO_init}で初期化する。VPA_TPA ## _infoは区間和など。
ANSWER ## _tempがCONTINUE_CONDITIONを満たす限り、ANSWER ## _tempが
条件ON_CONDITIONを満たすか否かを判定し、それがtrueになるか
VAR_TAR ## _LがVAR_TAR ## _Rに追い付くまでVAR_TPA ## _LとVPA_TPA ## _infoの
更新操作UPDATE_Lを繰り返し、その後VAR_TPA ## _RとVPA_TPA ## _infoの
更新操作UPDATE_Rを行う。（マクロとコンマの制約上、関数オブジェクトを用いる）
ON_CONDITIONがtrueとなる極大閉区間とその時点でのinfoをANSWERに格納する。
例えば長さNの非負整数値配列Aで極大な正値区間とそこでの総和を取得したい場合
auto update_L = [&]( int& i_L , ll& i_info ){ i_info -= A[i_L++]; };
auto update_R = [&]( int& i_R , ll& i_info ){ ++i_R < N ? i_info += A[i_R] : i_info; };
TPA( interval , i , 0 , i_R < N , update_L( i_L , i_info ) , update_R( i_R , i_info ) , A[i_L] > 0 && A[i_R] > 0 , ll( A[0] ) );
とすればtuple<int,int,ll>値配列intervalに{左端,右端,総和}の列が格納される。*/
#define TPA(AN,VAR_TPA,INIT,CONTINUE_CONDITION,UPDATE_L,UPDATE_R,ON_CONDITION,INFO_init)VE<tuple<decldecay_t(INIT),decldecay_t(INIT),decldecay_t(INFO_init)>> AN{};{auto init_TPA = INIT;decldecay_t(AN.front())AN ## _temp ={init_TPA,init_TPA,INFO_init};auto AN ## _prev = AN ## _temp;auto& VAR_TPA ## _L = get<0>(AN ## _temp);auto& VAR_TPA ## _R = get<1>(AN ## _temp);auto& VAR_TPA ## _info = get<2>(AN ## _temp);bool on_TPA_prev = false;WH(true){bool continuing = CONTINUE_CONDITION;bool on_TPA = continuing &&(ON_CONDITION);if(on_TPA_prev && ! on_TPA){AN.push_back(AN ## _prev);}if(continuing){if(on_TPA || VAR_TPA ## _L == VAR_TPA ## _R){AN ## _prev = AN ## _temp;UPDATE_R;}else{UPDATE_L;}}else{break;}on_TPA_prev = on_TPA;}}
#endif


  CIN( ll , N , M , K );
  // /* PrimeEnumeration:                          */
  // /* val_limit = 316 ≒ sqrt(1e5) -> length = 65 */
  // /* val_limit = 448 ≒ sqrt(2e5) -> length = 86 */
  // /* val_limit = 1e5 -> length = 9592           */
  // /* val_limit = 1e6 -> length = 78498          */
  // PrimeEnumeration<316> pe{};
  // // constexpr PrimeEnumeration<int(2e5)> pe{};
  // // static PrimeEnumeration<int(3e5)> pe{};
  // // auto& length = pe.length();

  // auto [pf,e] = PrimeFactorisation( pe , N );
  // // auto [pf,e,q] = PrimePowerFactorisation( pe , N );

  // /* CountDivisor( n ):        */
  // /* n <= 1e3 -> answer <= 32  */
  // /* n <= 1e4 -> answer <= 64  */
  // /* n <= 1e5 -> answer <= 128 */
  // /* n <= 1e6 -> answer <= 256 */
  // int count = CountDivisor( pe , N );
  // // vector<int> div = EnumerateDivisor( pe , N ); Sort( div );
  // // vector<vector<int>> div = TotalEnumerateDivisor( N );

  // 1変数関数f(x)と配列(a_i)_{i=0}^{N-1}に対するsum_i f(a_i)などを考える
  // とします。必要ならば(a_i)_iをソートして広義単調増大とします。
  // - f(a_{i+1}) - f(a_i)がO(1)で計算できO(N)が間に合いそうならば、
  //   f(a_i)の差分計算による高速化
  // - f(a_i)がiに関する等比数列K個の和で表せO(K log N)が間に合いそうならば
  //   等比数列の総和の公式
  //   \\Mathematics\\Arithmetic\\Power\\GeometricProgression
  // - f(a_i)がK次正方行列AとK次元ベクトルvを用いて(A^i v)[0]と表せ
  //   - A-Eが正則でO(K^3 log N)が間に合いそうならば、等比数列の総和の公式
  //     \\Mathematics\\LinearAlgebra
  //     \\Mathematics\\Arithmetic\\Power\\GeometricProgression
  //   - A-Eが正則とは限らずO(K^3 log N)が間に合いそうならば、vにf(a_i)の
  //     累積和を末尾挿入し、行列累乗
  //     \\Mathematics\\LinearAlgebra
  // - #im(f)が小さくf(a_)の各点逆像が計算しやすいならば
  //   fの各点逆像による纏め上げ
  //   sum_i f(a_i)=sum_y #f(a_)^{-1}(y) y
  // - #im(f)が小さくfが非負でf(a_)の始切片逆像が計算しやすいならば
  //   fの始切片逆像による纏め上げ
  //   sum_i f(a_i)=sum_{y>=1} #f(a_)^{-1}([y,∞))
  // - #dom(f)が小さく(a_)の逆像が計算しやすいならば
  //   (a_)の各点逆像による纏め上げ
  //   sum_i f(a_i)=sum_x #(a_)^{-1}(x) f(x)
  // - i%j = i - floor(i/j)jを用いて剰余を商に帰着
  //   - iに関する和はfloor_sum
  //     \\Mathematics\\Combinatorial\\FloorSum
  //   - jに関する和は平方分割
  //     \\Mathematics\\Combinatorial\\ResidueSum
  // - Nが大きい場合と小さい場合で解法の折衷
  // を検討しましょう。

  // 数に関する問題はExperiment, SmallTest, RandomTestが有効なので忘れないようにしましょう。

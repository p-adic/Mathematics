  CIN( int , N );
  CIN_A( ll , 0 , N , A );
  // CIN( string , S );
  CIN( int , Q );
  // BIT t{ N };
  // IntervalMultiplyLazySqrtDecomposition t{ MultiplicativeMonoid<ll>( 1 ) , Module<ll,ll>() , N };
  // vector<vector<ll>> query( q );
  FOR( q , 0 , Q ){
    CIN( int , type );
    if( type == 1 ){
      CIN( ll , l , r , x ); --l; --r;
      // query[q] = {type,l,r,x};
    } else if( type == 2 ){
      CIN( ll , l , r ); --l; --r;
      // query[q] = {type,l,r};
    }
  }

#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Acyclic/ShortestPath/a_Body.hpp"
#else
TE <TY TOPOLOGICAL_SORTED_ACYCLIC_GRAPH,TY MONOID,TY WEIGHT,TY U = inner_t<MONOID>> VE<pair<U,int>> TopologicalSortedShortestPath(TOPOLOGICAL_SORTED_ACYCLIC_GRAPH& G,MONOID M,WEIGHT weight,CRI start){ST_AS(is_same_v<inner_t<TOPOLOGICAL_SORTED_ACYCLIC_GRAPH>,int> && is_same_v<inner_t<MONOID>,U> && is_invocable_r_v<U,WEIGHT,int,int>);auto&& SZ = G.SZ();CO U& one = M.One();VE<pair<U,int>> AN(SZ,{one,-1});for(int i = start;i < SZ;i++){for(auto& u:G.Edge(i)){auto&& j = G.Vertex(u);auto&[w,prev]= AN[j];U temp = weight(i,j);if(prev == -1 || temp < w){AN[j]={MO(temp),i};}}}RE AN;}TE <TY ACYCLIC_GRAPH,TY MONOID,TY WEIGHT,TY T = inner_t<ACYCLIC_GRAPH>,TY U = inner_t<MONOID>> VE<pair<U,T>> AcyclicGraphShortestPath(ACYCLIC_GRAPH& G,MONOID M,WEIGHT weight,CO T& start,CO T& external_point){ST_AS(is_same_v<inner_t<ACYCLIC_GRAPH>,T> && is_invocable_r_v<U,WEIGHT,T,T>);auto[ts,ts_inv,ts_e]= TopologicalSortedGraph(G);auto&& SZ = G.SZ();VE<pair<U,T>> AN(SZ,{M.One(),-1});auto ts_AN = TopologicalSortedShortestPath(Graph{SZ,MO(ts_e)},MO(M),[&](CRI i,CRI j){RE weight(ts[i],ts[j]);},ts_inv[start]);for(int i = 0;i < SZ;i++){auto&[w,prev]= ts_AN[ts_inv[i]];AN[i]={MO(w),prev == -1?external_point:ts[prev]};}RE AN;}
#endif


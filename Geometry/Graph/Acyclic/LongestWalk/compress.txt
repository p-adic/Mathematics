#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Acyclic/LongestWalk/a_Body.hpp"
#else
TE <TY ACYCLIC_GRAPH>VE<inner_t<ACYCLIC_GRAPH>> TopologicalSort(ACYCLIC_GRAPH& G){CRI SZ = G.SZ();VE<inner_t<ACYCLIC_GRAPH>> AN(SZ);VE<bool> edged(SZ),fixed(SZ);int num = SZ - 1;for(int i = 0;i < SZ;i++){if(!fixed[i]){VE<VE<int>> dfs ={{i}};WH(!dfs.empty()){auto& e = dfs.back();if(e.empty()){dfs.pop_back();}else{CRI j = e.back();if(fixed[j]){e.pop_back();}else{auto&& t = G.Enumeration(j);if(edged[j]){fixed[j]= true;AN[num--]= t;e.pop_back();}else{edged[j]= true;auto&& edge_t = G.Edge(t);VE<int> edge_j{};for(auto& u:edge_t){auto&& k = G.Enumeration_inv(u);if(!fixed[k]){edge_j.push_back(k);}}dfs.push_back(MO(edge_j));}}}}}}RE AN;}

TE <TY ACYCLIC_GRAPH,TY MONOID> pair<inner_t<MONOID>,LI<inner_t<ACYCLIC_GRAPH>>> GetLongestWalk(ACYCLIC_GRAPH& G,MONOID M){US T = inner_t<ACYCLIC_GRAPH>;US U = inner_t<MONOID>;CRI SZ = G.SZ();CO U& one = M.One();if(SZ == 0){RE{one,LI<T>()};}VE<T> top_sort = TopologicalSort(G);VE<U> dp(SZ,one);VE<int> prev(SZ,-1);for(auto IT_vertex = top_sort.BE(),EN_vertex = top_sort.EN();IT_vertex != EN_vertex;IT_vertex++){auto&& edge_i = G.Edge(*IT_vertex);auto&& i = G.Enumeration_inv(*IT_vertex);CO U& dp_i = dp[i];for(auto IT_edge_i = edge_i.BE(),EN_edge_i = edge_i.EN();IT_edge_i != EN_edge_i;IT_edge_i++){auto&[t,u]= *IT_edge_i;auto&& j = G.Enumeration_inv(t);U& dp_j = dp[j];if(!(dp_i < dp_j)){dp_j = M.Product(dp_i,u);prev[j]= i;}}}U AN = one;int EN_num = -1;for(int i = 0;i < SZ;i++){CO U& dp_i = dp[i];if(EN_num == -1 || AN < dp_i){AN = dp_i;EN_num = i;}}LI<T> path{};WH(EN_num != -1){path.push_front(G.Enumeration(EN_num));EN_num = prev[EN_num];}RE{MO(AN),MO(path)};}
#endif

#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/DepthFirstSearch/Tree/HeavyLightDecomposition/a_Body.hpp"
#else
// êÊÇ…DepthFirstSearchOnTreeÇì\ÇÈÅB

TE <TY TREE>CL HeavyLightDecomposition:PU DepthFirstSearchOnTree<TREE>{PU:VE<int> m_HL;VE<int> m_HL_inv;VE<VE<pair<int,int>>> m_path;VE<pair<int,int>> m_subtree;IN HeavyLightDecomposition(TREE& T,CRI root = 0,CRI digit = 0);IN CRI RearragedNodeNumber(CRI n)CO;IN CRI RearragedNodeNumber_inv(CRI i)CO;IN CO VE<pair<int,int>>& PathFromRoot(CRI i)CO;IN CO pair<int,int> Subtree(CRI i)CO;};
TE <TY TREE> IN HeavyLightDecomposition<TREE>::HeavyLightDecomposition(TREE& T,CRI root,CRI digit):DepthFirstSearchOnTree<TREE>(T,root,digit),m_HL(),m_HL_inv(),m_path(),m_subtree(){CRI V = TH->SZ();m_HL.resize(V,TH->NodeNumber(0));m_HL_inv.resize(V);for(int n = 0;n < V;n++){CRI i = TH->NodeNumber(n);auto& children_i = TH->Children(i);if(!children_i.empty()){int j_opt = -1;int heaviness_opt = -1;for(auto& j:TH->Children(i)){CRI heaviness_j = TH->Heaviness(j);if(heaviness_opt < heaviness_j){j_opt = j;heaviness_opt = heaviness_j;}}int temp = m_HL_inv[i]+ 1;temp += TH->Heaviness(m_HL[m_HL_inv[j_opt]= temp]= j_opt)+ 1;for(auto& j:TH->Children(i)){if(j != j_opt){temp += TH->Heaviness(m_HL[m_HL_inv[j]= temp]= j)+ 1;}}}}m_path.resize(V,{{root,root}});for(int n = 1;n < V;n++){CRI i = TH->NodeNumber(n);CRI parent_i = TH->Parent(i);auto& m_path_i = m_path[i]= m_path[parent_i];auto&[l,r]= m_path_i.back();CRI HL_inv_parent_i = m_HL_inv[parent_i];if(r == HL_inv_parent_i){r = m_HL_inv[i];}else{r = HL_inv_parent_i;CRI HL_inv_i = m_HL_inv[i];m_path_i.push_back({HL_inv_i,HL_inv_i});}}m_subtree.resize(V);for(int n = V - 1;n >= 0;n--){CRI i = TH->NodeNumber(n);auto&[l,r]= m_subtree[i];l = r = m_HL_inv[i];for(auto& j:TH->Children(i)){r = max(r,m_subtree[j].second);}}}TE <TY TREE> IN CRI HeavyLightDecomposition<TREE>::RearragedNodeNumber(CRI n)CO{AS(0 <= n && n < TH->SZ());RE m_HL[n];}TE <TY TREE> IN CRI HeavyLightDecomposition<TREE>::RearragedNodeNumber_inv(CRI i)CO{AS(0 <= i && i < TH->SZ());RE m_HL_inv[i];}TE <TY TREE> IN CO VE<pair<int,int>>& HeavyLightDecomposition<TREE>::PathFromRoot(CRI i)CO{AS(0 <= i && i < TH->SZ());RE m_path[i];}TE <TY TREE> IN CO pair<int,int> HeavyLightDecomposition<TREE>::Subtree(CRI i)CO{AS(0 <= i && i < TH->SZ());RE m_subtree[i];}
#endif


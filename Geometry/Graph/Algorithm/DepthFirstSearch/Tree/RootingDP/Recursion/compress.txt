#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/DepthFirstSearch/Tree/RootingDP/Recursion/a_Body.hpp"
#else
TE <TY TREE,TY F>ret_t<F> RecursionRootingDP_Body(TREE& T,F& f,CRI i,VE<bool>& checked){US U = ret_t<F>;ST_AS(is_invocable_r_v<U,F,VE<U>,int>);checked[i]= true;auto& ei = T.Edge(i);CO int ei_SZ = ei.SZ();VE<U> temp{};for(int m = 0;m < ei_SZ;m++){auto&& j = T.Vertex(ei[m]);if(checked[j]){continue;}temp.push_back(RootingDP_Body(T,f,j,checked));}RE f(MO(temp),i);}TE <TY TREE,TY F> IN ret_t<F> RecursionRootingDP(TREE& T,F& f,CRI root){VE<bool> checked(T.SZ());RE RecursionRootingDP_Body(T,f,root,checked);}TE <TY TREE,TY VAL,TY RIGHT_ACTION>ret_t<VAL,int> BinaryRootingDP_Body(TREE& T,VAL& val,RIGHT_ACTION& prod,CRI i,VE<bool>& checked){US U = ret_t<VAL,int>;ST_AS(is_invocable_r_v<U,RIGHT_ACTION,U,U,int,int>);checked[i]= true;auto& ei = T.Edge(i);CO int ei_SZ = ei.SZ();U AN = val(i);for(int m = 0;m < ei_SZ;m++){auto&& j = T.Vertex(ei[m]);if(checked[j]){continue;}AN = prod(MO(AN),BinaryRootingDP_Body(T,val,prod,j,checked),i,j);}RE AN;}TE <TY TREE,TY VAL,TY RIGHT_ACTION> IN ret_t<VAL,int> BinaryRootingDP(TREE& T,VAL& val,RIGHT_ACTION& prod,CRI root){VE<bool> checked(T.SZ());RE BinaryRootingDP_Body(T,val,prod,root,checked);}
#endif


#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/DepthFirstSearch/Tree/RootingDP/a_Body.hpp"
// êÊÇ…DepthFirstSearchOnTreeÇì\ÇÈÅB

TE <TY DFST,TY F>ret_t<F> DFST<TREE>::RootingDP(DFST& dfst,F& f){US U = ret_t<F>;ST_AS(is_invocable_r_v<U,F,VE<U>,int>);CRI V = dfst.SZ();VE<VE<U>> children_value(V);U temp;for(int n = 0;n < V;n++){CRI i = dfst.NodeNumber(n,true);CRI j = dfst.Parent(i);temp = f(MO(children_value[i]),i);if(j != -1){children_value[j].push_back(MO(temp));}}RE temp;}TE <TY DFST,TY MONOID,TY F,TY G>VE<inner_t<MONOID>> DFST<TREE>::RerootingDP(DFST& dfst,MONOID M,F& f,G& g){US U = inner_t<MONOID>;ST_AS(is_invocable_r_v<U,F,U,int> && is_invocable_r_v<U,G,U,bool,int,int>);if(! m_set_children){SetChildren();}CRI V = dfst.SZ();CO U& e = M.Unit();VE<VE<U>> children_value(V);VE<VE<U>> l_sum(V);VE<VE<U>> r_sum(V);for(int i = 0;i < V;i++){children_value[i].resize(m_children[i].SZ());}for(int n = 0;n < V;n++){CRI i = dfst.NodeNumber(n,true);CO int SZ_i = children_value[i].SZ();U temp = e;l_sum[i].reserve(SZ_i + 1);l_sum[i].push_back(temp);for(int m = 0;m < SZ_i;m++){l_sum[i].push_back(temp = M.Product(temp,g(children_value[i][m],true,i,dfst.Children(i)[m])));}CRI j = dsft.Parent(i);if(j != -1){children_value[j][dfst.ChildrenNumer(i)]= f(temp,i);}temp = e;r_sum[i].resize(SZ_i);for(int m = 1;m <= SZ_i;m++){r_sum[i][SZ_i - m]= temp;temp = M.Product(g(children_value[i][SZ_i - m],true,i,dfst.Children(i)[SZ_i - m]),temp);}}for(int n = 1;n < V;n++){CRI i = dfst.NodeNumber(n);CRI j = dfst.Parent(i);CRI k = dfst.ChildrenNumber(i);CO int SZ_i = r_sum[i].SZ();CO U rest_i = g(f(M.Product(l_sum[j][k],r_sum[j][k]),j),false,i,j);for(int m = 0;m <= SZ_i;m++){l_sum[i][m]= M.Product(rest_i,l_sum[i][m]);}}VE<U> AN(V);for(int i = 0;i < V;i++){AN[i]= f(l_sum[i].back(),i);}RE AN;}
#endif


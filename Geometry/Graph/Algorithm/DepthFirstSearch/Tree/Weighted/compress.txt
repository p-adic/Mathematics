#define DFS DepthFirstSearch
#define DFST DepthFirstSearchOnTree
#define DFSWT DepthFirstSearchOnWeightedTree
#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/DepthFirstSearch/Tree/Weighted/a_Body.hpp"
#else
#define VBFS VirtualBreadthFirstSearch

TE <TY T,TY GRAPH>CL VBFS{PU:GRAPH& m_G;T m_not_found;bool m_initialised;LI<T> m_next;VE<bool> m_found;VE<T> m_prev;IN VBFS(GRAPH& G,CO T& not_found);TE <TY Arg> IN VBFS(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);TE <TE <TY...> TY VEC> IN VO Initialise(VEC<T> inits);IN VO Shift(CO T& init);TE <TE <TY...> TY VEC> IN VO Shift(VEC<T> inits);IN CRI SZ()CO NE;IN VE<bool>::reference found(CO T& t);IN CO T& prev(CO T& t);IN T Next();TE <TY U = T> auto GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>;TE <TY U = T> auto GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>;tuple<VE<int>,VE<VE<T>>,int> GetConnectedComponent();VE<T> GetNodeEnumeration();VE<T> GetReversedNodeEnumeration();VI VO Push(LI<T>& next,CO T& t)= 0;TE <TY PATH> IN VO Push(LI<T>& next,CO PATH& p);};
TE <TY T,TY GRAPH> IN VBFS<T,GRAPH>::VBFS(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_initialised(false),m_next(),m_found(),m_prev(){ST_AS(is_same_v<inner_t<GRAPH>,T>);}TE <TY T,TY GRAPH> TE <TY Arg> IN VBFS<T,GRAPH>::VBFS(GRAPH& G,CO T& not_found,Arg&& init):VBFS<T,GRAPH>(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Initialise(){m_initialised = true;CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_prev = VE<T>(V,m_not_found);}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);m_found[i]= true;}TE <TY T,TY GRAPH> TE <TE <TY...> TY VEC> IN VO VBFS<T,GRAPH>::Initialise(VEC<T> inits){Initialise();for(auto& init:inits){m_next.push_back(MO(init));}CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);m_found[i]= true;}}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Shift(CO T& init){if(m_initialised){CRI V = SZ();auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < V);m_next.clear();if(! m_found[i]){m_next.push_back(init);m_found[i]= true;}}else{Initialise(init);}}TE <TY T,TY GRAPH> TE <TE <TY...> TY VEC> IN VO VBFS<T,GRAPH>::Shift(VEC<T> inits){if(m_initialised){m_next.clear();CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);if(! m_found[i]){m_next.push_back(u);m_found[i]= true;}}}else{Initialise(MO(inits));}}TE <TY T,TY GRAPH> IN CRI VBFS<T,GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY T,TY GRAPH> IN VE<bool>::reference VBFS<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& VBFS<T,GRAPH>::prev(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY T,TY GRAPH> IN T VBFS<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO T t_curr = m_next.front();m_next.pop_front();for(auto& t:m_G.Edge(t_curr)){auto&& i = m_G.Enumeration_inv(t);auto&& found_i = m_found[i];if(! found_i){Push(m_next,t);m_prev[i]= t_curr;found_i = true;}}RE t_curr;}TE <TY T,TY GRAPH> TE <TY U>auto VBFS<T,GRAPH>::GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>{Map<T,int> AN{};for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[*IT]= 0;}T t;WH((t = Next())!= m_not_found){if(AN.count(t)== 0){AN[t]= AN[m_prev[m_G.Enumeration_inv(t)]]+ 1;}}RE AN;}TE <TY T,TY GRAPH> TE <TY U>auto VBFS<T,GRAPH>::GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>{VE AN(SZ(),-1);for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[m_G.Enumeration_inv(*IT)]= 0;}T t;WH((t = Next())!= m_not_found){auto&& i = m_G.Enumeration_inv(t);int& AN_i = AN[i];AN_i == -1?AN_i = AN[m_G.Enumeration_inv(m_prev[i])]+ 1:AN_i;}RE AN;}TE <TY T,TY GRAPH>tuple<VE<int>,VE<VE<T>>,int> VBFS<T,GRAPH>::GetConnectedComponent(){ST_AS(!is_same_v<GRAPH,MemorisationGraph<T,decldecay_t(m_G.edge())>>);CRI V = SZ();VE cc_num(V,-1);VE<VE<T>> cc_num_inv{};int count = 0;for(int i = 0;i < V;i++){if(cc_num[i]== -1){Shift(m_G.Enumeration(i));T t = Next();if(t != m_not_found){cc_num_inv.push_back({});WH(t != m_not_found){cc_num[m_G.Enumeration_inv(t)]= count;cc_num_inv[count].push_back(t);t = Next();}count++;}}}RE{MO(cc_num),MO(cc_num_inv),count};}TE <TY T,TY GRAPH>VE<T> VBFS<T,GRAPH>::GetNodeEnumeration(){VE<T> AN{};T t = Next();WH(t != m_not_found){AN.push_back(t);t = Next();}RE AN;}TE <TY T,TY GRAPH>VE<T> VBFS<T,GRAPH>::GetReversedNodeEnumeration(){VE<T> AN{};VE<T> next{};T t;bool searched;WH(!(searched =(t = Next())== m_not_found)|| !next.empty()){WH(!next.empty()&&(searched || next.back()!= m_prev[m_G.Enumeration_inv(t)])){AN.push_back(next.back());next.pop_back();}if(!searched){next.push_back(t);}}RE AN;}TE <TY T,TY GRAPH> TE <TY PATH> IN VO VBFS<T,GRAPH>::Push(LI<T>& next,CO PATH& p){Push(next,get<0>(p));}

TE <TY T,TY GRAPH>CL DFS:PU VirtualBreadthFirstSearch<T,GRAPH>{PU:TE <TY...Args> IN DFS(GRAPH& G,CO T& not_found,Args&&... args);IN VO Push(LI<T>& next,CO T& t);};
TE <TY T,TY GRAPH> TE <TY...Args> IN DFS<T,GRAPH>::DFS(GRAPH& G,CO T& not_found,Args&&... args):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found,forward<Args>(args)...){}TE <TY T,TY GRAPH> IN VO DFS<T,GRAPH>::Push(LI<T>& next,CO T& t){next.push_front(t);}

TE <TY TREE>CL DFST:PU DFS<int,TREE>,PU PointedSet<int>{PU:VE<int> m_node_num;VE<VE<int>> m_children;VE<int> m_children_num;bool m_set_children;VE<int> m_depth;bool m_set_depth;VE<int> m_height_max;VE<int> m_height_min;bool m_set_height;VE<int> m_heaviness;bool m_set_heaviness;IN DFST(TREE& T,CRI root = 0);IN VO Initialise()= delete;IN VO Initialise(CRI init)= delete;IN VO Shift(CRI init)= delete;IN CRI Root()CO;IN CRI Parent(CRI i);IN CO VE<int>& Children(CRI i);IN CRI Depth(CRI i);IN CRI Height(CRI i,CO bool& maximum = true);IN CRI Heaviness(CRI i);IN int Degree(CRI i);IN bool IsLeaf(CRI i,CRI root = -1);IN CRI NodeNumber(CRI i,CO bool& reversed = false)CO;IN CRI ChildrenNumber(CRI i);TE <TY Ord> IN VO ReorderChildren(Ord& ord);VO SetChildren();VO SetDepth();VO SetHeight();VO SetHeaviness();};
TE <TY TREE> IN DFST<TREE>::DFST(TREE& T,CRI root):DFS<int,TREE>(T,-1,root),PointedSet<int>(root),m_node_num(),m_children(),m_set_children(),m_depth(),m_set_depth(),m_height_max(),m_height_min(),m_set_height(),m_heaviness(),m_set_heaviness(){ST_AS(is_same_v<TREE,Graph<decldecay_t(declval<TREE>().edge())>>);AS(int((m_node_num = TH->GetNodeEnumeration()).SZ())== TH->SZ());}TE <TY TREE> IN CRI DFST<TREE>::Root()CO{RE TH->Point();}TE <TY TREE> IN CRI DFST<TREE>::Parent(CRI i){RE TH->prev(i);}TE <TY TREE> IN CO VE<int>& DFST<TREE>::Children(CRI i){if(!m_set_children){SetChildren();}RE m_children[i];}TE <TY TREE> IN CRI DFST<TREE>::Depth(CRI i){if(!m_set_depth){SetDepth();}RE m_depth[i];}TE <TY TREE> IN CRI DFST<TREE>::Height(CRI i,CO bool& maximum){if(!m_set_height){SetHeight();}RE(maximum?m_height_max:m_height_min)[i];}TE <TY TREE> IN CRI DFST<TREE>::Heaviness(CRI i){if(!m_set_heaviness){SetHeaviness();}RE m_heaviness[i];}TE <TY TREE> IN int DFST<TREE>::Degree(CRI i){RE Children(i).SZ()+(i == Root()?0:1);}TE <TY TREE> IN bool DFST<TREE>::IsLeaf(CRI i,CRI root){AS(-1 <= root && root < TH->SZ());RE Degree(i)== 1 && i !=(root == -1?Root():root);}TE <TY TREE> IN CRI DFST<TREE>::NodeNumber(CRI i,CO bool& reversed)CO{CRI V = TH->SZ();AS(i < V);RE m_node_num[reversed?V - 1 - i:i];}TE <TY TREE> IN CRI DFST<TREE>::ChildrenNumber(CRI i){if(! m_set_children){SetChildren();}RE m_children_num[i];}TE <TY TREE> TE <TY Ord> IN VO DFST<TREE>::ReorderChildren(Ord& ord){CRI V = TH->SZ();for(int i = 0;i < V;i++){sort(m_children[i].BE(),m_children[i].EN(),[&](CRI j,CRI k){RE ord(i,j,k);});CO int L = m_children[i].SZ();for(int j = 0;j < L;j++){m_children_num[m_children[i][j]]= j;}}}TE <TY TREE>VO DFST<TREE>::SetChildren(){AS(!m_set_children);m_set_children = true;CRI V = TH->SZ();m_children.resize(V);m_children_num.resize(V);for(int i = 0;i < V;i++){CRI j = Parent(i);if(j == -1){m_children_num[i]= -1;}else{m_children_num[i]= m_children[j].SZ();m_children[j].push_back(i);}}RE;}TE <TY TREE>VO DFST<TREE>::SetDepth(){AS(!m_set_depth);m_set_depth = true;CRI V = TH->SZ();m_depth.resize(V);for(int n = 1;n < V;n++){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_depth[i]+= m_depth[j]+ 1;}RE;}TE <TY TREE>VO DFST<TREE>::SetHeight(){AS(!m_set_height);m_set_height = true;CRI V = TH->SZ();m_height_max.resize(V);m_height_min.resize(V);for(int n = V - 1;n > 0;n--){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_height_max[j]= max(m_height_max[j],m_height_max[i]+ 1);m_height_min[j]= m_height_min[j]== 0?m_height_min[i]+ 1:min(m_height_min[j],m_height_min[i]+ 1);}RE;}TE <TY TREE>VO DFST<TREE>::SetHeaviness(){AS(!m_set_heaviness);m_set_heaviness = true;CRI V = TH->SZ();m_heaviness.resize(V);for(int n = V - 1;n > 0;n--){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_heaviness[j]+= m_heaviness[i]+ 1;}RE;}

TE <TY TREE,TY U,TY MONOID>CL DFSWT:PU DFST<TREE>{PU:MONOID m_M;VE<U> m_wprev;VE<U> m_wdepth_r;VE<U> m_wdepth_l;bool m_set_wdepth;VE<U> m_wheight_max_r;VE<U> m_wheight_max_l;VE<U> m_wheight_min_r;VE<U> m_wheight_min_l;bool m_set_wheight;VE<U> m_wheaviness;bool m_set_wheaviness;VE<VE<tuple<int,U,U>>> m_wdoubling;bool m_set_wdoubling;IN DFSWT(TREE& T,MONOID M,CRI root = 0,CRI digit = 0);IN MONOID& Monoid()NE;IN CO U& PrevWeight(CRI i)CO NE;IN CO U& WDepth(CRI i,CO bool& right = true);IN CO U& WHeight(CRI i,CO bool& maximum = true,CO bool& right = true);IN CO U& WHeaviness(CRI i);VO SetWDepth();VO SetWHeight();VO SetWHeaviness();VO SetWDoubling();};TE <TY TREE,TY MONOID,TY...Args> DFSWT(TREE& T,MONOID M,CO Args&... args)-> DFSWT<TREE,inner_t<MONOID>,MONOID>;
TE <TY TREE,TY U,TY MONOID> IN DFSWT<TREE,U,MONOID>::DFSWT(TREE& T,MONOID M,CRI root,CRI digit):DFST<TREE>(T,root,digit),m_M(MO(M)),m_wprev(TH->SZ(),m_M.One()),m_wdepth_r(),m_wdepth_l(),m_set_wdepth(),m_wheight_max_r(),m_wheight_max_l(),m_wheight_min_r(),m_wheight_min_l(),m_set_wheight(),m_wheaviness(),m_set_wheaviness(),m_wdoubling(TH->m_digit),m_set_wdoubling(){ST_AS(is_same_v<U,inner_t<MONOID>>);CRI V = TH->SZ();for(int i = 0;i < V;i++){auto&& edge_i = TH->m_G.Edge(i);for(auto& p:edge_i){CRI j = get<0>(p);if(i == TH->Parent(j)){m_wprev[j]= get<1>(p);}}}}TE <TY TREE,TY U,TY MONOID> IN MONOID& DFSWT<TREE,U,MONOID>::Monoid()NE{RE m_M;}TE <TY TREE,TY U,TY MONOID> IN CO U& DFSWT<TREE,U,MONOID>::PrevWeight(CRI i)CO NE{RE m_prev[i];}TE <TY TREE,TY U,TY MONOID> IN CO U& DFSWT<TREE,U,MONOID>::WDepth(CRI i,CO bool& right){AS(i < TH->SZ());if(!m_set_wdepth){SetWDepth();}RE(right?m_wdepth_r:m_wdepth_l)[i];}TE <TY TREE,TY U,TY MONOID> IN CO U& DFSWT<TREE,U,MONOID>::WHeight(CRI i,CO bool& maximum,CO bool& right){AS(i < TH->SZ());if(!m_set_wheight){SetWHeight();}RE(maximum?(right?m_wheight_max_r:m_wheight_max_l):(right?m_wheight_min_r:m_wheight_min_l))[i];}TE <TY TREE,TY U,TY MONOID> IN CO U& DFSWT<TREE,U,MONOID>::WHeaviness(CRI i){AS(i < TH->SZ());if(!m_set_wheaviness){SetWHeaviness();}RE m_wheaviness[i];}TE <TY TREE,TY U,TY MONOID>VO DFSWT<TREE,U,MONOID>::SetWDepth(){AS(!m_set_wdepth);m_set_wdepth = true;CRI V = TH->SZ();CO U& one = m_M.One();m_wdepth_r.resize(V,one);m_wdepth_l.resize(V,one);for(int n = 1;n < V;n++){CRI i = TH->m_node_num[n];CRI j = TH->Parent(i);AS(j != -1);m_wdepth_r[i]= m_M.Product(m_wdepth_r[j],m_wprev[i]);m_wdepth_l[i]= m_M.Product(m_wprev[i],m_wdepth_l[j]);}RE;}TE <TY TREE,TY U,TY MONOID>VO DFSWT<TREE,U,MONOID>::SetWHeight(){AS(!m_set_wheight);m_set_wheight = true;CRI V = TH->SZ();CO U& one = m_M.One();m_wheight_max_r.resize(V,one);m_wheight_max_l.resize(V,one);m_wheight_min_r.resize(V,one);m_wheight_min_l.resize(V,one);VE<bool> found(V);for(int n = V - 1;n > 0;n--){CRI i = TH->m_node_num[n];CRI j = TH->Parent(i);AS(j != -1);m_wheight_max_r[j]= max(m_wheight_max_r[j],m_M.Product(m_wheight_max_r[i],m_wprev[i]));m_wheight_max_l[j]= max(m_wheight_max_l[j],m_M.Product(m_wprev[i],m_wheight_max_l[i]));if(found[j]){m_wheight_min_r[j]= min(m_wheight_min_r[j],m_M.Product(m_wheight_min_r[i],m_wprev[i]));m_wheight_min_l[j]= min(m_wheight_min_l[j],m_M.Product(m_wprev[i],m_wheight_min_l[i]));}else{m_wheight_min_r[j]= m_M.Product(m_wheight_min_r[i],m_wprev[i]);m_wheight_min_l[j]= m_M.Product(m_wprev[i],m_wheight_min_l[i]);found[j]= true;}}RE;}TE <TY TREE,TY U,TY MONOID>VO DFSWT<TREE,U,MONOID>::SetWHeaviness(){AS(!m_set_wheaviness);m_set_wheaviness = true;CRI V = TH->SZ();m_wheaviness.resize(V,m_M.One());for(int n = V - 1;n > 0;n--){CRI i = TH->m_node_num[n];CRI j = TH->Parent(i);AS(j != -1);m_wheaviness[j]= m_M.Product(m_wheaviness[j],m_M.Product(m_wheaviness[i],m_wprev[i]));}RE;}
#endif


#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/BreadthFirstSearch/QuotientSet/a_Body.hpp"
#else
TE <TY T,TY GRAPH>CL QuotientSetSearch{PU:GRAPH& m_G;T m_not_found;VE<T> m_next;VE<bool> m_found;VE<T> m_repr;IN QuotientSetSearch(GRAPH& G,CO T& not_found);TE <TY Arg> IN QuotientSetSearch(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);IN VO Initialise(VE<T> inits);IN VO Shift(CO T& init);IN VO Shift(VE<T> inits);IN CRI SZ()CO NE;IN VE<bool>::reference found(CO T& t);IN CO T& repr(CO T& t);IN T Next();pair<CO VE<T>&,int> Get();};
TE <TY T,TY GRAPH> IN QuotientSetSearch<T,GRAPH>::QuotientSetSearch(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_next(),m_found(),m_repr(){Initialise();}TE <TY T,TY GRAPH> TE <TY Arg> IN QuotientSetSearch<T,GRAPH>::QuotientSetSearch(GRAPH& G,CO T& not_found,Arg&& init):QuotientSetSearch<T,GRAPH>(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO QuotientSetSearch<T,GRAPH>::Initialise(){ST_AS(is_same_v<inner_t<GRAPH>,T> && !is_same_v<GRAPH,MemorisationGraph<T,decldecay_t(m_G.edge())>>);CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_repr = VE<T>(V);for(int i = 0;i < V;i++){m_repr[i]= m_G.Enumeration(i);}}TE <TY T,TY GRAPH> IN VO QuotientSetSearch<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);}TE <TY T,TY GRAPH> IN VO QuotientSetSearch<T,GRAPH>::Initialise(VE<T> inits){Initialise();m_next = MO(inits);CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);}}TE <TY T,TY GRAPH> IN VO QuotientSetSearch<T,GRAPH>::Shift(CO T& init){m_next ={init};}TE <TY T,TY GRAPH> IN VO QuotientSetSearch<T,GRAPH>::Shift(VE<T> inits){m_next = MO(inits);}TE <TY T,TY GRAPH> IN CRI QuotientSetSearch<T,GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY T,TY GRAPH> IN VE<bool>::reference QuotientSetSearch<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& QuotientSetSearch<T,GRAPH>::repr(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());RE m_repr[i];}TE <TY T,TY GRAPH> IN T QuotientSetSearch<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO T t_curr = m_next.back();m_next.pop_back();auto&& i_curr = m_G.Enumeration_inv(t_curr);auto&& found_i_curr = m_found[i_curr];if(found_i_curr){RE Next();}found_i_curr = true;for(auto& t:m_G.Edge(t_curr)){auto&& i = m_G.Enumeration_inv(t);auto&& found_i = m_found[i];T& repr_i = m_repr[i];if(found_i){AS(repr_i == t_curr);}else{AS(repr_i == t);found_i = true;repr_i = t_curr;}}RE t_curr;}TE <TY T,TY GRAPH>pair<CO VE<T>&,int> QuotientSetSearch<T,GRAPH>::Get(){CRI V = SZ();int count = 0;m_next.clear();for(int i = 0;i < V;i++){if(!m_found[i]){count++;m_next.push_back(m_G.Enumeration(i));Next();}}RE{m_repr,MO(count)};}
#endif



#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/BreadthFirstSearch/BitExhausiveSearch/a_Body.hpp"
#else
#define VBFS VirtualBreadthFirstSearch

TE <TY T,TY GRAPH>CL VBFS{PU:GRAPH& m_G;T m_not_found;bool m_initialised;LI<T> m_next;VE<bool> m_found;VE<T> m_prev;IN VBFS(GRAPH& G,CO T& not_found);TE <TY Arg> IN VBFS(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);IN VO Initialise(LI<T> inits);IN VO Shift(CO T& init);IN VO Shift(LI<T> inits);IN CRI SZ()CO NE;IN VE<bool>::reference found(CO T& t);IN CO T& prev(CO T& t);IN T Next();TE <TY U = T> auto GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>;TE <TY U = T> auto GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>;tuple<VE<int>,VE<VE<T>>,int> GetConnectedComponent();VE<T> GetNodeEnumeration();VE<T> GetReversedNodeEnumeration();VI VO Push(LI<T>& next,CO T& t)= 0;TE <TY PATH> IN VO Push(LI<T>& next,CO PATH& p);};
TE <TY T,TY GRAPH> IN VBFS<T,GRAPH>::VBFS(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_initialised(false),m_next(),m_found(),m_prev(){ST_AS(is_same_v<inner_t<GRAPH>,T>);}TE <TY T,TY GRAPH> TE <TY Arg> IN VBFS<T,GRAPH>::VBFS(GRAPH& G,CO T& not_found,Arg&& init):VBFS<T,GRAPH>(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Initialise(){m_initialised = true;CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_prev = VE<T>(V,m_not_found);}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);m_found[i]= true;}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Initialise(LI<T> inits){Initialise();m_next = MO(inits);CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);m_found[i]= true;}}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Shift(CO T& init){if(m_initialised){CRI V = SZ();auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < V);m_next.clear();if(! m_found[i]){m_next.push_back(init);m_found[i]= true;}}else{Initialise(init);}}TE <TY T,TY GRAPH> IN VO VBFS<T,GRAPH>::Shift(LI<T> inits){if(m_initialised){m_next.clear();CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);if(! m_found[i]){m_next.push_back(u);m_found[i]= true;}}}else{Initialise(MO(inits));}}TE <TY T,TY GRAPH> IN CRI VBFS<T,GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY T,TY GRAPH> IN VE<bool>::reference VBFS<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& VBFS<T,GRAPH>::prev(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY T,TY GRAPH> IN T VBFS<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO T t_curr = m_next.front();m_next.pop_front();for(auto& t:m_G.Edge(t_curr)){auto&& i = m_G.Enumeration_inv(t);auto&& found_i = m_found[i];if(! found_i){Push(m_next,t);m_prev[i]= t_curr;found_i = true;}}RE t_curr;}TE <TY T,TY GRAPH> TE <TY U>auto VBFS<T,GRAPH>::GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>{Map<T,int> AN{};for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[*IT]= 0;}T t;WH((t = Next())!= m_not_found){if(AN.count(t)== 0){AN[t]= AN[m_prev[m_G.Enumeration_inv(t)]]+ 1;}}RE AN;}TE <TY T,TY GRAPH> TE <TY U>auto VBFS<T,GRAPH>::GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>{VE AN(SZ(),-1);for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[m_G.Enumeration_inv(*IT)]= 0;}T t;WH((t = Next())!= m_not_found){auto&& i = m_G.Enumeration_inv(t);int& AN_i = AN[i];AN_i == -1?AN_i = AN[m_G.Enumeration_inv(m_prev[i])]+ 1:AN_i;}RE AN;}TE <TY T,TY GRAPH>tuple<VE<int>,VE<VE<T>>,int> VBFS<T,GRAPH>::GetConnectedComponent(){ST_AS(!is_same_v<GRAPH,MemorisationGraph<T,decldecay_t(m_G.edge())>>);CRI V = SZ();VE cc_num(V,-1);VE<VE<T>> cc_num_inv{};int count = 0;for(int i = 0;i < V;i++){if(cc_num[i]== -1){Shift(m_G.Enumeration(i));T t = Next();if(t != m_not_found){cc_num_inv.push_back({});WH(t != m_not_found){cc_num[m_G.Enumeration_inv(t)]= count;cc_num_inv[count].push_back(t);t = Next();}count++;}}}RE{MO(cc_num),MO(cc_num_inv),count};}TE <TY T,TY GRAPH>VE<T> VBFS<T,GRAPH>::GetNodeEnumeration(){VE<T> AN{};T t = Next();WH(t != m_not_found){AN.push_back(t);t = Next();}RE AN;}TE <TY T,TY GRAPH>VE<T> VBFS<T,GRAPH>::GetReversedNodeEnumeration(){VE<T> AN{};VE<T> next{};T t;bool searched;WH(!(searched =(t = Next())== m_not_found)|| !next.empty()){WH(!next.empty()&&(searched || next.back()!= m_prev[m_G.Enumeration_inv(t)])){AN.push_back(next.back());next.pop_back();}if(!searched){next.push_back(t);}}RE AN;}TE <TY T,TY GRAPH> TE <TY PATH> IN VO VBFS<T,GRAPH>::Push(LI<T>& next,CO PATH& p){Push(next,get<0>(p));}

#define BFS BreadthFirstSearch

TE <TY T,TY GRAPH>CL BFS:PU VBFS<T,GRAPH>{PU:TE <TY...Args> IN BFS(GRAPH& G,CO T& not_found,Args&&... args);IN VO Push(LI<T>& next,CO T& t);};
TE <TY T,TY GRAPH> TE <TY...Args> IN BFS<T,GRAPH>::BFS(GRAPH& G,CO T& not_found,Args&&... args):VBFS<T,GRAPH>(G,not_found,forward<Args>(args)...){}TE <TY T,TY GRAPH> IN VO BFS<T,GRAPH>::Push(LI<T>& next,CO T& t){next.push_back(t);}

#define DF_OF_ADJACENT_SET(T_COPY,OPR,ULIM,UPDATE)VE<int> AN{};int t_copy = T_COPY;int t_next;int d;WH(t_copy != 0 &&(t_next =(t OPR(d =(t_copy & -t_copy))))< ULIM){t_copy -= d;UPDATE;}RE AN
#define DF_OF_PROPER_SET(INCREMENT,OPR,ULIM,UPDATE)VE<int> AN{};int t_next = t;WH(((INCREMENT t_next)OPR t)< ULIM){UPDATE;}RE AN
CL BitExhausiveEdge{PU:CO int* m_p_V;IN VE<int> OP()(CRI t);};CL BitExhausiveSearch:PU BFS<int,Graph<BitExhausiveEdge>>{PU:Graph<BitExhausiveEdge> m_G;CO int* m_p_V;int m_digit;IN BitExhausiveSearch(CRI V);IN VE<int> to_vec(CRI t);IN int to_int(CO VE<int>& a);IN VE<int> UnreachedAdjacentSupsetOf(CRI t);IN VE<int> UnreachedAdjacentSubsetOf(CRI t);IN VE<int> UnreachedProperSupsetOf(CRI t);IN VE<int> UnreachedProperSubsetOf(CRI t);IN VE<int> AdjacentSupsetOf(CRI t);IN VE<int> ProperSupsetOf(CRI t);ST IN VE<int> AdjacentSubsetOf(CRI t);ST IN VE<int> ProperSubsetOf(CRI t);IN bool NextSubset(int& t);IN bool NextSubset(VE<int>& S);ST IN int DigitOf(CRI t);ST IN CRI ValuationOf(CRI t);};
IN VE<int> BitExhausiveEdge::OP()(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_ADJACENT_SET(~t,|,*m_p_V,AN.push_back(t_next););}IN BitExhausiveSearch::BitExhausiveSearch(CRI V):BFS<int,Graph<BitExhausiveEdge>>(m_G,-1),m_G(V,BitExhausiveEdge()),m_p_V(&(m_G.SZ())),m_digit(DigitOf(V)){m_G.edge().m_p_V = m_p_V;}IN VE<int> BitExhausiveSearch::to_vec(CRI t){AS(0 <= t && t < *m_p_V);VE<int> AN(m_digit);for(int d = 0;d < m_digit;d++){AN[d]=((t >> d)& 1);}RE AN;}IN int BitExhausiveSearch::to_int(CO VE<int>& a){int AN = 0;CO int SZ = a.SZ();AS(SZ <= m_digit);for(int d = 0;d < SZ;d++){AN |=(a[d]<< d);}RE AN;}IN VE<int> BitExhausiveSearch::UnreachedAdjacentSupsetOf(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_ADJACENT_SET(~t,|,*m_p_V,if(! TH->found(t_next)){TH->found(t_next)= true;AN.push_back(t_next);});}IN VE<int> BitExhausiveSearch::UnreachedProperSupsetOf(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_PROPER_SET(++,|=,*m_p_V,if(! TH->found(t_next)){TH->found(t_next)= true;AN.push_back(t_next);});}IN VE<int> BitExhausiveSearch::UnreachedAdjacentSubsetOf(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_ADJACENT_SET(t,^,t,if(! TH->found(t_next)){TH->found(t_next)= true;AN.push_back(t_next);});}IN VE<int> BitExhausiveSearch::UnreachedProperSubsetOf(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_PROPER_SET(--,&=,t,if(! TH->found(t_next)){TH->found(t_next)= true;AN.push_back(t_next);});}IN VE<int> BitExhausiveSearch::AdjacentSupsetOf(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_ADJACENT_SET(~t,|,*m_p_V,AN.push_back(t_next));}IN VE<int> BitExhausiveSearch::ProperSupsetOf(CRI t){AS(0 <= t && t < *m_p_V);DF_OF_PROPER_SET(++,|=,*m_p_V,AN.push_back(t_next););}IN VE<int> BitExhausiveSearch::AdjacentSubsetOf(CRI t){AS(0 <= t);DF_OF_ADJACENT_SET(t,^,t,AN.push_back(t_next));}IN VE<int> BitExhausiveSearch::ProperSubsetOf(CRI t){AS(0 <= t);DF_OF_PROPER_SET(--,&=,t,AN.push_back(t_next););}IN bool BitExhausiveSearch::NextSubset(int& t){auto S = to_vec(t);RE prev_permutation(S.BE(),S.EN())?(t = to_int(S))< *m_p_V:false;}IN bool BitExhausiveSearch::NextSubset(VE<int>& S){RE prev_permutation(S.BE(),S.EN())?to_int(S)< *m_p_V:false;}IN int BitExhausiveSearch::DigitOf(CRI t){AS(0 <= t);int l = 0,r = 31;WH(l + 1 < r){int m =(l + r)>> 1;(t >> m > 0?r:l)= m;}RE l;}IN CRI BitExhausiveSearch::ValuationOf(CRI t){ST unordered_map<int,int> g_v;ST int LE = 0;WH(g_v.count(t)== 0){AS(t >> LE > 0);g_v[1 << LE]= LE;LE++;}RE g_v[t];}
#endif

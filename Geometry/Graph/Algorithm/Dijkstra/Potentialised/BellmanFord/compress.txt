#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/Dijkstra/Potentialised/BellmanFord/a_Body.hpp"
#else
#define DIJKSTRA_PREP(INITIALISE_PREV)CO U& one = m_M.One();AS(one < infty);auto&& i_start = m_G.Enumeration_inv(t_start);AS(0 <= i_start && i_start < SZ);INITIALISE_PREV;
#define DIJKSTRA_BODY_1(SET_PREV)if(path_LE == -1){path_LE = SZ;}weight[i_start]= one;int i = i_start;for(int num = 0;num < path_LE;num++){if(fixed[i]){break;}fixed[i]= true;CO U& weight_i = weight[i];auto&& edge_i = m_G.Edge(m_G.Enumeration(i));for(auto&& edge_ij:edge_i){auto&& j = m_G.Enumeration_inv(get<0>(edge_ij));if(!fixed[j]){CO U& w_ij = get<1>(edge_ij);U temp = m_M.Product(weight_i,w_ij);AS(temp < infty);U& weight_j = weight[j];if(temp < weight_j){SET_PREV;weight_j = MO(temp);}}}U temp = infty;for(int j = 0;j < SZ;j++){if(!fixed[j]){U& weight_j = weight[j];if(weight_j < temp){temp = weight_j;i = j;}}}}
#define DIJKSTRA_BODY_2(CHECK_FINAL,SET_PREV)AS(path_LE == -1);set<pair<U,int>> vertex{};vertex.insert(pair<U,int>(weight[i_start]= one,i_start));WH(! vertex.empty()){auto BE = vertex.BE();auto[weight_i,i]= *BE;CHECK_FINAL;fixed[i]= true;vertex.erase(BE);auto&& edge_i = m_G.Edge(m_G.Enumeration(i));VE<pair<U,int>> changed_vertex{};for(auto&& edge_ij:edge_i){auto&& j = m_G.Enumeration_inv(get<0>(edge_ij));if(!fixed[j]){CO U& w_ij = get<1>(edge_ij);U temp = m_M.Product(weight_i,w_ij);AS(temp < infty);U& weight_j = weight[j];if(temp < weight_j){if(weight_j != infty){vertex.erase(pair<U,int>(weight_j,j));}SET_PREV;changed_vertex.push_back(pair<U,int>(weight_j = MO(temp),j));}}}for(auto& v:changed_vertex){vertex.insert(v);}}
#define DIJKSTRA_BODY(INITIALISE_PREV,CHECK_FINAL,SET_PREV)DIJKSTRA_PREP(INITIALISE_PREV);if(many_edges){DIJKSTRA_BODY_1(SET_PREV);}else{DIJKSTRA_BODY_2(CHECK_FINAL,SET_PREV);}
TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>CL AbstractDijkstra:PU PointedSet<U>{PU:GRAPH& m_G;COMM_MONOID m_M;IN AbstractDijkstra(GRAPH& G,COMM_MONOID M,CO U& infty);U GetDistance(CO T& t_start,CO T& t_final,CO bool& many_edges = false,int path_le = -1);VE<U> GetDistance(CO T& t_start,CO bool& many_edges = false,int path_le = -1);VO SetDistance(VE<U>& weight,VE<bool>& fixed,CO T& t_start,CO bool& many_edges = false,int path_le = -1);pair<U,LI<T>> GetPath(CO T& t_start,CO T& t_final,CO bool& many_edges = false,int path_le = -1);TE <TE <TY...> TY V> pair<VE<U>,VE<LI<T>>> GetPath(CO T& t_start,CO V<T>& t_finals,CO bool& many_edges = false,int path_le = -1);pair<VE<U>,VE<LI<T>>> GetPath(CO T& t_start,CO bool& many_edges = false,int path_le = -1);};TE <TY GRAPH,TY U,TY COMM_MONOID> AbstractDijkstra(GRAPH& G,COMM_MONOID M,CO U& infty)-> AbstractDijkstra<inner_t<GRAPH>,GRAPH,U,COMM_MONOID>;TE <TY T,TY GRAPH>CL Dijkstra:PU AbstractDijkstra<T,GRAPH,ll,AdditiveMonoid<>>{PU:IN Dijkstra(GRAPH& G,CRL infty = 1e18);};TE <TY GRAPH,TY...ARGS> Dijkstra(GRAPH& G,CO ARGS&... args)-> Dijkstra<inner_t<GRAPH>,GRAPH>;
TE <TY T,TY GRAPH,TY U,TY COMM_MONOID> IN AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::AbstractDijkstra(GRAPH& G,COMM_MONOID M,CO U& infty):PointedSet<U>(infty),m_G(G),m_M(MO(M)){ST_AS(is_same_v<T,inner_t<GRAPH>>);}TE <TY T,TY GRAPH> IN Dijkstra<T,GRAPH>::Dijkstra(GRAPH& G,CRL infty):AbstractDijkstra<T,GRAPH,ll,AdditiveMonoid<>>(G,AdditiveMonoid<>(),infty){}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>U AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetDistance(CO T& t_start,CO T& t_final,CO bool& many_edges,int path_le){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);auto&& i_final = m_G.Enumeration_inv(t_final);DIJKSTRA_BODY(,if(i == i_final){break;},);U AN{MO(weight[i_final])};RE AN;}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>VE<U> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetDistance(CO T& t_start,CO bool& many_edges,int path_le){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);DIJKSTRA_BODY(,,);RE weight;}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>VO AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::SetDistance(VE<U>& weight,VE<bool>& fixed,CO T& t_start,CO bool& many_edges,int path_le){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();AS(int(weight.SZ())== SZ);AS(int(fixed.SZ())== SZ);DIJKSTRA_BODY(,,);RE;}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>pair<U,LI<T>> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetPath(CO T& t_start,CO T& t_final,CO bool& many_edges,int path_le){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);auto&& i_final = m_G.Enumeration_inv(t_final);DIJKSTRA_BODY(VE<int> prev(SZ),if(i == i_final){break;},prev[j]= i);int i = i_final;LI<T> path{};path.push_back(t_final);if(weight[i]!= infty){WH(i != i_start){i = prev[i];path.push_front(m_G.Enumeration(i));}}U AN{MO(weight[i_final])};RE{MO(AN),MO(path)};}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID> TE <TE <TY...> TY V>pair<VE<U>,VE<LI<T>>> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetPath(CO T& t_start,CO V<T>& t_finals,CO bool& many_edges,int path_le){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);DIJKSTRA_BODY(VE<int> prev(SZ),,prev[j]= i);CO int path_SZ = t_finals.SZ();VE<LI<T>> path;path.reserve(path_SZ);for(auto IT = t_finals.BE(),EN = t_finals.EN();IT != EN;IT++){LI<T> path_j{};CO T& t_final = *IT;path_j.push_back(t_final);int i = m_G.Enumeration_inv(t_final);if(weight[i]!= infty){WH(i != i_start){i = prev[i];path_j.push_front(m_G.Enumeration(i));}}path.push_back(path_j);}RE{MO(weight),MO(path)};}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>pair<VE<U>,VE<LI<T>>> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetPath(CO T& t_start,CO bool& many_edges,int path_le){CRI SZ = m_G.SZ();VE<T> t_finals(SZ);for(int i = 0;i < SZ;i++){t_finals[i]= i;}RE GetPath(t_start,t_finals,many_edges,path_le);}

#define POTENTIALISED_DIJKSTRA_BODY(GET,WEIGHT)CO U& infty = TH->Infty();CO U& zero = m_M.Zero();auto edge =[&](CO T& t){CO U& potential_i = m_potential[m_G.Enumeration_inv(t)];AS(potential_i < infty);auto edge_i = m_G.Edge(t);VE<pair<T,U>> AN{};for(auto& e:edge_i){if(m_on(e)){CO auto& v_j = get<0>(e);U& w_j = get<1>(e);CO U& potential_j = m_potential[m_G.Enumeration_inv(v_j)];AS(w_j < infty && potential_j < infty);CO U potential_j_inv = m_M.Inverse(potential_j);w_j = m_M.Sum(m_M.Sum(w_j,potential_i),potential_j_inv);AS(!(w_j < zero)&& w_j < infty);AN.push_back({v_j,MO(w_j)});}}RE AN;};auto G = m_G.GetGraph(MO(edge));AbstractDijkstra d{G,m_M,infty};auto value = d.GET;CRI SZ = m_G.SZ();for(int i = 0;i < SZ;i++){auto& weight_i = WEIGHT[i];if(weight_i != infty){weight_i = m_M.Sum(weight_i,m_potential[i]);}}RE value;
TE <TY T,TY GRAPH,TY U,TY GROUP,TY On>CL AbstractPotentialisedDijkstra:PU PointedSet<U>{PU:GRAPH& m_G;GROUP m_M;T m_t_start;On m_on;VE<U> m_potential;IN AbstractPotentialisedDijkstra(GRAPH& G,GROUP M,CO T& t_start,CO U& infty,On on,VE<U> potential ={});IN CO VE<U>& Potential()CO NE;IN VO SetPotential(VE<U> potential);TE <TY...Args> VE<U> GetDistance(Args&&... args);TE <TY...Args> pair<VE<U>,VE<LI<T>>> GetPath(Args&&... args);};TE <TY T,TY GRAPH,TY On>CL PotentialisedDijkstra:PU AbstractPotentialisedDijkstra<T,GRAPH,ll,AdditiveGroup<>,On>{PU:TE <TY...Args> IN PotentialisedDijkstra(GRAPH& G,CO T& t_start,On on,Args&&... args);};
TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> IN AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::AbstractPotentialisedDijkstra(GRAPH& G,GROUP M,CO T& t_start,CO U& infty,On on,VE<U> potential):PointedSet<U>(infty),m_G(G),m_M(MO(M)),m_t_start(t_start),m_on(MO(on)),m_potential(potential){ST_AS(is_invocable_r_v<bool,On,decltype(declval<GRAPH>().Edge(declval<T>()).back())>);if(m_potential.empty()){m_potential = VE<U>(m_G.SZ(),m_M.Zero());}else{AS(int(m_potential.SZ())== m_G.SZ());}}TE <TY T,TY GRAPH,TY On> TE <TY...Args> IN PotentialisedDijkstra<T,GRAPH,On>::PotentialisedDijkstra(GRAPH& G,CO T& t_start,On on,Args&&... args):AbstractPotentialisedDijkstra<T,GRAPH,ll,AdditiveGroup<>,On>(G,AdditiveGroup<>(),t_start,1e18,MO(on),forward<decay_t<Args>>(args)...){}TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> IN CO VE<U>& AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::Potential()CO NE{RE m_potential;}TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> IN VO AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::SetPotential(VE<U> potential){AS(int(potential.SZ())== m_G.SZ());m_potential = MO(potential);}TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> TE <TY...Args> VE<U> AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::GetDistance(Args&&... args){POTENTIALISED_DIJKSTRA_BODY(GetDistance(m_t_start,forward<Args>(args)...),value);}TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> TE <TY...Args> pair<VE<U>,VE<LI<T>>> AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::GetPath(Args&&... args){POTENTIALISED_DIJKSTRA_BODY(GetPath(m_t_start,forward<Args>(args)...),get<0>(value));}

#define BELLMAN_FORD_BODY(INITIALISE_PREV,SET_PREV)CO U& one = m_M.One();CO U& infty = TH->Infty();AS(one < infty);CRI SZ = m_G.SZ();auto&& i_start = m_G.Enumeration_inv(t_start);AS(0 <= i_start && i_start < SZ);VE<U> weight(SZ,infty),weight_copy;weight[i_start]= one;VE<bool> found(SZ);found[i_start]= true;INITIALISE_PREV;if(path_LE == -1){path_LE = min(SZ - 1,int(m_edge.SZ()));}else{AS(many_edges);}for(int num = 0;num < path_LE;num++){for(auto&[i,j,w]:m_edge){if(found[i]){U temp = m_M.Product(weight[i],w);U& weight_j = weight[j];if(temp < weight_j){weight_j = MO(temp);found[j]= true;SET_PREV;}}}}VE<bool> valid(SZ,true);for(auto&[i,j,w]:m_edge){valid[i]= valid[i]&&(!found[i]|| !(m_M.Product(weight[i],w)< weight[j]));}VE<int> dfs{};for(int i = 0;i < SZ;i++){if(!valid[i]){dfs.push_back(i);}}WH(!dfs.empty()){CO int i = dfs.back();dfs.pop_back();auto&& edge_i = m_G.Edge(m_G.Enumeration(i));for(auto& edge_ij:edge_i){auto&& j = m_G.Enumeration_inv(edge_ij);if(valid[j]){valid[j]= false;dfs.push_back(j);}}}
TE <TY T,TY GRAPH,TY U,TY MONOID>CL AbstractBellmanFord:PU PointedSet<U>{PU:GRAPH& m_G;MONOID m_M;VE<tuple<int,int,U>> m_edge;AbstractBellmanFord(GRAPH& G,MONOID M,CO U& infty);tuple<VE<bool>,VE<U>> GetDistance(CO T& t_start,CO bool& many_edges = false,int path_LE = -1);TE <TE <TY...> TY V> tuple<VE<bool>,VE<U>,VE<LI<T>>> GetPath(CO T& t_start,CO V<T>& t_finals,CO bool& many_edges = false,int path_LE = -1);tuple<VE<bool>,VE<U>,VE<LI<T>>> GetPath(CO T& t_start,CO bool& many_edges = false,int path_LE = -1);};TE <TY GRAPH,TY U,TY MONOID> AbstractBellmanFord(GRAPH& G,MONOID M,CO U& infty)-> AbstractBellmanFord<inner_t<GRAPH>,GRAPH,U,MONOID>;TE <TY T,TY GRAPH>CL BellmanFord:PU AbstractBellmanFord<T,GRAPH,ll,AdditiveMonoid<>>{PU:IN BellmanFord(GRAPH& G);};TE <TY GRAPH> BellmanFord(GRAPH& G)-> BellmanFord<inner_t<GRAPH>,GRAPH>;
TE <TY T,TY GRAPH,TY U,TY MONOID>AbstractBellmanFord<T,GRAPH,U,MONOID>::AbstractBellmanFord(GRAPH& G,MONOID M,CO U& infty):PointedSet<U>(infty),m_G(G),m_M(MO(M)),m_edge(){ST_AS(is_same_v<T,inner_t<GRAPH>> && is_same_v<U,inner_t<MONOID>> && !is_same_v<U,int>);CRI SZ = m_G.SZ();for(int i = 0;i < SZ;i++){auto&& edge_i = m_G.Edge(m_G.Enumeration(i));for(auto& edge_ij:edge_i){m_edge.push_back({i,m_G.Enumeration_inv(get<0>(edge_ij)),get<1>(edge_ij)});}}}TE <TY T,TY GRAPH> IN BellmanFord<T,GRAPH>::BellmanFord(GRAPH& G):AbstractBellmanFord<T,GRAPH,ll,AdditiveMonoid<>>(G,AdditiveMonoid<>(),1e18){}TE <TY T,TY GRAPH,TY U,TY MONOID>tuple<VE<bool>,VE<U>> AbstractBellmanFord<T,GRAPH,U,MONOID>::GetDistance(CO T& t_start,CO bool& many_edges,int path_LE){BELLMAN_FORD_BODY(,);RE{MO(valid),MO(weight)};}TE <TY T,TY GRAPH,TY U,TY MONOID> TE <TE <TY...> TY V>tuple<VE<bool>,VE<U>,VE<LI<T>>> AbstractBellmanFord<T,GRAPH,U,MONOID>::GetPath(CO T& t_start,CO V<T>& t_finals,CO bool& many_edges,int path_LE){BELLMAN_FORD_BODY(VE<int> prev(SZ),prev[j]= i);VE<LI<T>> path{};CO int path_SZ = t_finals.SZ();path.reserve(path_SZ);for(auto& t_final:t_finals){LI<T> path_j{};path_j.push_back(t_final);int i = m_G.Enumeration_inv(t_final);if(found[i]&& valid[i]){WH(i != i_start){i = prev[i];path_j.push_front(m_G.Enumeration(i));}}path.push_back(path_j);}RE{MO(valid),MO(weight),MO(path)};}TE <TY T,TY GRAPH,TY U,TY MONOID>tuple<VE<bool>,VE<U>,VE<LI<T>>> AbstractBellmanFord<T,GRAPH,U,MONOID>::GetPath(CO T& t_start,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();VE<T> t_finals(SZ);for(int i = 0;i < SZ;i++){t_finals[i]= i;}RE GetPath(t_start,t_finals);}

TE <TY T,TY GRAPH,TY U,TY GROUP,TY On>CL AbstractBellmanFordPotentialisedDijkstra:PU AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>{PU:IN AbstractBellmanFordPotentialisedDijkstra(GRAPH& G,GROUP M,CO T& t_start,CO U& infty,On on);IN AbstractBellmanFordPotentialisedDijkstra(GRAPH& G,GROUP M,CO T& t_start,CO U& infty,On on,VE<U> potential);IN AbstractBellmanFordPotentialisedDijkstra(GRAPH& G,GROUP& M,CO T& t_start,CO U& infty,On& on,tuple<VE<bool>,VE<U>> potential);};TE <TY T,TY GRAPH,TY On>CL BellmanFordPotentialisedDijkstra:PU AbstractBellmanFordPotentialisedDijkstra<T,GRAPH,ll,AdditiveGroup<>,On>{PU:TE <TY...Args> IN BellmanFordPotentialisedDijkstra(GRAPH& G,CO T& t_start,On on,Args&&... args);};
TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> IN AbstractBellmanFordPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::AbstractBellmanFordPotentialisedDijkstra(GRAPH& G,GROUP M,CO T& t_start,CO U& infty,On on):AbstractBellmanFordPotentialisedDijkstra(G,M,t_start,infty,on,AbstractBellmanFord(G,M,infty).GetDistance(t_start)){}TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> IN AbstractBellmanFordPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::AbstractBellmanFordPotentialisedDijkstra(GRAPH& G,GROUP& M,CO T& t_start,CO U& infty,On& on,tuple<VE<bool>,VE<U>> vp):AbstractBellmanFordPotentialisedDijkstra(G,MO(M),t_start,infty,MO(on),MO(get<1>(vp))){for(auto valid:get<0>(vp)){AS(valid);}}TE <TY T,TY GRAPH,TY U,TY GROUP,TY On> IN AbstractBellmanFordPotentialisedDijkstra<T,GRAPH,U,GROUP,On>::AbstractBellmanFordPotentialisedDijkstra(GRAPH& G,GROUP M,CO T& t_start,CO U& infty,On on,VE<U> potential):AbstractPotentialisedDijkstra<T,GRAPH,U,GROUP,On>(G,MO(M),t_start,infty,MO(on),MO(potential)){}TE <TY T,TY GRAPH,TY On> TE <TY...Args> IN BellmanFordPotentialisedDijkstra<T,GRAPH,On>::BellmanFordPotentialisedDijkstra(GRAPH& G,CO T& t_start,On on,Args&&... args):AbstractBellmanFordPotentialisedDijkstra<T,GRAPH,ll,AdditiveGroup<>,On>(G,AdditiveGroup<>(),t_start,1e18,MO(on),forward<decay_t<Args>>(args)...){}
#endif

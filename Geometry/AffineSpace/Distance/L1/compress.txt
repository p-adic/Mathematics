#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/AffineSpace/Distance/L1/a_Body.hpp"
#else
TE <TY INT> IN int sign(CO INT& n,CO INT& epsilon = 0){CE bool is_not_double = !is_same_v<INT,double>;AS(is_not_double || epsilon > 0);RE n < -epsilon?-1:epsilon < n?1:0;}

TE <TY INT> IN INT L1(CO INT& x,CO INT& y){RE abs(x)+ abs(y);}TE <TY INT> IN INT L1(CO pair<INT,INT>& v){RE L1(v.first,v.second);}TE <TY INT> IN INT L1_Distance(CO INT& x0,CO INT& y0,CO INT& x1,CO INT& y1){RE L1(x0 - x1,y0 - y1);}TE <TY INT> IN INT L1_Distance(CO pair<INT,INT>& v0,CO pair<INT,INT>& v1){RE L1(v0.first - v1.first,v0.second - v1.second);}TE <TY INT> IN pair<INT,INT> L1_to_Linfty(CO INT& x,CO INT& y){RE{x + y,x - y};}TE <TY INT> IN pair<INT,INT> L1_to_Linfty(CO pair<INT,INT>& v){RE L1_to_Linfty(v.first,v.second);}TE <TY INT> IN pair<INT,INT> Linfty_to_L1(CO INT& x,CO INT& y){AS((x & 1)==(y & 1));RE{(x + y)>> 1,(x - y)>> 1};}TE <TY INT> IN pair<INT,INT> Linfty_to_L1(CO pair<INT,INT>& v){RE Linfty_to_L1(v.first,v.second);}TE <TY INT> IN bool L1_LongestEdge(CO INT& x0,CO INT& y0,CO INT& x1,CO INT& y1,CO INT& z,CO INT& w,CO INT& epsilon = 0){RE sign(L1_Distance(x0,y0,x1,y1)- max(L1_Distance(x0,y0,z,w),L1_Distance(z,w,x1,y1)),epsilon)>= 0;}TE <TY INT> IN bool L1_LongestEdge(CO pair<INT,INT>& v0,CO pair<INT,INT>& v1,CO pair<INT,INT>& v2,CO INT& epsilon = 0){RE L1_LongestEdge(v0.first,v0.second,v1.first,v1.second,v2.first,v2.second,epsilon);}
#endif

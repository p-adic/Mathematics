#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Combinatorial/Permutation/Debug/a_Body.hpp"
#else
IN int LCM(){RE 0;}TE <TY INT1,TY...INT2>INT1 LCM(INT1 b_0,INT2... args){b_0 < 0?b_0 = -b_0:b_0;INT1 b_1 = LCM(MO(args)...);RE b_1 == 0?b_0:b_0 / GCD(b_0,b_1)* b_1;}TE <TY INT,TE <TY...> TY V>INT LCM(V<INT> a){INT AN = 1;for(auto& b:a){AN = LCM(MO(AN),b);}RE AN;}

TE <TY INT,int SZ_max> IN bool NextPermutation(INT(&P)[SZ_max],CRI SZ){RE next_permutation(P,P + SZ);}TE <TY INT> IN bool NextPermutation(VE<INT>& P){RE next_permutation(P.BE(),P.EN());}TE <TY INT,int SZ_max> IN bool PreviousPermutation(INT(&P)[SZ_max],CRI SZ){RE prev_permutation(P,P + SZ);}TE <TY INT> IN bool PreviousPermutation(VE<INT>& P){RE prev_permutation(P.BE(),P.EN());}TE <TY INT>VE<VE<INT>> CyclicPermutationRepresentation(CO VE<INT>& P,CO bool& zero_indexed = true){if(!zero_indexed){auto Q = P;for(auto& i:Q){i--;}auto AN = CyclicPermutationRepresentation(Q);for(auto& C:AN){for(auto& i:C){i++;}}RE AN;}CO int SZ = P.SZ();VE<VE<INT>> AN{};VE<bool> found(SZ);for(int i = 0;i < SZ;i++){if(found[i]){continue;}VE<INT> temp ={i};found[i]= true;int j = P[i];WH(j != i){found[j]= true;temp.push_back(j);j = P[j];}if(temp.SZ()> 1){AN.push_back(MO(temp));}}RE AN;}TE <TY INT>VE<pair<INT,INT>> MinimalTranspositionRepresentation(CO VE<INT>& P,CO bool& zero_indexed = true){auto crp = CyclicPermutationRepresentation(P,zero_indexed);VE<pair<INT,INT>> AN{};for(auto& C:crp){CO int SZ = C.SZ();for(int i = SZ - 1;i > 0;i--){AN.push_back({C[0],C[i]});}}RE AN;}TE <TY INT>VE<pair<INT,INT>> MinimalAdjacentTranspositionRepresentation(VE<INT> P,CO bool& zero_indexed = true){CO int SZ = P.SZ();CO INT d = zero_indexed?0:1;VE<pair<INT,INT>> AN{};for(int i = 0;i < SZ;i++){for(int j = i - 1;j >= 0;j--){if(P[j]< P[j+1]){break;}swap(P[j],P[j+1]);AN.push_back({d+j,d+j+1});}}RE AN;}TE <TY INT>ll PermutationOrder(CO VE<INT>& P,CO bool& zero_indexed = true){auto crp = CyclicPermutationRepresentation(P,zero_indexed);CO int SZ = crp.SZ();VE<ll> order(SZ);for(int i = 0;i < SZ;i++){order[i]= crp[i].SZ();}RE LCM(order);}TE <TY INT>INT LeastSwapCount(CO VE<INT>& P,CO bool& zero_indexed = true){auto crp = CyclicPermutationRepresentation(P,zero_indexed);INT AN = 0;for(auto& C:crp){AN += C.SZ()- 1;}RE AN;}
#endif


#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Combinatorial/FloorSum/a_Body.hpp"
#else
// ../../Poynomial/Truncate/compress.txtÇêÊÇ…ì\ÇÈÅB

// ó›êœòa
TE <TY T,int LE>CL BernulliNumberCalculator{PU:T m_val[LE];IN BernulliNumberCalculator(CO bool& negative = true);IN CO T& OP[](CRI i)CO;};
TE <TY T,int LE> IN BernulliNumberCalculator<T,LE>::BernulliNumberCalculator(CO bool& negative):m_val(){TRPO<T> f{LE};for(int i = 0;i < LE;i++){f[i] = T::FactorialInverse(i + 1);}f = Inverse(f);for(int i = 0;i < LE;i++){m_val[i] = MO(f[i] *= T::Factorial(i));}if(!negative && LE > 1){m_val[1] *= -1;}}TE <TY T,int LE> IN CO T& BernulliNumberCalculator<T,LE>::OP[](CRI i)CO{assert(i < LE);RE m_val[i];}

TE <TY T,uint deg_max>PO<T> MonomialSum(CRUI D){AS(D <= deg_max);ST CO BernulliNumberCalculator<T,deg_max+1> B{false};PO<T> AN{};for(uint d = 0;d <= D + 1;d++){AN[d]= T::Combination(D + 1,d)* B[D + 1 - d];}AN /= T{D + 1};RE AN;}

TE <TY INT> CE INT Log(INT N){INT AN = 0;WH(N > 1){N >>= 1;AN++;}RE AN;}

TE <TY INT> IN CE INT PositiveBaseModulo(INT a,CO INT& p){RE MO(a < 0?((((++a)*= -1)%= p)*= -1)+= p - 1:a < p?a:a %= p);}
TE <TY INT> IN CE INT Modulo(INT a,CO INT& p){RE PositiveBaseModulo(MO(a),p < 0?-p:p);}

TE <TY INT> IN CE INT PositiveBaseQuotient(INT a,CO INT& p){RE MO((a < 0?++a -= p:a)/= p);}
TE <TY INT> IN CE INT Quotient(INT a,CO INT& p){RE p < 0?PositiveBaseQuotient(-a,-p):PositiveBaseQuotient(MO(a),p);}

TE <TY T,TY INT,int deg_max>CO VE<VE<T>>& FloorSumComposition_Body(CO INT& y,CO INT& d,CO INT& q,CO INT& n,CRI D0,CRI D1,CO bool& init){ST Map<tuple<INT,INT,INT,INT>,VE<VE<T>>> memory{};if(init){memory.clear();}auto& AN = memory[{y,d,q,n}];if(D0 == 0 || D1 == 0 ||(int(AN.SZ())>= D0 && int(AN[0].SZ())>= D1)){RE AN;}CO T& zero = T::zero();AN = VE(D0,VE<T>(D1,zero));if(n == 0){RE AN;}AS(q > 0);CO T& one = T::one();CO int D01 = D0 + D1;AS(D01 <= deg_max + 1);ST VE<PO<T>> s{};WH(int(s.SZ())< D01){CO int j = s.SZ();s.push_back(MonomialSum<T,deg_max>(j));if(j != 0){s[j][j]-= one;}}ST VE<VE<T>> coef_prep{};for(int k = 0;k < D1;k++){if(int(coef_prep.SZ())<= k){coef_prep.push_back(VE<T>(k,zero));for(int j1 = 0;j1 < k;j1++){for(int j2 = j1;j2 < k;j2++){coef_prep[k][j1]+= T::FactorialInverse(k - j2)* T::FactorialInverse(j2 - j1)*((k & 1)==(j2 & 1)?1:-1);}coef_prep[k][j1]*= T::Factorial(k)* T::FactorialInverse(j1);}}}ST VE<VE<VE<VE<T>>>> coef{};for(int j = 0;j < D01;j++){if(int(coef.SZ())<= j){coef.push_back(VE<VE<VE<T>>>());}for(int k = 0;k < D1;k++){if(int(coef[j].SZ())<= k){coef[j].push_back(VE(k,VE<T>(j + 2,zero)));auto& coef_jk = coef[j][k];for(int j1 = 0;j1 < k;j1++){for(int k1 = 0;k1 < j + 2;k1++){coef_jk[j1][k1]= coef_prep[k][j1]* s[j][k1];}}}}}CO T n_mod{n};VE<T> Sn(D01,zero);for(int j = 0;j < D01;j++){Sn[j]= s[j](n_mod);}CO INT d_0 = Modulo(d,q);CO INT y_0 = Modulo(y,q);CO INT m = Quotient(y_0 + d_0 *(n - 1),q);CO T m_mod{m};VE<T> m_pw(D1,one);for(int k = 1;k < D1;k++){m_pw[k]= m_pw[k-1]* m_mod;}VE temp(D01,VE<T>(D1));if(d_0 == 0){for(int j = 0;j < D01;j++){temp[j][0]= Sn[j];}}else{CO auto& prev = FloorSumComposition_Body<T,INT,deg_max>(q + d_0 - y_0 - 1,q,d_0,m,D1 - 1,D01 + 1,false);for(int j = 0;j < D01;j++){for(int k = 0;k < D1;k++){temp[j][k]= Sn[j]* m_pw[k];for(int j1 = 0;j1 <= k - 1;j1++){for(int k1 = 0;k1 <= j + 1;k1++){temp[j][k]+= prev[j1][k1]* coef[j][k][j1][k1];}}}}}CO T d_1{Quotient(d,q)};CO T y_1{Quotient(y,q)};for(int j = 0;j < D0;j++){for(int k = 0;k < D1;k++){T y_1_pw = one;for(int k1 = 0;k1 <= k;k1++){CO int k2_max = k - k1;T d_1_pw = one;for(int k2 = 0;k2 <= k2_max;k2++){AN[j][k]+= temp[j+k2][k-k1-k2]* T::FactorialInverse(k2)* T::FactorialInverse(k1)* T::FactorialInverse(k - k1 - k2)* y_1_pw * d_1_pw;d_1_pw *= d_1;}y_1_pw *= y_1;}AN[j][k]*= T::Factorial(k);}}RE AN;}TE <TY T,TY INT,int deg_max = 100> T FloorSumComposition(CO INT& y,CO INT& d,CO INT& q,CO INT& n,CO VE<VE<T>>& f){CO int D0 = f.SZ();CO int D1 = D0 == 0?0:f[0].SZ();auto& coef = FloorSumComposition_Body<T,INT,deg_max>(y,d,q,n,D0,D1,true);T AN{};for(int j = 0;j < D0;j++){AS(int(f[j].SZ())== D1);for(int k = 0;k < D1;k++){AN += f[j][k]* coef[j][k];}}RE AN;}
#endif

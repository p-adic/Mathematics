class Polynomial:
	zero=None
	def __init__(self,f=None):
		self.f=[]if f is None else list(f)
	def ref(x):
		return x if x.__class__==__class__ else __clas__([x])
	def copy(self):
		return __class__(self.f)

	def __eq__(self,g):
		other=ref(g)
		return self.f==other.f
	def __ne__(self,g):
		return not(self==g)

	def __iadd__(self,g):
		other=ref(g)
		lf,lg=len(self.f),len(other.f)
		for i in R(min(lf,lg)):self.f[i]+=other.f[i]
		self.f+=other.f[lf:]
		return self
	def __add__(self,g):
		a=self.copy()
		a+=g
		return a
	def __radd__(self,g):
		return self+g

	def __neg__(self):
		return __class__([-c for c in self.f])
	def __sub__(self,g):
		return self+(-g)
	def __rsub__(self,g):
		return g+(-self)

	#naive multiplication
	def __mul__(self,g):
		other=ref(g)
		lf,lg=len(self.f),len(other.f)
		l=lf+lg-1
		return __class__(sum(self.f[i-j]*other.f[j]for j in R(max(0,i-lf+1),min(i+1,lg)))for i in R(l))
	def __rmul__(self,g):
		return self*g

	def Differential(self,n):
		a=self.copy()
		while n or len(a.f):a.f,n=[(i+1)*a.f[i+1]for i in R(len(a.f)-1)]
		return a

	#naive computation of a+p*f(x)
	def eval(self,x,a=0,p=1):
		for c in self.f:a,p=a+p*c,p*x
		return a
Polynomial.zero=Polynomial()

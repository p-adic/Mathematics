#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Polynomial/FPS/IteratedArithmetic/a_Body.hpp"
#else
// ../../FFT/compress.txtを先に貼る。

#define DF_OF_PROD(RECURSION,UNIT,APPLY)if(f.empty()){f.push_back(UNIT);}if(f.SZ()== 1){RE f.front();}auto IT = f.BE(),EN = f.EN();WH(IT != EN){auto& t = *IT;IT++;if(IT != EN){APPLY;IT = f.erase(IT);}}RE RECURSION;
#define EXPRESSION2_FOR_RATIONAL_SUM {t.first * IT->second + t.second * IT->first,t.second * IT->second}

#define EXPRESSION3_FOR_RATIONAL_SUM {FPS<T>(),FPS<T>(1,PO<T>::one())}
// 有理式の総和のN次打ち切り
TE <TY T,TE <TY...> TY V> pair<FPS<T>,FPS<T>>& RationalSum(V<pair<FPS<T>,FPS<T>>>& f){DF_OF_PROD(RationalSum(f),EXPRESSION3_FOR_RATIONAL_SUM,t = EXPRESSION2_FOR_RATIONAL_SUM);}

// 総乗のN次打ち切り
TE <TY T,TE <TY...> TY V> FPS<T>& Prod(V<FPS<T>>& f){DF_OF_PROD(Prod(f),FPS<T>(1,PO<T>::one()),t *= *IT);}

// Tに拡張された冪乗のN次打ち切り。
TE <TY T> IN FPS<T> PW(CO FPS<T>& f,CO T& t){RE Exp(Log(f)*= t);}
// 冪乗のN次打ち切り。
TE <TY T , TY INT> FPS<T> PW(CO FPS<T>& f,CO INT& e){CO T& one = PO<T>::c_one();if(f[0] == one){RE PW(f,T(e));}CO T& zero = PO<T>::c_zero();CRI SZ = f.SZ();int v = 0;WH(v < SZ?f[v] == zero:false){v++;}CO INT ve = v * e;CRI N = f.GetTruncation();if(v == SZ || ve >= N){RE FPS<T>(N);}FPS<T> g(N - ve);CO T fv_inv = one / f[v];for(int d = v;d < SZ;d++){g[d - v] = f[d] * fv_inv;}g = Exp(Log(g) *= T(e)) * PW(f[v],e);g.SetTruncation(N);for(int d = N - 1;d >= ve;d--){g[d] = g[d - ve];}for(int d = 0;d < ve;d++){g[d] = zero;}RE g;}

// 指数関数の線形結合のN次打ち切り（有理式の総和のN次打ち切りを用いる）
TE <TY T,TE <TY...> TY V> FPS<T> ExponentialSum(CRI N,CO V<pair<T,T>>& coef){ V<pair<FPS<T>,FPS<T>>> f{};for(auto IT = coef.BE(),EN = coef.EN();IT != EN;IT++){f.push_back({FPS<T>(N,IT->first),FPS<T>(N,1,- IT->second)+ PO<T>::one()});}auto&[g,h]= RationalSum(f);g /= h;CO int& SZ = g.SZ();for(int d = 0;d < SZ;d++){g[d]*= T::FactorialInverse(d);}RE MO(g);}
#endif

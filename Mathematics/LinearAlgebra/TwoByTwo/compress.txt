#include <immintrin.h>
#define SFINAE_FOR_MA(DEFAULT) TY Arg,enable_if_t<is_COructible<T,Arg>::value>* DEFAULT

TE <TY T>CL TTMA;TE <TY T>CL TOMA{PU:T m_M0;T m_M1;PU:IN CE TOMA(CO T& M0 = T(),CO T& M1 = T())NE;IN CE TOMA(T&& M0,T&& M1)NE;IN CE TOMA(CO TOMA<T>& mat)NE;IN CE TOMA(TOMA<T>&& mat)NE;IN CE TOMA<T>& OP=(CO TOMA<T>& mat)NE;IN CE TOMA<T>& OP=(TOMA<T>&& mat)NE;IN CE TOMA<T>& OP+=(CO TOMA<T>& mat)NE;IN CE TOMA<T>& OP-=(CO TOMA<T>& mat)NE;IN CE TOMA<T>& OP*=(CO TTMA<T>& mat)NE;IN CE TOMA<T>& OP*=(CO T& scalar)NE;TE <SFINAE_FOR_MA(= nullptr)> IN CE TOMA<T>& OP*=(CO Arg& scalar)NE;IN TOMA<T>& OP/=(CO T& scalar);TE <SFINAE_FOR_MA(= nullptr)> IN CE TOMA<T>& OP/=(CO Arg& scalar);IN TOMA<T>& OP%=(CO T& scalar);TE <SFINAE_FOR_MA(= nullptr)> IN CE TOMA<T>& OP%=(CO Arg& scalar);IN CE CO T& GetEntry(CRUI y) CO NE;IN CE T& RefEntry(CRUI y)NE;};

#define VECTRISATION_FOR_TTMA_FOR_MOD(MODULO) TE <> IN TTMA<Mod<MODULO> >& TTMA<Mod<MODULO> >::OP+=(CO TTMA<Mod<MODULO> >& mat)NE{uint TH_copy[4] ={m_M00.m_n,m_M01.m_n,m_M10.m_n,m_M11.m_n};uint mat_copy[4] ={mat.m_M00.m_n,mat.m_M01.m_n,mat.m_M10.m_n,mat.m_M11.m_n};_mm_store_si128((__m128i*)TH_copy,_mm_load_si128((__m128i *)TH_copy) + _mm_load_si128((__m128i *)mat_copy));FOR(i,0,4){Mod<MODULO>::Normalise(TH_copy[i]);}m_M00.m_n = TH_copy[0];m_M01.m_n = TH_copy[1];m_M10.m_n = TH_copy[2];m_M11.m_n = TH_copy[3];RE *TH;}TE <> IN TTMA<Mod<MODULO> >& TTMA<Mod<MODULO> >::OP-=(CO TTMA<Mod<MODULO> >& mat)NE{ST CO uint MODULO_copy[4] ={MODULO,MODULO,MODULO,MODULO};ST CO __m128i v_MODULO = _mm_load_si128((__m128i *)MODULO_copy);uint TH_copy[4] ={m_M00.m_n,m_M01.m_n,m_M10.m_n,m_M11.m_n};uint mat_copy[4] ={mat.m_M00.m_n,mat.m_M01.m_n,mat.m_M10.m_n,mat.m_M11.m_n};_mm_store_si128((__m128i*)TH_copy,(_mm_load_si128((__m128i *)TH_copy) + v_MODULO) - _mm_load_si128((__m128i *)mat_copy));FOR(i,0,4){Mod<MODULO>::Normalise(TH_copy[i]);}m_M00.m_n = TH_copy[0];m_M01.m_n = TH_copy[1];m_M10.m_n = TH_copy[2];m_M11.m_n = TH_copy[3];RE *TH;}

TE <TY T>CL TTMA{PU:T m_M00;T m_M01;T m_M10;T m_M11;PU:IN CE TTMA(CO T& M00,CO T& M01,CO T& M10,CO T& M11)NE;IN CE TTMA(T&& M00,T&& M01,T&& M10,T&& M11)NE;IN CE TTMA(CO T& n = T())NE;TE <SFINAE_FOR_MA(= nullptr)> IN CE TTMA(CO Arg& n)NE;IN CE TTMA(CO TTMA<T>& mat)NE;IN CE TTMA(TTMA<T>&& mat)NE;IN CE TTMA<T>& OP=(CO TTMA<T>& mat)NE;IN CE TTMA<T>& OP=(TTMA<T>&& mat)NE;IN TTMA<T>& OP+=(CO TTMA<T>& mat)NE;IN TTMA<T>& OP-=(CO TTMA<T>& mat)NE;IN CE TTMA<T>& OP*=(CO TTMA<T>& mat)NE;IN CE TTMA<T>& OP*=(CO T& scalar)NE;TE <SFINAE_FOR_MA(= nullptr)> IN CE TTMA<T>& OP*=(CO Arg& scalar)NE;IN TTMA<T>& OP/=(CO TTMA<T>& mat);IN TTMA<T>& OP/=(CO T& scalar);TE <SFINAE_FOR_MA(= nullptr)> IN CE TTMA<T>& OP/=(CO Arg& scalar);IN TTMA<T>& OP%=(CO T& scalar);TE <SFINAE_FOR_MA(= nullptr)> IN CE TTMA<T>& OP%=(CO Arg& scalar);IN TTMA<T>& Invert();IN CE TTMA<T> OP*(CO TTMA<T>& mat) CO NE;IN CE TOMA<T> OP*(CO TOMA<T>& mat) CO NE;IN TTMA<T> OP/(CO TTMA<T>& mat) CO;IN CE TTMA<T> Square() CO NE;IN CE CO T& GetEntry(CRUI y,CRUI x) CO NE;IN CE T& RefEntry(CRUI y,CRUI x)NE;};TE <TY T,SFINAE_FOR_MA(= nullptr)> IN CE TTMA<T> OP*(CO Arg& scalar,CO TTMA<T>& mat)NE;TE <TY T,SFINAE_FOR_MA(= nullptr)> IN CE TTMA<T> OP*(CO TTMA<T>& mat,CO T& scalar)NE;TE <TY T,SFINAE_FOR_MA(= nullptr)> IN TTMA<T> OP/(CO TTMA<T>& mat,CO Arg& scalar);TE <TY T,SFINAE_FOR_MA(= nullptr)> IN TTMA<T> OP%(CO TTMA<T>& mat,CO Arg& scalar);

TE <TY T> IN CE TOMA<T>::TOMA(CO T& M0,CO T& M1)NE:m_M0(M0),m_M1(M1){}TE <TY T> IN CE TOMA<T>::TOMA(T&& M0,T&& M1)NE:m_M0(MO(M0)),m_M1(MO(M1)){}TE <TY T> IN CE TOMA<T>::TOMA(CO TOMA<T>& mat)NE:m_M0(mat.m_M0),m_M1(mat.m_M1){}TE <TY T> IN CE TOMA<T>::TOMA(TOMA<T>&& mat)NE:m_M0(MO(mat.m_M0)),m_M1(MO(mat.m_M1)){}TE <TY T> IN CE TOMA<T>& TOMA<T>::OP=(CO TOMA<T>& mat)NE{if(&mat != TH){m_M0 = mat.m_M0;m_M1 = mat.m_M1;}RE *TH;}TE <TY T> IN CE TOMA<T>& TOMA<T>::OP=(TOMA<T>&& mat)NE{m_M0 = MO(mat.m_M0);m_M1 = MO(mat.m_M1);RE *TH;}TE <TY T> IN CE TOMA<T>& TOMA<T>::OP+=(CO TOMA<T>& mat)NE{m_M0 += mat.m_M0;m_M1 += mat.m_M1;RE *TH;}TE <TY T> IN CE TOMA<T>& TOMA<T>::OP-=(CO TOMA<T>& mat)NE{m_M0 -= mat.m_M0;m_M1 -= mat.m_M1;RE *TH;}TE <TY T> IN CE TOMA<T>& TOMA<T>::OP*=(CO TTMA<T>& mat)NE{RE OP=(mat * *TH);}TE <TY T> IN CE TOMA<T>& TOMA<T>::OP*=(CO T& scalar)NE{m_M0 *= scalar;m_M1 *= scalar;RE *TH;}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TOMA<T>& TOMA<T>::OP*=(CO Arg& scalar)NE{RE OP*=(T(scalar));}TE <TY T> IN TOMA<T>& TOMA<T>::OP/=(CO T& scalar){m_M0 /= scalar;m_M1 /= scalar;RE *TH;}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TOMA<T>& TOMA<T>::OP/=(CO Arg& scalar){RE OP/=(T(scalar));}TE <TY T> IN TOMA<T>& TOMA<T>::OP%=(CO T& scalar){m_M0 %= scalar;m_M1 %= scalar;RE *TH;}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TOMA<T>& TOMA<T>::OP%=(CO Arg& scalar){RE OP%=(T(scalar));}TE <TY T> IN CE CO T& TOMA<T>::GetEntry(CRUI y) CO NE{RE y == 0?m_M0:m_M1;}TE <TY T> IN CE T& TOMA<T>::RefEntry(CRUI y)NE{RE y == 0?m_M0:m_M1;}

TE <TY T> IN CE TTMA<T>::TTMA(CO T& M00,CO T& M01,CO T& M10,CO T& M11) NE:m_M00(M00),m_M01(M01),m_M10(M10),m_M11(M11){}TE <TY T> IN CE TTMA<T>::TTMA(T&& M00,T&& M01,T&& M10,T&& M11) NE:m_M00(MO(M00)),m_M01(MO(M01)),m_M10(MO(M10)),m_M11(MO(M11)){}TE <TY T> IN CE TTMA<T>::TTMA(CO T& n) NE:m_M00(n),m_M01(),m_M10(),m_M11(n){}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TTMA<T>::TTMA(CO Arg& n) NE:TTMA(T(n)){}TE <TY T> IN CE TTMA<T>::TTMA(CO TTMA<T>& mat) NE:m_M00(mat.m_M00),m_M01(mat.m_M01),m_M10(mat.m_M10),m_M11(mat.m_M11){}TE <TY T> IN CE TTMA<T>::TTMA(TTMA<T>&& mat) NE:m_M00(MO(mat.m_M00)),m_M01(MO(mat.m_M01)),m_M10(MO(mat.m_M10)),m_M11(MO(mat.m_M11)){}TE <TY T> IN CE TTMA<T>& TTMA<T>::OP=(CO TTMA<T>& mat) NE{if(&mat != TH){m_M00 = mat.m_M00;m_M01 = mat.m_M01;m_M10 = mat.m_M10;m_M11 = mat.m_M11;}RE *TH;}TE <TY T> IN CE TTMA<T>& TTMA<T>::OP=(TTMA<T>&& mat) NE{m_M00 = MO(mat.m_M00);m_M01 = MO(mat.m_M01);m_M10 = MO(mat.m_M10);m_M11 = MO(mat.m_M11);RE *TH;}TE <TY T> IN TTMA<T>& TTMA<T>::OP+=(CO TTMA<T>& mat) NE{m_M00 += mat.m_M00;m_M01 += mat.m_M01;m_M10 += mat.m_M10;m_M11 += mat.m_M11;RE *TH;}TE <TY T> IN TTMA<T>& TTMA<T>::OP-=(CO TTMA<T>& mat) NE{m_M00 -= mat.m_M00;m_M01 -= mat.m_M01;m_M10 -= mat.m_M10;m_M11 -= mat.m_M11;RE *TH;}TE <TY T> IN CE TTMA<T>& TTMA<T>::OP*=(CO TTMA<T>& mat) NE{RE OP=(*TH * mat);}TE <TY T> IN CE TTMA<T>& TTMA<T>::OP*=(CO T& scalar) NE{m_M00 *= scalar;m_M01 *= scalar;m_M10 *= scalar;m_M11 *= scalar;RE *TH;}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TTMA<T>& TTMA<T>::OP*=(CO Arg& scalar) NE{RE OP*=(T(scalar));}TE <TY T> IN TTMA<T>& TTMA<T>::OP/=(CO TTMA<T>& mat){RE OP=(*TH / mat);}TE <TY T> IN TTMA<T>& TTMA<T>::OP/=(CO T& scalar){RE OP*=(T(1) / scalar);}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TTMA<T>& TTMA<T>::OP/=(CO Arg& scalar){RE OP/=(T(scalar));}TE <TY T> IN TTMA<T>& TTMA<T>::OP%=(CO T& scalar){m_M00 %= scalar;m_M01 %= scalar;m_M10 %= scalar;m_M11 %= scalar;RE *TH;}TE <TY T> TE <SFINAE_FOR_MA()> IN CE TTMA<T>& TTMA<T>::OP%=(CO Arg& scalar){RE OP%=(T(scalar));}TE <TY T> IN TTMA<T>& TTMA<T>::Invert(){CO T det_inv{T(1) / (m_M00 * m_M11 - m_M01 * m_M10)};swap(m_M00,m_M11);m_M01 = T() - m_M01;m_M11 = T() - m_M10;RE OP*=(det_inv);}TE <TY T> IN CE TTMA<T> TTMA<T>::OP*(CO TTMA<T>& mat) CO NE{RE TTMA<T>(m_M00 * mat.m_M00 + m_M01 * mat.m_M10,m_M00 * mat.m_M01 + m_M01 * mat.m_M11,m_M10 * mat.m_M00 + m_M11 * mat.m_M10,m_M10 * mat.m_M01 + m_M11 * mat.m_M11);}TE <TY T> IN CE TOMA<T> TTMA<T>::OP*(CO TOMA<T>& mat) CO NE{RE TOMA<T>(m_M00 * mat.m_M0 + m_M01 * mat.m_M1,m_M10 * mat.m_M0 + m_M11 * mat.m_M1);}TE <TY T> IN TTMA<T> TTMA<T>::OP/(CO TTMA<T>& mat) CO{CO T det_inv{T(1) / (mat.m_M00 * mat.m_M11 - mat.m_M01 * mat.m_M10)};RE TTMA<T>((m_M00 * mat.m_M11 - m_M01 * mat.m_M10) * det_inv,(m_M01 * mat.m_M00 - m_M00 * mat.m_M01) * det_inv,(m_M10 * mat.m_M11 - m_M11 * mat.m_M10) * det_inv,(m_M11 * mat.m_M00 - m_M10 * mat.m_M01) * det_inv);}TE <TY T> IN CE TTMA<T> TTMA<T>::Square() CO NE{RE TTMA<T>(m_M00 * m_M00 + m_M01 * m_M10,(m_M00 + m_M11) * m_M01,m_M10 * (m_M00 + m_M11),m_M10 * m_M01 + m_M11 * m_M11);}TE <TY T> IN CE CO T& TTMA<T>::GetEntry(CRUI y,CRUI x) CO NE{RE y == 0?x == 0?m_M00:m_M01:x == 0?m_M10:m_M11;}TE <TY T> IN CE T& TTMA<T>::RefEntry(CRUI y,CRUI x) NE{RE y == 0?x == 0?m_M00:m_M01:x == 0?m_M10:m_M11;}TE <TY T> IN TTMA<T> OP+(CO TTMA<T>& mat1,CO TTMA<T>& mat2) NE{RE MO(TTMA<T>(mat1) += mat2);}TE <TY T> IN TTMA<T> OP-(CO TTMA<T>& mat1,CO TTMA<T>& mat2) NE{RE MO(TTMA<T>(mat1) -= mat2);}TE <TY T> IN CE TTMA<T> OP*(CO T& scalar,CO TTMA<T>& mat) NE{RE MO(TTMA<T>(mat) *= scalar);}TE <TY T,SFINAE_FOR_MA()> IN CE TTMA<T> OP*(CO Arg& scalar,CO TTMA<T>& mat) NE{RE T(scalar) * mat;}TE <TY T> IN CE TTMA<T> OP*(CO TTMA<T>& mat,CO T& scalar) NE{RE MO(TTMA<T>(mat) *= scalar);}TE <TY T,SFINAE_FOR_MA()> IN CE TTMA<T> OP*(CO TTMA<T>& mat,CO Arg& scalar) NE{RE mat * T(scalar);}TE <TY T> IN TTMA<T> OP/(CO TTMA<T>& mat,CO T& scalar){RE MO(TTMA<T>(mat) /= scalar);}TE <TY T,SFINAE_FOR_MA()> IN TTMA<T> OP/(CO TTMA<T>& mat,CO Arg& scalar){RE mat / T(scalar);}TE <TY T> IN TTMA<T> OP%(CO TTMA<T>& mat,CO T& scalar){RE MO(TTMA<T>(mat) %= scalar);}TE <TY T,SFINAE_FOR_MA()> IN TTMA<T> OP%(CO TTMA<T>& mat,CO Arg& scalar){RE mat % T(scalar);}TE <TY T> IN CE TTMA<T> Square(CO TTMA<T>& mat) NE{RE mat.Square();}

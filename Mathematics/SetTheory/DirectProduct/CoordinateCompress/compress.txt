TE <TY T,TE <TY...> TY MAP = Map>CL CoordinateCompress{PU:VE<T> m_a;MAP<T,int> m_enum;bool m_compressed;int m_SZ;IN CoordinateCompress();TE <TY U> IN CoordinateCompress(CO VE<U>& a);IN VO insert(CO T& t);TE <TY U> IN VO insert(CO VE<U>& a);IN CO T& OP[](CRI i);IN CO T& GetSmallest(CRI i = 0);IN CO T& GetLargest(CRI i = 0);IN int GetOrder(CO T& t);IN CRI SZ();IN TY MAP<T,int>::iterator BE();IN TY MAP<T,int>::iterator EN();IN VO Compress();};
TE <TY T,TE <TY...> TY MAP> IN CoordinateCompress<T,MAP>::CoordinateCompress():m_a(),m_enum(),m_compressed(),m_SZ(){}TE <TY T,TE <TY...> TY MAP> TE <TY U> IN CoordinateCompress<T,MAP>::CoordinateCompress(CO VE<U>& a):CoordinateCompress(){insert(a);}TE <TY T,TE <TY...> TY MAP> IN VO CoordinateCompress<T,MAP>::insert(CO T& t){m_enum[t];m_SZ = m_enum.SZ();m_compressed = false;}TE <TY T,TE <TY...> TY MAP> TE <TY U> IN VO CoordinateCompress<T,MAP>::insert(CO VE<U>& a){CO int LE = a.SZ();if(LE > 0){for(int i = 0;i < LE;i++){m_enum[a[i]];}m_SZ = m_enum.SZ();m_compressed = false;}}TE <TY T,TE <TY...> TY MAP> IN CO T& CoordinateCompress<T,MAP>::OP[](CRI i){RE GetSmallest(i);}TE <TY T,TE <TY...> TY MAP> IN CO T& CoordinateCompress<T,MAP>::GetSmallest(CRI i){if(! m_compressed){Compress();}AS(i < m_SZ);RE m_a[i];}TE <TY T,TE <TY...> TY MAP> IN CO T& CoordinateCompress<T,MAP>::GetLargest(CRI i){if(! m_compressed){Compress();}AS(i < m_SZ);RE m_a[m_SZ - i - 1];}TE <TY T,TE <TY...> TY MAP> IN int CoordinateCompress<T,MAP>::GetOrder(CO T& t){if(! m_compressed){Compress();}RE m_enum.count(t)== 1?m_enum[t]:-1;}TE <TY T,TE <TY...> TY MAP> IN CRI CoordinateCompress<T,MAP>::SZ(){RE m_SZ;}TE <TY T,TE <TY...> TY MAP> IN TY MAP<T,int>::iterator CoordinateCompress<T,MAP>::BE(){RE m_enum.BE();}TE <TY T,TE <TY...> TY MAP> IN TY MAP<T,int>::iterator CoordinateCompress<T,MAP>::EN(){RE m_enum.EN();}TE <TY T,TE <TY...> TY MAP> IN VO CoordinateCompress<T,MAP>::Compress(){m_a.reSZ(m_SZ);m_SZ = 0;for(auto IT = m_enum.BE(),EN = m_enum.EN();IT != EN;IT++){m_a[IT->second = m_SZ++]= IT->first;}m_compressed = true;}


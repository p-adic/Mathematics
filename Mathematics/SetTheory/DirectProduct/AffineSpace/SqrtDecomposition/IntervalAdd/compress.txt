// êÊÇ…../../../../../Algebra/compress.txtÇì\ÇÈÅB

IN CE int Sqrt(CRI N)NE{if(N <= 1){RE 1;}int left = 0;int right = N;WH(left + 1 < right){int m =(left + right)/ 2;(m <=(N - 1)/ m?left:right)= m;}RE right;}

#define SFINAE_FOR_SD_S enable_if_t<is_invocable_r_v<bool,F,U,int>>*
TE <TY U,TY ABELIAN_GROUP>CL AbstractSqrtDecomposition{PU:ABELIAN_GROUP m_M;int m_N;int m_N_sqrt;int m_N_d;int m_N_m;VE<U> m_a;VE<U> m_b;IN AbstractSqrtDecomposition(ABELIAN_GROUP M,CRI N);IN AbstractSqrtDecomposition(ABELIAN_GROUP M,CRI N,CRI N_sqrt);IN AbstractSqrtDecomposition(ABELIAN_GROUP M,VE<U> a);IN AbstractSqrtDecomposition(ABELIAN_GROUP M,VE<U> a,CRI N_sqrt);TE <TY...Args> IN VO Reset(Args&&... args);IN VO Set(CRI i,CO U& u);IN VO Add(CRI i,CO U& u);IN CO U& OP[](CRI i)CO;IN CO U& Get(CRI i)CO;IN U IntervalSum(CRI i_start,CRI i_final);TE <TY F,SFINAE_FOR_SD_S = nullptr> IN int Search(CRI i_start,CO F& f);IN int Search(CRI i_start,CO U& u);VO Initialise();TE <TY F> int Search_Body(CRI i_start,CO F& f,U sum_temp);};TE <TY ABELIAN_GROUP,TY...Args> AbstractSqrtDecomposition(ABELIAN_GROUP M,Args&&...args)-> AbstractSqrtDecomposition<inner_t<ABELIAN_GROUP>,ABELIAN_GROUP>;TE <TY U = ll>CL SqrtDecomposition:PU AbstractSqrtDecomposition<U,AdditiveGroup<U>>{PU:TE <TY...Args> IN SqrtDecomposition(Args&&... args);};TE <TY U,TY...Args> SqrtDecomposition(VE<U> a,Args&&...args)-> SqrtDecomposition<U>;
TE <TY U,TY ABELIAN_GROUP> IN AbstractSqrtDecomposition<U,ABELIAN_GROUP>::AbstractSqrtDecomposition(ABELIAN_GROUP M,CRI N):AbstractSqrtDecomposition(MO(M),N,Sqrt(N)){}TE <TY U,TY ABELIAN_GROUP> IN AbstractSqrtDecomposition<U,ABELIAN_GROUP>::AbstractSqrtDecomposition(ABELIAN_GROUP M,CRI N,CRI N_sqrt):m_M(MO(M)),m_N(N),m_N_sqrt(N_sqrt),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(m_N_m,m_M.Zero()),m_b(m_N_d,m_M.Zero()){ST_AS(! is_same_v<U,int> && is_same_v<U,inner_t<ABELIAN_GROUP>>);}TE <TY U,TY ABELIAN_GROUP> IN AbstractSqrtDecomposition<U,ABELIAN_GROUP>::AbstractSqrtDecomposition(ABELIAN_GROUP M,VE<U> a):m_M(MO(M)),m_N(a.SZ()),m_N_sqrt(Sqrt(m_N)),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(MO(a)),m_b(m_N_d,m_M.Zero()){Initialise();}TE <TY U,TY ABELIAN_GROUP> IN AbstractSqrtDecomposition<U,ABELIAN_GROUP>::AbstractSqrtDecomposition(ABELIAN_GROUP M,VE<U> a,CRI N_sqrt):m_M(MO(M)),m_N(a.SZ()),m_N_sqrt(N_sqrt),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(MO(a)),m_b(m_N_d,m_M.Zero()){Initialise();}TE <TY U,TY ABELIAN_GROUP> IN VO AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Initialise(){ST_AS(! is_same_v<U,int> && is_same_v<U,inner_t<ABELIAN_GROUP>>);m_a.reSZ(m_N_m);int i_min = 0;int i_ulim = m_N_sqrt;for(int d = 0;d < m_N_d;d++){U& m_bd = m_b[d];for(int i = i_min;i < i_ulim;i++){m_bd = m_M.Sum(m_bd,m_a[i]);}i_min = i_ulim;i_ulim += m_N_sqrt;}}TE <TY U> TE <TY...Args> IN SqrtDecomposition<U>::SqrtDecomposition(Args&&... args):AbstractSqrtDecomposition<U,AdditiveGroup<U>>(AdditiveGroup<U>(),forward<Args>(args)...){}TE <TY U,TY ABELIAN_GROUP> TE <TY...Args> IN VO AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Reset(Args&&...args){*TH = AbstractSqrtDecomposition<U,ABELIAN_GROUP>(MO(m_M),forward<Args>(args)...);}TE <TY U,TY ABELIAN_GROUP> IN VO AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Set(CRI i,CO U& u){U& m_ai = m_a[i];U& m_bd = m_b[i / m_N_sqrt];m_bd = m_M.Sum(m_bd,m_M.Sum(m_M.Inverse(m_ai),u));m_ai = u;}TE <TY U,TY ABELIAN_GROUP> IN VO AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Add(CRI i,CO U& u){U& m_ai = m_a[i];U& m_bd = m_b[i / m_N_sqrt];m_bd = m_M.Sum(m_bd,u);m_ai = m_M.Sum(m_ai,u);}TE <TY U,TY ABELIAN_GROUP> IN CO U& AbstractSqrtDecomposition<U,ABELIAN_GROUP>::OP[](CRI i)CO{AS(0 <= i && i < m_N);RE m_a[i];}TE <TY U,TY ABELIAN_GROUP> IN CO U& AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Get(CRI i)CO{RE OP[](i);}TE <TY U,TY ABELIAN_GROUP> IN U AbstractSqrtDecomposition<U,ABELIAN_GROUP>::IntervalSum(CRI i_start,CRI i_final){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,m_N);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int d_1 = max(d_0,i_ulim / m_N_sqrt);CO int i_0 = min(d_0 * m_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1 * m_N_sqrt);U AN = m_M.Zero();for(int i = i_min;i < i_0;i++){AN = m_M.Sum(AN,m_a[i]);}for(int d = d_0;d < d_1;d++){AN = m_M.Sum(AN,m_b[d]);}for(int i = i_1;i < i_ulim;i++){AN = m_M.Sum(AN,m_a[i]);}RE AN;}TE <TY U,TY ABELIAN_GROUP> TE <TY F,SFINAE_FOR_SD_S> IN int AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Search(CRI i_start,CO F& f){RE Search_Body(i_start,f,m_M.Zero());}TE <TY U,TY ABELIAN_GROUP> IN int AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Search(CRI i_start,CO U& u){RE Search(i_start,[&](CO U& sum,CRI){RE !(u < sum);});}TE <TY U,TY ABELIAN_GROUP> TE <TY F> int AbstractSqrtDecomposition<U,ABELIAN_GROUP>::Search_Body(CRI i_start,CO F& f,U sum_temp){CO int i_min = max(i_start,0);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int i_0 = min(d_0 * m_N_sqrt,m_N);for(int i = i_min;i < i_0;i++){sum_temp = m_M.Sum(sum_temp,m_a[i]);if(f(sum_temp,i)){RE i;}}for(int d = d_0;d < m_N_d;d++){U sum_next = m_M.Sum(sum_temp,m_b[d]);if(f(sum_next,min((d + 1)* m_N_sqrt,m_N)- 1)){RE Search_Body(d * m_N_sqrt,f,sum_temp);}sum_temp = MO(sum_next);}RE -1;}

TE <TY R,TY U>CL VirtualModule{PU:VI U Action(CO R& r,CO U& u)= 0;IN U PW(CO U& u,CO R& r);IN U ScalarProduct(CO R& r,CO U& u);};TE <TY R,TY U,TY O_U,TY GROUP>CL AbstractModule:VI PU VirtualModule<R,U>,PU GROUP{PU:O_U m_o_U;IN AbstractModule(CO R& dummy,O_U o_U,GROUP M);IN U Action(CO R& r,CO U& u);};TE <TY R,TY O_U,TY GROUP> AbstractModule(CO R& dummy,O_U o_U,GROUP M)-> AbstractModule<R,inner_t<GROUP>,O_U,GROUP>;TE <TY R,TY U>CL Module:VI PU VirtualModule<R,U>,PU AdditiveGroup<U>{PU:IN U Action(CO R& r,CO U& u);};
TE <TY R,TY U,TY O_U,TY GROUP> IN AbstractModule<R,U,O_U,GROUP>::AbstractModule(CO R& dummy,O_U o_U,GROUP M):GROUP(MO(M)),m_o_U(MO(o_U)){ST_AS(is_same_v<U,inner_t<GROUP>> && is_invocable_r_v<U,O_U,R,U>);}TE <TY R,TY U,TY O_U,TY GROUP> IN U AbstractModule<R,U,O_U,GROUP>::Action(CO R& r,CO U& u){RE m_o_U(r,u);}TE <TY R,TY U> IN U Module<R,U>::Action(CO R& r,CO U& u){RE r * u;}TE <TY R,TY U> IN U VirtualModule<R,U>::PW(CO U& u,CO R& r){RE Action(r,u);}TE <TY R,TY U> IN U VirtualModule<R,U>::ScalarProduct(CO R& r,CO U& u){RE Action(r,u);}

TE <TY U,TY Z_MODULE>CL IntervalAddAbstractSqrtDecomposition:PU AbstractSqrtDecomposition<U,Z_MODULE>{PU:VE<U> m_lazy_addition;TE <TY...Args> IN IntervalAddAbstractSqrtDecomposition(Z_MODULE M,Args&&... args);TE <TY...Args> IN VO Reset(Args&&... args);IN VO Set(CRI i,CO U& u);IN VO IntervalAdd(CRI i_start,CRI i_final,CO U& u);IN U OP[](CRI i);IN U Get(CRI i);IN U IntervalSum(CRI i_start,CRI i_final);TE <TY F,SFINAE_FOR_SD_S> IN int Search(CRI i_start,CO F& f)= delete;IN int Search(CRI i_start,CO U& u)= delete;};TE <TY Z_MODULE,TY...Args> IntervalAddAbstractSqrtDecomposition(Z_MODULE M,Args&&... args)-> IntervalAddAbstractSqrtDecomposition<inner_t<Z_MODULE>,Z_MODULE>;TE <TY U = ll>CL IntervalAddSqrtDecomposition:PU IntervalAddAbstractSqrtDecomposition<U,Module<int,U>>{PU:TE <TY...Args> IN IntervalAddSqrtDecomposition(Args&&... args);};TE <TY U,TY...Args> IntervalAddSqrtDecomposition(VE<U> a,Args&&...args)-> IntervalAddSqrtDecomposition<U>;
TE <TY U,TY Z_MODULE> TE <TY...Args> IN IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::IntervalAddAbstractSqrtDecomposition(Z_MODULE M,Args&&... args):AbstractSqrtDecomposition<U,Z_MODULE>(MO(M),forward<Args>(args)...),m_lazy_addition(TH->m_N_d,TH->m_M.Zero()){}TE <TY U> TE <TY...Args> IN IntervalAddSqrtDecomposition<U>::IntervalAddSqrtDecomposition(Args&&... args):IntervalAddAbstractSqrtDecomposition<U,Module<int,U>>(Module<int,U>(),args...){}TE <TY U,TY Z_MODULE> TE <TY...Args> IN VO IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::Reset(Args&&... args){*TH = IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>(MO(TH->m_M),forward<Args>(args)...);}TE <TY U,TY Z_MODULE> IN VO IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::Set(CRI i,CO U& u){CO int d = i / TH->m_N_sqrt;TH->m_b[d]= TH->m_M.Sum(TH->m_b[d],TH->m_M.Sum(u,TH->m_M.Inverse(TH->m_a[i])));TH->m_a[i]= TH->m_M.Sum(u,TH->m_M.Inverse(m_lazy_addition[d]));}TE <TY U,TY Z_MODULE> IN VO IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::IntervalAdd(CRI i_start,CRI i_final,CO U& u){if(u != TH->m_M.Zero()){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,TH->m_N);CO int d_0 =(i_min + TH->m_N_sqrt - 1)/ TH->m_N_sqrt;CO int d_1 = max(d_0,i_ulim / TH->m_N_sqrt);CO int i_0 = min(d_0 * TH->m_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1 * TH->m_N_sqrt);for(int i = i_min;i < i_0;i++){TH->Add(i,u);}for(int d = d_0;d < d_1;d++){U& m_lazy_addition_d = m_lazy_addition[d];m_lazy_addition_d = TH->m_M.Sum(m_lazy_addition_d,u);}for(int i = i_1;i < i_ulim;i++){TH->Add(i,u);}}RE;}TE <TY U,TY Z_MODULE> IN U IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::OP[](CRI i){AS(0 <= i && i < TH->m_N);RE TH->m_M.Sum(AbstractSqrtDecomposition<U,Z_MODULE>::OP[](i),m_lazy_addition[i / TH->m_N_sqrt]);}TE <TY U,TY Z_MODULE> IN U IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::Get(CRI i){RE OP[](i);}TE <TY U,TY Z_MODULE> IN U IntervalAddAbstractSqrtDecomposition<U,Z_MODULE>::IntervalSum(CRI i_start,CRI i_final){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,TH->m_N);CO int d_0 =(i_min + TH->m_N_sqrt - 1)/ TH->m_N_sqrt;CO int d_1 = max(d_0,i_ulim / TH->m_N_sqrt);CO int i_0 = min(d_0 * TH->m_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1 * TH->m_N_sqrt);U AN = TH->m_M.Zero();for(int d = d_0;d < d_1;d++){AN = TH->m_M.Sum(AN,m_lazy_addition[d]);}AN = TH->m_M.ScalarProduct(AN,d_1 - d_0);if(d_0 > 0){AN = TH->m_M.Sum(AN,TH->m_M.ScalarProduct(m_lazy_addition[d_0 - 1],i_0 - i_min));}if(d_1 < TH->m_N_d){AN = TH->m_M.Sum(AN,TH->m_M.ScalarProduct(m_lazy_addition[d_1],i_ulim - i_1));}AN = TH->m_M.Sum(AN,AbstractSqrtDecomposition<U,Z_MODULE>::IntervalSum(i_start,i_final));RE AN;}



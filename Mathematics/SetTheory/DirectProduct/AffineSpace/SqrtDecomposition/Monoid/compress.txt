IN CE int Sqrt(CRI N)NE{if(N <= 1){RE 1;}int left = 0;int right = N;WH(left + 1 < right){int m =(left + right)/ 2;(m <=(N - 1)/ m?left:right)= m;}RE right;}

#define SFINAE_FOR_SD_S enable_if_t<is_invocable_r_v<bool,F,U,int>>*

TE <TY U,TY COMM_MONOID>CL MonoidSqrtDecomposition{PU:COMM_MONOID m_M;int m_N;int m_N_sqrt;int m_N_d;int m_N_m;VE<U> m_a;VE<U> m_b;IN MonoidSqrtDecomposition(COMM_MONOID M,CRI N);IN MonoidSqrtDecomposition(COMM_MONOID M,CRI N,CRI N_sqrt);IN MonoidSqrtDecomposition(COMM_MONOID M,VE<U> a);IN MonoidSqrtDecomposition(COMM_MONOID M,VE<U> a,CRI N_sqrt);TE <TY...Args> IN VO Initialise(Args&&... args);IN VO Set(CRI i,CO U& u);IN VO Multiply(CRI i,CO U& u);IN CO U& OP[](CRI i)CO;IN CO U& Get(CRI i)CO;IN U IntervalProduct(CRI i_start,CRI i_final);TE <TY F,SFINAE_FOR_SD_S = nullptr> IN int Search(CRI i_start,CO F& f);IN int Search(CRI i_start,CO U& u);TE <TY F> int Search_Body(CRI i_start,CO F& f,U sum_temp);};TE <TY COMM_MONOID,TY...Args> MonoidSqrtDecomposition(COMM_MONOID M,Args&&...args)-> MonoidSqrtDecomposition<inner_t<COMM_MONOID>,COMM_MONOID>;
TE <TY U,TY COMM_MONOID> IN MonoidSqrtDecomposition<U,COMM_MONOID>::MonoidSqrtDecomposition(COMM_MONOID M,CRI N):MonoidSqrtDecomposition(MO(M),N,Sqrt(N)){}TE <TY U,TY COMM_MONOID> IN MonoidSqrtDecomposition<U,COMM_MONOID>::MonoidSqrtDecomposition(COMM_MONOID M,CRI N,CRI N_sqrt):m_M(MO(M)),m_N(N),m_N_sqrt(N_sqrt),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(m_N_m,m_M.Zero()),m_b(m_N_d,m_M.Zero()){ST_AS(! is_same_v<U,int> && is_same_v<U,inner_t<COMM_MONOID>>);}TE <TY U,TY COMM_MONOID> IN MonoidSqrtDecomposition<U,COMM_MONOID>::MonoidSqrtDecomposition(COMM_MONOID M,VE<U> a):MonoidSqrtDecomposition(MO(M),MO(a),Sqrt(a.SZ())){}TE <TY U,TY COMM_MONOID> IN MonoidSqrtDecomposition<U,COMM_MONOID>::MonoidSqrtDecomposition(COMM_MONOID M,VE<U> a,CRI N_sqrt):m_M(MO(M)),m_N(a.SZ()),m_N_sqrt(N_sqrt),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(MO(a)),m_b(m_N_d,m_M.Zero()){ST_AS(! is_same_v<U,int> && is_same_v<U,inner_t<COMM_MONOID>>);m_a.reSZ(m_N_m,m_M.One());int i_min = 0;int i_ulim = m_N_sqrt;for(int d = 0;d < m_N_d;d++){U& m_bd = m_b[d];for(int i = i_min;i < i_ulim;i++){m_bd = m_M.Product(m_bd,m_a[i]);}i_min = i_ulim;i_ulim += m_N_sqrt;}}TE <TY U,TY COMM_MONOID> TE <TY...Args> IN VO MonoidSqrtDecomposition<U,COMM_MONOID>::Initialise(Args&&... args){*TH = MonoidSqrtDecomposition<U,COMM_MONOID>(MO(m_M),forward<Args>(args)...);}TE <TY U,TY COMM_MONOID> IN VO MonoidSqrtDecomposition<U,COMM_MONOID>::Set(CRI i,CO U& u){CO int d = i / m_N_sqrt;CO int i_min = m_N_sqrt * d;CO int i_ulim = i_min + m_N_sqrt;m_a[i]= u;U& m_bd = m_b[d]= m_M.Zero();for(int i = i_min;i < i_ulim;i++){m_bd = m_M.Product(m_bd,m_a[i]);}RE;}TE <TY U,TY COMM_MONOID> IN VO MonoidSqrtDecomposition<U,COMM_MONOID>::Multiply(CRI i,CO U& u){U& m_ai = m_a[i];U& m_bd = m_b[i / m_N_sqrt];m_bd = m_M.Product(m_bd,u);m_ai = m_M.Product(m_ai,u);}TE <TY U,TY COMM_MONOID> IN CO U& MonoidSqrtDecomposition<U,COMM_MONOID>::OP[](CRI i)CO{AS(0 <= i && i < m_N);RE m_a[i];}TE <TY U,TY COMM_MONOID> IN CO U& MonoidSqrtDecomposition<U,COMM_MONOID>::Get(CRI i)CO{RE OP[](i);}TE <TY U,TY COMM_MONOID> IN U MonoidSqrtDecomposition<U,COMM_MONOID>::IntervalProduct(CRI i_start,CRI i_final){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,m_N);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int d_1 = max(d_0,i_ulim / m_N_sqrt);CO int i_0 = min(d_0 * m_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1 * m_N_sqrt);U AN = m_M.One();for(int i = i_min;i < i_0;i++){AN = m_M.Product(AN,m_a[i]);}for(int d = d_0;d < d_1;d++){AN = m_M.Product(AN,m_b[d]);}for(int i = i_1;i < i_ulim;i++){AN = m_M.Product(AN,m_a[i]);}RE AN;}TE <TY U,TY COMM_MONOID> TE <TY F,SFINAE_FOR_SD_S> IN int MonoidSqrtDecomposition<U,COMM_MONOID>::Search(CRI i_start,CO F& f){RE Search(i_start,f,m_M.Zero());}TE <TY U,TY COMM_MONOID> IN int MonoidSqrtDecomposition<U,COMM_MONOID>::Search(CRI i_start,CO U& u){RE Search(i_start,[&](CO U& prod,CRI){RE prod <= u;});}TE <TY U,TY COMM_MONOID> TE <TY F> int MonoidSqrtDecomposition<U,COMM_MONOID>::Search_Body(CRI i_start,CO F& f,U sum_temp){CO int i_min = max(i_start,0);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int i_0 = min(d_0 * m_N_sqrt,m_N);for(int i = i_min;i < i_0;i++){sum_temp = m_M.Product(sum_temp,m_a[i]);if(f(sum_temp,i)){RE i;}}for(int d = d_0;d < m_N_d;d++){U sum_next = m_M.Product(sum_temp,m_b[d]);if(f(sum_next,min((d + 1)* m_N_sqrt,m_N)- 1)){RE Search_Body(d * m_N_sqrt,f,sum_temp);}sum_temp = MO(sum_next);}RE -1;}

// ../../../../../Algebra/compress.txtÇêÊÇ…ì\ÇÈÅB

TE <TY R,TY U>CL VirtualModule{PU:VI U Action(CO R& r,CO U& u)= 0;IN U PW(CO U& u,CO R& r);IN U ScalarProduct(CO R& r,CO U& u);};TE <TY R,TY U,TY O_U,TY GROUP>CL AbstractModule:VI PU VirtualModule<R,U>,PU GROUP{PU:O_U m_o_U;IN AbstractModule(CO R& dummy,O_U o_U,GROUP M);IN U Action(CO R& r,CO U& u);};TE <TY R,TY O_U,TY GROUP> AbstractModule(CO R& dummy,O_U o_U,GROUP M)-> AbstractModule<R,inner_t<GROUP>,O_U,GROUP>;TE <TY R,TY U>CL Module:VI PU VirtualModule<R,U>,PU AdditiveGroup<U>{PU:IN U Action(CO R& r,CO U& u);};
TE <TY R,TY U,TY O_U,TY GROUP> IN AbstractModule<R,U,O_U,GROUP>::AbstractModule(CO R& dummy,O_U o_U,GROUP M):GROUP(MO(M)),m_o_U(MO(o_U)){ST_AS(is_same_v<U,inner_t<GROUP>> && is_invocable_r_v<U,O_U,R,U>);}TE <TY R,TY U,TY O_U,TY GROUP> IN U AbstractModule<R,U,O_U,GROUP>::Action(CO R& r,CO U& u){RE m_o_U(r,u);}TE <TY R,TY U> IN U Module<R,U>::Action(CO R& r,CO U& u){RE r * u;}TE <TY R,TY U> IN U VirtualModule<R,U>::PW(CO U& u,CO R& r){RE Action(r,u);}TE <TY R,TY U> IN U VirtualModule<R,U>::ScalarProduct(CO R& r,CO U& u){RE Action(r,u);}

IN CE int Sqrt(CRI N)NE{if(N <= 1){RE 1;}int left = 0;int right = N;WH(left + 1 < right){int m =(left + right)/ 2;(m <=(N - 1)/ m?left:right)= m;}RE right;}

TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE>CL LazySqrtDecomposition{PU:PT_MAGMA m_L;R_MODULE m_M;int m_N;int m_N_sqrt;int m_N_d;int m_N_m;VE<U> m_a;VE<U> m_b;VE<U> m_lazy_substitution;VE<bool> m_suspENed;VE<R> m_lazy_action;IN LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,CRI N = 0);IN LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,CRI N,CRI N_sqrt);IN LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,VE<U> a);IN LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,VE<U> a,CRI N_sqrt);TE <TY...Args> IN VO Reset(Args&&... args);IN VO Set(CRI i,CO U& u);IN VO IntervalSet(CRI i_start,CRI i_final,CO U& u);IN VO IntervalAct(CRI i_start,CRI i_final,CO R& r);IN U OP[](CRI i);IN U Get(CRI i);IN U IntervalProduct(CRI i_start,CRI i_final);IN VO Initialise();IN VO SetProduct(CRI i);IN VO SolveSuspENedSubstitution(CRI d,CO U& u);IN VO IntervalSet_Body(CRI i_min,CRI i_ulim,CO U& u);IN VO SolveSuspENedAction(CRI d);IN VO IntervalAct_Body(CRI i_min,CRI i_ulim,CO R& r);IN U IntervalProduct_Body(CRI i_min,CRI i_ulim);};TE <TY PT_MAGMA,TY R_MODULE,TY...Args> LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,CO Args&... args)-> LazySqrtDecomposition<inner_t<PT_MAGMA>,PT_MAGMA,inner_t<R_MODULE>,R_MODULE>;
TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,CRI N):LazySqrtDecomposition(MO(L),MO(M),N,Sqrt(N)){}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,CRI N,CRI N_sqrt):m_L(MO(L)),m_M(MO(M)),m_N(N),m_N_sqrt(N_sqrt),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(N,m_M.One()),m_b(m_N_d,m_M.One()),m_lazy_substitution(m_b),m_suspENed(m_N_d),m_lazy_action(m_N_d,m_L.Point()){Initialise();}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,VE<U> a):m_L(MO(L)),m_M(MO(M)),m_N(a.SZ()),m_N_sqrt(Sqrt(m_N)),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(MO(a)),m_b(m_N_d,m_M.One()),m_lazy_substitution(m_b),m_suspENed(m_N_d),m_lazy_action(m_N_d,m_L.Point()){Initialise();}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::LazySqrtDecomposition(PT_MAGMA L,R_MODULE M,VE<U> a,CRI N_sqrt):m_L(MO(L)),m_M(MO(M)),m_N(a.SZ()),m_N_sqrt(N_sqrt),m_N_d((m_N + m_N_sqrt - 1)/ m_N_sqrt),m_N_m(m_N_d * m_N_sqrt),m_a(MO(a)),m_b(m_N_d,m_M.One()),m_lazy_substitution(m_b),m_suspENed(m_N_d),m_lazy_action(m_N_d,m_L.Point()){Initialise();}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::Initialise(){ST_AS(is_same_v<R,inner_t<PT_MAGMA>> && is_same_v<U,inner_t<R_MODULE>>);m_a.reSZ(m_N_m,m_M.One());int i_min = 0;int i_ulim = m_N_sqrt;for(int d = 0;d < m_N_d;d++){U& m_bd = m_b[d];for(int i = i_min;i < i_ulim;i++){m_bd = m_M.Product(m_bd,m_a[i]);}i_min = i_ulim;i_ulim += m_N_sqrt;}}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> TE <TY...Args> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::Reset(Args&&...args){*TH = LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>(MO(m_L),MO(m_M),forward<Args>(args)...);}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::Set(CRI i,CO U& u){CO int d = i / m_N_sqrt;CO int i_min = d * m_N_sqrt;CO int i_ulim = i_min + m_N_sqrt;U& m_ai = m_a[i];if(m_suspENed[d]){U& m_lazy_substitution_d = m_lazy_substitution[d];if(m_lazy_substitution_d != u){SolveSuspENedSubstitution(d,m_lazy_substitution_d);m_ai = u;m_b[d]= m_M.Product(m_M.Product(m_M.PW(m_lazy_substitution_d,i - i_min),u),m_M.PW(m_lazy_substitution_d,i_ulim -(i + 1)));}}else{SolveSuspENedAction(d);if(m_ai != u){m_ai = u;SetProduct(d);}}RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::IntervalSet(CRI i_start,CRI i_final,CO U& u){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,m_N);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int d_1 = max(d_0,i_ulim / m_N_sqrt);CO int d_0_N_sqrt = d_0 * m_N_sqrt;CO int d_1_N_sqrt = d_1 * m_N_sqrt;CO int i_0 = min(d_0_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1_N_sqrt);if(i_min < i_0){CO int d_0_minus = d_0 - 1;CO int d_0_N_sqrt_minus = d_0_N_sqrt - m_N_sqrt;U& m_bd = m_b[d_0_minus];VE<bool>::reference m_suspENed_d = m_suspENed[d_0_minus];if(m_suspENed_d){U& m_lazy_substitution_d = m_lazy_substitution[d_0_minus];IntervalSet_Body(d_0_N_sqrt_minus,i_min,m_lazy_substitution_d);IntervalSet_Body(i_min,i_0,u);IntervalSet_Body(i_0,d_0_N_sqrt,m_lazy_substitution_d);m_suspENed_d = false;m_bd = m_M.Product(m_M.Product(m_M.PW(m_lazy_substitution_d,i_min - d_0_N_sqrt_minus),m_M.PW(u,i_0 - i_min)),m_M.PW(m_lazy_substitution_d,d_0_N_sqrt - i_0));}else{SolveSuspENedAction(d_0_minus);IntervalSet_Body(i_min,i_0,u);m_bd = m_M.Product(m_M.Product(IntervalProduct_Body(d_0_N_sqrt_minus,i_min),m_M.PW(u,i_0 - i_min)),IntervalProduct_Body(i_0,d_0_N_sqrt));}}CO U PW = m_M.PW(u,m_N_sqrt);for(int d = d_0;d < d_1;d++){m_b[d]= PW;m_lazy_substitution[d]= u;m_suspENed[d]= true;m_lazy_action[d]= m_L.Point();}if(i_1 < i_ulim){CO int d_1_N_sqrt_plus = d_1_N_sqrt + m_N_sqrt;U& m_bd = m_b[d_1];VE<bool>::reference m_suspENed_d = m_suspENed[d_1];if(m_suspENed_d){U& m_lazy_substitution_d = m_lazy_substitution[d_1];IntervalSet_Body(d_1_N_sqrt,i_1,m_lazy_substitution_d);IntervalSet_Body(i_1,i_ulim,u);IntervalSet_Body(i_ulim,d_1_N_sqrt_plus,m_lazy_substitution_d);m_suspENed_d = false;m_bd = m_M.Product(m_M.Product(m_M.PW(m_lazy_substitution_d,i_1 - d_1_N_sqrt),m_M.PW(u,i_ulim - i_1)),m_M.PW(m_lazy_substitution_d,d_1_N_sqrt_plus - i_ulim));}else{SolveSuspENedAction(d_1);IntervalSet_Body(i_1,i_ulim,u);m_bd = m_M.Product(m_M.Product(IntervalProduct_Body(d_1_N_sqrt,i_1),m_M.PW(u,i_ulim - i_1)),IntervalProduct_Body(i_ulim,d_1_N_sqrt_plus));}}RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::IntervalAct(CRI i_start,CRI i_final,CO R& r){if(r != m_L.Point()){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,m_N);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int d_1 = max(d_0,i_ulim / m_N_sqrt);CO int d_0_N_sqrt = d_0 * m_N_sqrt;CO int d_1_N_sqrt = d_1 * m_N_sqrt;CO int i_0 = min(d_0_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1_N_sqrt);if(i_min < i_0){CO int d_0_minus = d_0 - 1;CO int d_0_N_sqrt_minus = d_0_N_sqrt - m_N_sqrt;VE<bool>::reference m_suspENed_d = m_suspENed[d_0_minus];if(m_suspENed_d){U& m_lazy_substitution_d = m_lazy_substitution[d_0_minus];U& m_bd = m_b[d_0_minus];CO U u = m_M.Action(r,m_lazy_substitution_d);IntervalSet_Body(d_0_N_sqrt_minus,i_min,m_lazy_substitution_d);IntervalSet_Body(i_min,i_0,u);IntervalSet_Body(i_0,d_0_N_sqrt,m_lazy_substitution_d);m_suspENed_d = false;m_bd = m_M.Product(m_M.Product(m_M.PW(m_lazy_substitution_d,i_min - d_0_N_sqrt_minus),m_M.PW(u,i_0 - i_min)),m_M.PW(m_lazy_substitution,d_0_N_sqrt - i_0));}else{R& m_lazy_action_d = m_lazy_action[d_0_minus];if(m_lazy_action_d == m_L.Point()){IntervalAct_Body(i_min,i_0,r);}else{IntervalAct_Body(d_0_N_sqrt_minus,i_min,m_lazy_action_d);IntervalAct_Body(i_min,i_0,m_R(r,m_lazy_action_d));IntervalAct_Body(i_0,d_0_N_sqrt,m_lazy_action_d);m_lazy_action_d = m_L.Point();}SetProduct(d_0_minus);}}for(int d = d_0;d < d_1;d++){U& m_bd = m_b[d];m_bd = m_M.Action(r,m_bd);if(m_suspENed[d]){U& m_lazy_substitution_d = m_lazy_substitution[d];m_lazy_substitution_d = m_M.Action(r,m_lazy_substitution_d);}else{R& m_lazy_action_d = m_lazy_action[d];m_lazy_action_d = m_R(r,m_lazy_action_d);}}if(i_1 < i_ulim){CO int d_1_N_sqrt_plus = d_1_N_sqrt + m_N_sqrt;VE<bool>::reference m_suspENed_d = m_suspENed[d_1];if(m_suspENed_d){U& m_lazy_substitution_d = m_lazy_substitution[d_1];U& m_bd = m_b[d_1];CO U u = m_M.Action(r,m_lazy_substitution_d);IntervalSet_Body(d_1_N_sqrt,i_1,m_lazy_substitution_d);IntervalSet_Body(i_1,i_ulim,u);IntervalSet_Body(i_ulim,d_1_N_sqrt_plus,m_lazy_substitution_d);m_suspENed_d = false;m_bd = m_M.Product(m_M.Product(m_M.PW(m_lazy_substitution_d,i_1 - d_1_N_sqrt),m_M.PW(u,i_ulim - i_1)),m_M.PW(m_lazy_substitution,d_1_N_sqrt_plus - i_ulim));}else{R& m_lazy_action_d = m_lazy_action[d_1];if(m_lazy_action_d == m_L.Point()){IntervalAct_Body(i_1,i_ulim,r);SetProduct(d_1);}else{IntervalAct_Body(d_1_N_sqrt,i_1,m_lazy_action_d);IntervalAct_Body(i_1,i_ulim,m_R(r,m_lazy_action_d));IntervalAct_Body(i_ulim,d_1_N_sqrt_plus,m_lazy_action_d);m_lazy_action_d = m_L.Point();SetProduct(d_1);}}}}RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN U LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::IntervalProduct_Body(CRI i_min,CRI i_ulim){U AN = m_M.One();for(int i = i_min;i < i_ulim;i++){AN = m_M.Product(AN,m_a[i]);}RE AN;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::SetProduct(CRI d){U& m_bd = m_b[d]= m_M.One();CO int i_min = d * m_N_sqrt;CO int i_ulim = i_min + m_N_sqrt;for(int i = i_min;i < i_ulim;i++){m_bd = m_M.Product(m_bd,m_a[i]);}RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::SolveSuspENedSubstitution(CRI d,CO U& u){CO int i_min = d * m_N_sqrt;IntervalSet_Body(i_min,i_min + m_N_sqrt,u);m_suspENed[d]= false;RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::IntervalSet_Body(CRI i_min,CRI i_ulim,CO U& u){for(int i = i_min;i < i_ulim;i++){m_a[i]= u;}RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::SolveSuspENedAction(CRI d){R& m_lazy_action_d = m_lazy_action[d];if(m_lazy_action_d != m_L.Point()){CO int i_min = d * m_N_sqrt;CO int i_ulim = i_min + m_N_sqrt;IntervalAct_Body(i_min,i_ulim,m_lazy_action_d);U& m_bd = m_b[d];m_bd = m_M.Action(m_lazy_action_d,m_bd);m_lazy_action_d = m_L.Point();}RE;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN U LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::OP[](CRI i){AS(0 <= i && i < m_N);CO int d = i / m_N_sqrt;RE m_suspENed[d]?m_lazy_substitution[d]:m_M.Action(m_lazy_action[d],m_a[i]);}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN U LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::Get(CRI i){RE OP[](i);}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN U LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::IntervalProduct(CRI i_start,CRI i_final){CO int i_min = max(i_start,0);CO int i_ulim = min(i_final + 1,m_N);CO int d_0 =(i_min + m_N_sqrt - 1)/ m_N_sqrt;CO int d_1 = max(d_0,i_ulim / m_N_sqrt);CO int i_0 = min(d_0 * m_N_sqrt,i_ulim);CO int i_1 = max(i_0,d_1 * m_N_sqrt);U AN = m_M.One();if(i_min < i_0){CO int d_0_minus = d_0 - 1;AN = m_suspENed[d_0_minus]?m_M.PW(m_lazy_substitution[d_0_minus],i_0 - i_min):m_M.Action(m_lazy_action[d_0_minus],IntervalProduct_Body(i_min,i_0));}for(int d = d_0;d < d_1;d++){AN = m_M.Product(AN,m_b[d]);}if(i_1 < i_ulim){AN = m_M.Product(AN,m_suspENed[d_1]?m_M.PW(m_lazy_substitution[d_1],i_ulim - i_1):m_M.Action(m_lazy_action[d_1],IntervalProduct_Body(i_1,i_ulim)));}RE AN;}TE <TY R,TY PT_MAGMA,TY U,TY R_MODULE> IN VO LazySqrtDecomposition<R,PT_MAGMA,U,R_MODULE>::IntervalAct_Body(CRI i_min,CRI i_ulim,CO R& r){for(int i = i_min;i < i_ulim;i++){U& m_ai = m_a[i];m_ai = m_M.Action(r,m_ai);}RE;}

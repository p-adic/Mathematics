TE<int N>CL PWInverse_CE{PU:int m_val;CE PWInverse_CE();};
TE<int N>CE PWInverse_CE<N>::PWInverse_CE():m_val(1){WH(m_val < N){m_val <<= 1;}}
TE <TY T,int N>CL BIT{PU:T m_fenwick[N + 1];IN BIT();BIT(CO T(&a)[N]);IN T Get(CRI i)CO;IN VO Set(CRI i,CO T& n);IN VO Set(CO T(&a)[N]);IN VO Initialise();IN BIT<T,N>& OP+=(CO T(&a)[N]);VO Add(CRI i,CO T& n);T InitialSegmentSum(CRI i_final)CO;IN T IntervalSum(CRI i_start,CRI i_final)CO;int BinarySearch(CO T& n)CO;IN int BinarySearch(CRI i_start,CO T& n)CO;};
TE <TY T,int N> IN BIT<T,N>::BIT():m_fenwick(){static_assert(! is_same<T,int>::value);}TE <TY T,int N>BIT<T,N>::BIT(CO T(&a)[N]):m_fenwick(){static_assert(! is_same<T,int>::value);for(int j = 1;j <= N;j++){T& fenwick_j = m_fenwick[j];int i = j - 1;fenwick_j = a[i];int i_lim = j -(j & -j);WH(i != i_lim){fenwick_j += m_fenwick[i];i -=(i & -i);}}}TE <TY T,int N> IN T BIT<T,N>::Get(CRI i)CO{RE IntervalSum(i,i);}TE <TY T,int N> IN VO BIT<T,N>::Set(CRI i,CO T& n){Add(i,n - IntervalSum(i,i));}TE <TY T,int N> IN VO BIT<T,N>::Set(CO T(&a)[N]){BIT<T,N> a_copy{a};swap(m_fenwick,a_copy.m_fenwick);}TE <TY T,int N> IN VO BIT<T,N>::Initialise(){for(int j = 1;j <= N;j++){m_fenwick[i] = 0;}}TE <TY T,int N> IN BIT<T,N>& BIT<T,N>::OP+=(CO T(&a)[N]){for(int i = 0;i < N;i++){Add(i,a[i]);}RE *TH;}TE <TY T,int N>VO BIT<T,N>::Add(CRI i,CO T& n){int j = i + 1;WH(j <= N){m_fenwick[j] += n;j +=(j & -j);}RE;}TE <TY T,int N>T BIT<T,N>::InitialSegmentSum(CRI i_final)CO{T sum = 0;int j =(i_final < N?i_final:N - 1)+ 1;WH(j > 0){sum += m_fenwick[j];j -= j & -j;}RE sum;}TE <TY T,int N> IN T BIT<T,N>::IntervalSum(CRI i_start,CRI i_final)CO{RE InitialSegmentSum(i_final)- InitialSegmentSum(i_start - 1);}TE <TY T,int N>int BIT<T,N>::BinarySearch(CO T& n)CO{int j = 0;int PW = PWInverse_CE<N>().m_val;T sum{};T sum_next{};WH(PW > 0){int j_next = j | PW;if(j_next < N){sum_next += m_fenwick[j_next];if(sum_next < n){sum = sum_next;j = j_next;}else{sum_next = sum;}}PW >>= 1;}RE j;}TE <TY T,int N> IN int BIT<T,N>::BinarySearch(CRI i_start,CO T& n)CO{RE max(i_start,BinarySearch(InitialSegmentSum(i_start)+ n));}
TE <TY T,int N>CL IntervalAddBIT{PU:BIT<T,N> m_bit_0;BIT<T,N> m_bit_1;IN IntervalAddBIT();IN IntervalAddBIT(CO T(&a)[N]);IN T Get(CRI i)CO;IN VO Set(CRI i,CO T& n);IN VO Set(CO T(&a)[N]);IN VO Initialise();IN IntervalAddBIT<T,N>& OP+=(CO T(&a)[N]);IN VO Add(CRI i,CO T& n);IN VO IntervalAdd(CRI i_start,CRI i_final,CO T& n);IN T InitialSegmentSum(CRI i_final)CO;IN T IntervalSum(CRI i_start,CRI i_final)CO;};
TE <TY T,int N> IN IntervalAddBIT<T,N>::IntervalAddBIT():m_bit_0(),m_bit_1(){}TE <TY T,int N> IN IntervalAddBIT<T,N>::IntervalAddBIT(CO T(&a)[N]):m_bit_0(),m_bit_1(){OP+=(a);}TE <TY T,int N> IN T IntervalAddBIT<T,N>::Get(CRI i)CO{RE IntervalSum(i,i);}TE <TY T,int N> IN VO IntervalAddBIT<T,N>::Set(CRI i,CO T& n){Add(i,n - IntervalSum(i,i));}TE <TY T,int N> IN VO IntervalAddBIT<T,N>::Set(CO T(&a)[N]){IntervalAddBIT<T,N> a_copy{a};swap(m_bit_0,a_copy.m_bit_0);swap(m_bit_1,a_copy.m_bit_1);}TE <TY T,int N> IN VO IntervalAddBIT<T,N>::Initialise(){m_bit_0.Initialise();m_bit_1.Initialise();}TE <TY T,int N> IN IntervalAddBIT<T,N>& IntervalAddBIT<T,N>::OP+=(CO T(&a)[N]){for(int i = 0;i < N;i++){Add(i,a[i]);}RE *TH;}TE <TY T,int N> IN VO IntervalAddBIT<T,N>::Add(CRI i,CO T& n){IntervalAdd(i,i,n);}TE <TY T,int N> IN VO IntervalAddBIT<T,N>::IntervalAdd(CRI i_start,CRI i_final,CO T& n){m_bit_0.Add(i_start,-(i_start - 1)* n);m_bit_0.Add(i_final + 1,i_final * n);m_bit_1.Add(i_start,n);m_bit_1.Add(i_final + 1,- n);}TE <TY T,int N> IN T IntervalAddBIT<T,N>::InitialSegmentSum(CRI i_final)CO{RE m_bit_0.InitialSegmentSum(i_final)+ i_final * m_bit_1.InitialSegmentSum(i_final);}TE <TY T,int N> IN T IntervalAddBIT<T,N>::IntervalSum(CRI i_start,CRI i_final)CO{RE InitialSegmentSum(i_final)- InitialSegmentSum(i_start - 1);}

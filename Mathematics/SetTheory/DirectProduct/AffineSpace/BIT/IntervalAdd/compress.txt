TE <TY U>CL BIT{PU:int m_SZ;VE<U> m_fenwick;int m_PW;IN BIT(CRI SZ = 0);BIT(CO VE<U>& a);IN VO Set(CRI i,CO U& u);IN VO Set(CO VE<U>& a);IN VO Initialise(CRI SZ = 0);IN BIT<U>& OP+=(CO VE<U>& a);VO Add(CRI i,CO U& u);IN CRI SZ()CO NE;IN U OP[](CRI i)CO;IN U Get(CRI i)CO;IN CO U& LSBSegmentSum(CRI j)CO;U InitialSegmentSum(CRI i_final)CO;IN U IntervalSum(CRI i_start,CRI i_final)CO;int BinarySearch(CO U& u)CO;IN int BinarySearch(CRI i_start,CO U& u)CO;};
TE <TY U> IN BIT<U>::BIT(CRI SZ):m_SZ(SZ),m_fenwick(m_SZ + 1),m_PW(1){ST_AS(! is_same<U,int>::value);WH(m_PW < m_SZ){m_PW <<= 1;}}TE <TY U>BIT<U>::BIT(CO VE<U>& a):BIT(a.SZ()){for(int j = 1;j <= m_SZ;j++){U& fenwick_j = m_fenwick[j];int i = j - 1;fenwick_j = a[i];int i_lim = j -(j & -j);WH(i > i_lim){fenwick_j += m_fenwick[i];i -=(i & -i);}}}TE <TY U> IN VO BIT<U>::Set(CRI i,CO U& u){Add(i,u - IntervalSum(i,i));}TE <TY U> IN VO BIT<U>::Set(CO VE<U>& a){*TH = BIT<U>{a};}TE <TY U> IN VO BIT<U>::Initialise(CRI SZ){*TH = BIT<U>(SZ);}TE <TY U> IN BIT<U>& BIT<U>::OP+=(CO VE<U>& a){BIT<U> a_copy{a};AS(m_SZ == a.m_SZ);for(int j = 1;j <= m_SZ;j++){m_fenwick[j]+= a.m_fenwick[j];}RE *TH;}TE <TY U>VO BIT<U>::Add(CRI i,CO U& u){AS(0 <= i && i < m_SZ);int j = i + 1;WH(j <= m_SZ){m_fenwick[j]+= u;j +=(j & -j);}RE;}TE <TY U> IN CRI BIT<U>::SZ()CO NE{RE m_SZ;}TE <TY U> IN U BIT<U>::OP[](CRI i)CO{AS(0 <= i && i < m_SZ);RE IntervalSum(i,i);}TE <TY U> IN U BIT<U>::Get(CRI i)CO{RE OP[](i);}TE <TY U> IN CO U& BIT<U>::LSBSegmentSum(CRI j)CO{AS(0 < j && j <= m_SZ);RE m_fenwick[j];}TE <TY U>U BIT<U>::InitialSegmentSum(CRI i_final)CO{U sum = 0;int j =(i_final < m_SZ?i_final:m_SZ - 1)+ 1;WH(j > 0){sum += m_fenwick[j];j -= j & -j;}RE sum;}TE <TY U> IN U BIT<U>::IntervalSum(CRI i_start,CRI i_final)CO{RE InitialSegmentSum(i_final)- InitialSegmentSum(i_start - 1);}TE <TY U>int BIT<U>::BinarySearch(CO U& u)CO{int PW = m_PW;int j = 0;U sum{};U sum_next{};WH(PW > 0){int j_next = j | PW;if(j_next < m_SZ){sum_next += m_fenwick[j_next];if(sum_next < u){sum = sum_next;j = j_next;}else{sum_next = sum;}}PW >>= 1;}RE j;}TE <TY U> IN int BIT<U>::BinarySearch(CRI i_start,CO U& u)CO{RE max(i_start,BinarySearch(InitialSegmentSum(i_start - 1)+ u));}

TE <TY U>CL IntervalAddBIT{PU:BIT<U> m_bit_0;BIT<U> m_bit_1;IN IntervalAddBIT(CRI SZ = 0);IN IntervalAddBIT(CO VE<U>& a);IN VO Set(CRI i,CO U& u);IN VO Set(CO VE<U>& a);IN VO Initialise(CRI SZ = 0);IN IntervalAddBIT<U>& OP+=(CO VE<U>& a);IN VO Add(CRI i,CO U& u);IN VO IntervalAdd(CRI i_start,CRI i_final,CO U& u);IN CRI SZ()CO NE;IN U OP[](CRI i)CO;IN U Get(CRI i)CO;IN U InitialSegmentSum(CRI i_final)CO;IN U IntervalSum(CRI i_start,CRI i_final)CO;};
TE <TY U> IN IntervalAddBIT<U>::IntervalAddBIT(CRI SZ):m_bit_0(SZ),m_bit_1(SZ){}TE <TY U> IN IntervalAddBIT<U>::IntervalAddBIT(CO VE<U>& a):m_bit_0(),m_bit_1(){CO int SZ = a.SZ();VE<U> diff(SZ);diff[0]= a[0];for(int i = 1;i < SZ;i++){diff[i]= a[i]- a[i-1];}m_bit_0.Set(diff);for(int i = 1;i < SZ;i++){(diff[i]*= 1 - i)-= a[i];}m_bit_1.Set(diff);}TE <TY U> IN VO IntervalAddBIT<U>::Set(CRI i,CO U& u){Add(i,u - IntervalSum(i,i));}TE <TY U> IN VO IntervalAddBIT<U>::Set(CO VE<U>& a){*TH = IntervalAddBIT<U>(a);}TE <TY U> IN VO IntervalAddBIT<U>::Initialise(CRI SZ){m_bit_0.Initialise(SZ);m_bit_1.Initialise(SZ);}TE <TY U> IN IntervalAddBIT<U>& IntervalAddBIT<U>::OP+=(CO VE<U>& a){IntervalAddBIT<U> a_copy{a};m_bit_0 += a_copy.m_bit_0;m_bit_1 += a_copy.m_bit_1;RE *TH;}TE <TY U> IN VO IntervalAddBIT<U>::Add(CRI i,CO U& u){IntervalAdd(i,i,u);}TE <TY U> IN VO IntervalAddBIT<U>::IntervalAdd(CRI i_start,CRI i_final,CO U& u){m_bit_0.Add(i_start,-(i_start - 1)* u);m_bit_0.Add(i_final + 1,i_final * u);m_bit_1.Add(i_start,u);m_bit_1.Add(i_final + 1,- u);}TE <TY U> IN CRI IntervalAddBIT<U>::SZ()CO NE{RE m_bit_0.SZ();}TE <TY U> IN U IntervalAddBIT<U>::OP[](CRI i)CO{AS(0 <= i && i < SZ());RE IntervalSum(i,i);}TE <TY U> IN U IntervalAddBIT<U>::Get(CRI i)CO{RE OP[](i);}TE <TY U> IN U IntervalAddBIT<U>::InitialSegmentSum(CRI i_final)CO{RE m_bit_0.InitialSegmentSum(i_final)+ i_final * m_bit_1.InitialSegmentSum(i_final);}TE <TY U> IN U IntervalAddBIT<U>::IntervalSum(CRI i_start,CRI i_final)CO{RE InitialSegmentSum(i_final)- InitialSegmentSum(i_start - 1);}

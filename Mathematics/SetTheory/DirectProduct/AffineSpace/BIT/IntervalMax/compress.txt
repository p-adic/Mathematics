TE<int N>CL PWInverse_CE{PU:int m_val;CE PWInverse_CE();};
TE<int N>CE PWInverse_CE<N>::PWInverse_CE():m_val(1){WH(m_val < N){m_val <<= 1;}}
#define DC_OF_INTERVAL_MAX_BIT(MAX)TE <TY T,int N> CL Interval ## MAX ## BIT{private:T m_init;T m_a[N];T m_fenwick_0[N + 1];T m_fenwick_1[N + 1];IN Interval ## MAX ## BIT(CO T& n = T());IN Interval ## MAX ## BIT(CO T& n,CO T(&a)[N]);IN Interval ## MAX ## BIT(CO T& n,T(&&a)[N]);IN CO T& OP[](CRI i)CO;IN CO T& Get(CRI i)CO;T Interval ## MAX(CRI i_start,CRI i_final)CO;VO Set(CRI i,CO T& n);VO Set(CO T& n,T(&&a)[N]);VO Set ## MAX(CRI i,CO T& n);VO IntervalSet ## MAX(CRI i_start,CRI i_final,CO T& n);VO Initialise(CO T& n);int BinarySearch(CO T& n)CO;};
#define DF_OF_INTERVAL_MAX_BIT(MAX,INEQUALITY,OP)TE <TY T,int N> IN Interval ## MAX ## BIT<T,N>::Interval ## MAX ## BIT(CO T& n):m_init(n),m_a(),m_fenwick_0(),m_fenwick_1(){if(m_a[0] != m_init){for(int i = 0;i < N;i++){m_a[i] = m_fenwick_0[i+1] = m_fenwick_1[i+1] = m_init;}}}TE <TY T,int N> IN Interval ## MAX ## BIT<T,N>::Interval ## MAX ## BIT(CO T& n,CO T(&a)[N]):m_init(n),m_a(),m_fenwick_0(),m_fenwick_1(){for(int i = 0;i < N;i++){m_a[i] = a[i];}for(int i = 0;i < N;i++){int j = i + 1;T& fenwick_0i = m_fenwick_0[j];fenwick_0i = m_a[i];CO int j_llim = j -(j & -j);j--;while(j > j_llim){CO T& tj = m_fenwick_0[j];fenwick_0i INEQUALITY tj?fenwick_0i = tj:fenwick_0i;j -=(j & -j);}}for(int i = N - 1;i >= 0;i--){int j = i + 1;T& fenwick_1i = m_fenwick_1[j];fenwick_1i = m_a[i];CO int j_ulim = min(j +(j & -j),N + 1);j++;while(j < j_ulim){CO T& tj = m_fenwick_1[j];fenwick_1i INEQUALITY tj?fenwick_1i = tj:fenwick_1i;j +=(j & -j);}}}TE <TY T,int N> IN Interval ## MAX ## BIT<T,N>::Interval ## MAX ## BIT(CO T& n,T(&&a)[N]):m_init(n),m_a(),m_fenwick_0(),m_fenwick_1(){swap(m_a,a);for(int i = 0;i < N;i++){int j = i + 1;T& fenwick_0i = m_fenwick_0[j];fenwick_0i = m_a[i];CO int j_llim = j -(j & -j);j--;while(j > j_llim){CO T& tj = m_fenwick_0[j];fenwick_0i INEQUALITY tj?fenwick_0i = tj:fenwick_0i;j -=(j & -j);}}for(int i = N - 1;i >= 0;i--){int j = i + 1;T& fenwick_1i = m_fenwick_1[j];fenwick_1i = m_a[i];CO int j_ulim = min(j +(j & -j),N + 1);j++;while(j < j_ulim){CO T& tj = m_fenwick_1[j];fenwick_1i INEQUALITY tj?fenwick_1i = tj:fenwick_1i;j +=(j & -j);}}}TE <TY T,int N> IN CO T& Interval ## MAX ## BIT<T,N>::OP[](CRI i)CO{RE m_a[i];}TE <TY T,int N> IN CO T& Interval ## MAX ## BIT<T,N>::Get(CRI i)CO{RE m_a[i];}TE <TY T,int N> T Interval ## MAX ## BIT<T,N>::Interval ## MAX(CRI i_start,CRI i_final)CO{T AN = m_init;CO int j_min = i_start < 0?1:i_start + 1;CO int j_max = i_final < N?i_final + 1:N;int j = j_min;int j_next = j +(j & - j);while(j_next <= j_max){CO T& tj = m_fenwick_1[j];AN INEQUALITY tj?AN = tj:AN;j = j_next;j_next +=(j & -j);}CO T& a_centre = m_a[j-1];(j_min <= j_max && AN INEQUALITY a_centre)?AN = a_centre:AN;j = j_max;j_next = j -(j & - j);while(j_next >= j_min){CO T& tj = m_fenwick_0[j];AN INEQUALITY tj?AN = tj:AN;j = j_next;j_next -=(j & -j);}RE AN;}TE <TY T,int N> VO Interval ## MAX ## BIT<T,N>::Set(CRI i,CO T& n){T& ai = m_a[i];if(n INEQUALITY ai){int j = i + 1;while(j <= N){CO int lsb =(j & -j);m_fenwick_0[j] = OP(OP(Interval ## MAX(j - lsb + 1,i - 1),n),Interval ## MAX(i + 1,j));j += lsb;}j = i + 1;while(j > 0){CO int lsb =(j & -j);m_fenwick_0[j] = OP(OP(Interval ## MAX(j,i - 1),n),Interval ## MAX(i + 1,j + lsb - 1));j -= lsb;}ai = n;}else{Set ## MAX(i,n);}RE;}TE <TY T,int N> VO Interval ## MAX ## BIT<T,N>::Initialise(CO T& n){m_init = n;for(int i = 0;i < N;i++){m_a[i] = m_fenwick_0[i+1] = m_fenwick_1[i+1] = m_init;}RE;}TE <TY T,int N> VO Interval ## MAX ## BIT<T,N>::Set(CO T& n,T(&&a)[N]){Interval ## MAX ## BIT<T,N> a_copy{n,MO(a)};swap(m_init,a_copy.m_init);swap(m_a,a_copy.m_a);swap(m_fenwick_0,a_copy.m_fenwick_0);swap(m_fenwick_1,a_copy.m_fenwick_1);RE;}TE <TY T,int N> VO Interval ## MAX ## BIT<T,N>::Set ## MAX(CRI i,CO T& n){T& ai = m_a[i];ai INEQUALITY n?ai = n:ai;int j = i + 1;while(j <= N){T& tj = m_fenwick_0[j];tj INEQUALITY n?tj = n:tj;j +=(j & -j);}j = i + 1;while(j > 0){T& tj = m_fenwick_1[j];tj INEQUALITY n?tj = n:tj;j -=(j & -j);}RE;}TE <TY T,int N> VO Interval ## MAX ## BIT<T,N>::IntervalSet ## MAX(CRI i_start,CRI i_final,CO T& n){CO int j_min = max(i_start + 1,1);CO int j_max = min(i_final + 1,N);for(int i = j_min - 1;i < j_max;i++){T& ai = m_a[i];ai INEQUALITY n?ai = n:ai;}CO int j_llim = j_min -(j_min & -j_min);CO int j_ulim = min(j_max +(j_max & j_max),N + 1);if(j_min <= j_max){int j = j_min;while(j < j_ulim){if(j -(j & -j)< j_max){T& tj = m_fenwick_0[j];tj INEQUALITY n?tj = n:tj;}j++;}j = j_max;while(j > j_llim){if(j +(j & -j)> j_min){T& tj = m_fenwick_0[j];tj INEQUALITY n?tj = n:tj;}j--;}}RE;}
#define DF_OF_BINARY_SEARCH_FOR_INTERVAL_MAX_BIT(MAX,INEQUALITY)TE <TY T,int N> VO Interval ## MAX ## BIT<T,N> int BIT<T>::BinarySearch(CO T& n)CO{int j = 0;int PW = PWInverse_CE<N>().m_val;T temp{};T temp_next{};while(PW > 0){int j_next = j | PW;if(j_next < m_N){CO T& fenwick_j_next = m_fenwick[j_next];temp_next INEQUALITY fenwick_j_next?temp_next = fenwick_j_next:temp;if(temp_next INEQUALITY n){temp = temp_next;j = j_next;}else{temp_next = temp;}}PW >>= 1;}RE j;}
DC_OF_INTERVAL_MAX_BIT(Max);DC_OF_INTERVAL_MAX_BIT(Min);
DF_OF_INTERVAL_MAX_BIT(Max,<,max);DF_OF_INTERVAL_MAX_BIT(Min,>,min);DF_OF_BINARY_SEARCH_FOR_INTERVAL_MAX_BIT(Max,<);DF_OF_BINARY_SEARCH_FOR_INTERVAL_MAX_BIT(Min,>);

#define DC_OF_INTERVAL_MAX_BIT(MAX)TE <TY T> CL Interval ## MAX ## BIT{PU:int m_SZ;T m_init;VE<T> m_a;VE<T> m_fenwick_0;VE<T> m_fenwick_1;int m_PW;IN Interval ## MAX ## BIT(CRI SZ = 0,CO T& n = T());IN Interval ## MAX ## BIT(CO T& n,VE<T> a);IN Interval ## MAX ## BIT<T>& OP=(Interval ## MAX ## BIT<T>&& a);IN CO T& OP[](CRI i)CO;IN CO T& Get(CRI i)CO;IN CO T& LSBSegment ## MAX(CRI j,CO bool& left = true)CO;T Interval ## MAX(CRI i_start,CRI i_final)CO;VO Set(CRI i,CO T& n);IN VO Set(CO T& n,VE<T>&& a);VO Set ## MAX(CRI i,CO T& n);VO IntervalSet ## MAX(CRI i_start,CRI i_final,CO T& n);VO Initialise(CO T& n);int BinarySearch(CO T& n)CO;};
#define DF_OF_INTERVAL_MAX_BIT(MAX,INEQUALITY,OPR)TE <TY T> IN Interval ## MAX ## BIT<T>::Interval ## MAX ## BIT(CRI SZ,CO T& n):m_SZ(SZ),m_init(n),m_a(m_SZ,m_init),m_fenwick_0(m_SZ+1,m_init),m_fenwick_1(m_SZ+1,m_init),m_PW(1){WH(m_PW < m_SZ){m_PW <<= 1;}}TE <TY T> IN Interval ## MAX ## BIT<T>::Interval ## MAX ## BIT(CO T& n,VE<T> a):m_SZ(a.SZ()),m_init(n),m_a(MO(a)),m_fenwick_0(m_SZ+1),m_fenwick_1(m_SZ+1),m_PW(1){for(int i = 0;i < m_SZ;i++){int j = i + 1;T& fenwick_0i = m_fenwick_0[j];fenwick_0i = m_a[i];CO int j_llim = j -(j & -j);j--;WH(j > j_llim){CO T& tj = m_fenwick_0[j];fenwick_0i INEQUALITY tj?fenwick_0i = tj:fenwick_0i;j -=(j & -j);}}for(int i = m_SZ - 1;i >= 0;i--){int j = i + 1;T& fenwick_1i = m_fenwick_1[j];fenwick_1i = m_a[i];CO int j_ulim = min(j +(j & -j),m_SZ + 1);j++;WH(j < j_ulim){CO T& tj = m_fenwick_1[j];fenwick_1i INEQUALITY tj?fenwick_1i = tj:fenwick_1i;j +=(j & -j);}}WH(m_PW < m_SZ){m_PW <<= 1;}}TE <TY T> IN Interval ## MAX ## BIT<T>& Interval ## MAX ## BIT<T>::OP=(Interval ## MAX ## BIT<T>&& a){m_SZ = a.m_SZ;m_init = MO(a.m_init);m_a = MO(a.m_a);m_fenwick_0 = MO(m_fenwick_0);m_fenwick_1 = MO(m_fenwick_1);m_PW = a.m_PW;RE *TH;}TE <TY T> IN CO T& Interval ## MAX ## BIT<T>::OP[](CRI i)CO{RE m_a[i];}TE <TY T> IN CO T& Interval ## MAX ## BIT<T>::Get(CRI i)CO{RE m_a[i];}TE <TY T> IN CO T& Interval ## MAX ## BIT<T>::LSBSegment ## MAX(CRI j,CO bool& left)CO{assert(0 < j && j < m_SZ);RE(left?m_fenwick_0:m_fenwick_1)[j];}TE <TY T> T Interval ## MAX ## BIT<T>::Interval ## MAX(CRI i_start,CRI i_final)CO{T AN = m_init;CO int j_min = max(i_start + 1,1);CO int j_max = min(i_final + 1,m_SZ);int j = j_min;int j_next = j +(j & - j);WH(j_next <= j_max){CO T& tj = m_fenwick_1[j];AN INEQUALITY tj?AN = tj:AN;j = j_next;j_next +=(j & -j);}CO T& a_centre = m_a[j-1];(j_min <= j_max && AN INEQUALITY a_centre)?AN = a_centre:AN;j = j_max;j_next = j -(j & - j);WH(j_next >= j_min){CO T& tj = m_fenwick_0[j];AN INEQUALITY tj?AN = tj:AN;j = j_next;j_next -=(j & -j);}RE AN;}TE <TY T> VO Interval ## MAX ## BIT<T>::Set(CRI i,CO T& n){T& ai = m_a[i];if(n INEQUALITY ai){int j = i + 1;WH(j <= m_SZ){CO int lsb =(j & -j);m_fenwick_0[j] = OPR(OPR(Interval ## MAX(j - lsb,i - 1),n),Interval ## MAX(i + 1,j - 1));j += lsb;}j = i + 1;WH(j > 0){CO int lsb =(j & -j);m_fenwick_1[j] = OPR(OPR(Interval ## MAX(j - 1,i - 1),n),Interval ## MAX(i + 1,j + lsb - 2));j -= lsb;}ai = n;}else{Set ## MAX(i,n);}RE;}TE <TY T> VO Interval ## MAX ## BIT<T>::Initialise(CO T& n){m_init = n;for(int i = 0;i < m_SZ;i++){m_a[i] = m_fenwick_0[i+1] = m_fenwick_1[i+1] = m_init;}RE;}TE <TY T> IN VO Interval ## MAX ## BIT<T>::Set(CO T& n,VE<T>&& a){*TH = Interval ## MAX ## BIT<T>(n,MO(a));}TE <TY T> VO Interval ## MAX ## BIT<T>::Set ## MAX(CRI i,CO T& n){assert(i < m_SZ);T& ai = m_a[i];ai INEQUALITY n?ai = n:ai;int j = i + 1;WH(j <= m_SZ){T& tj = m_fenwick_0[j];tj INEQUALITY n?tj = n:tj;j +=(j & -j);}j = i + 1;WH(j > 0){T& tj = m_fenwick_1[j];tj INEQUALITY n?tj = n:tj;j -=(j & -j);}RE;}TE <TY T> VO Interval ## MAX ## BIT<T>::IntervalSet ## MAX(CRI i_start,CRI i_final,CO T& n){CO int j_min = max(i_start + 1,1);CO int j_max = min(i_final + 1,m_SZ);for(int i = j_min - 1;i < j_max;i++){T& ai = m_a[i];ai INEQUALITY n?ai = n:ai;}CO int j_llim = j_min -(j_min & -j_min);CO int j_ulim = min(j_max +(j_max & j_max) + 1,m_SZ+1);if(j_min <= j_max){int j = j_min;WH(j < j_ulim){if(j -(j & -j)< j_max){T& tj = m_fenwick_0[j];tj INEQUALITY n?tj = n:tj;}j++;}j = j_max;WH(j > j_llim){if(j +(j & -j)> j_min){T& tj = m_fenwick_0[j];tj INEQUALITY n?tj = n:tj;}j--;}}RE;}TE <TY T> int Interval ## MAX ## BIT<T>::BinarySearch(CO T& n)CO{int j = 0;int PW = m_PW;T temp{};T temp_next{};WH(PW > 0){int j_next = j | PW;if(j_next < m_SZ){CO T& fenwick_j_next = m_fenwick_0[j_next];temp_next INEQUALITY fenwick_j_next?temp_next = fenwick_j_next:temp;if(temp_next INEQUALITY n){temp = temp_next;j = j_next;}else{temp_next = temp;}}PW >>= 1;}RE j;}
DC_OF_INTERVAL_MAX_BIT(Max);DC_OF_INTERVAL_MAX_BIT(Min);
DF_OF_INTERVAL_MAX_BIT(Max,<,max);DF_OF_INTERVAL_MAX_BIT(Min,>,min);


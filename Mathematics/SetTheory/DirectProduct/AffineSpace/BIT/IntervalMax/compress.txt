#define DC_OF_INTERVAL_MAX_BIT(MAX)TE <TY U> CL Interval ## MAX ## BIT{PU:int m_SZ;U m_unit;VE<U> m_a;VE<U> m_fenwick_0;VE<U> m_fenwick_1;int m_PW;IN Interval ## MAX ## BIT(CO U& unit,VE<U> a = VE<U>());IN CO U& OP[](CRI i)CO;IN CO U& Get(CRI i)CO;IN CO U& LSBSegment ## MAX(CRI j,CO bool& left = true)CO;U Interval ## MAX(CRI i_start,CRI i_final)CO;VO Set(CRI i,CO U& u);IN VO Set(CO U& unit,VE<U>&& a);VO Set ## MAX(CRI i,CO U& u);IN VO Set ## MAX(VE<U> a);VO IntervalSet ## MAX(CRI i_start,CRI i_final,CO U& n);IN VO Initialise(CO U& unit,CRI SZ);int BinarySearch(CO U& u)CO;};
#define DF_OF_INTERVAL_MAX_BIT(MAX,INEQUALITY,OPR)TE <TY U> IN Interval ## MAX ## BIT<U>::Interval ## MAX ## BIT(CO U& unit,VE<U> a):m_SZ(a.SZ()),m_unit(unit),m_a(MO(a)),m_fenwick_0(m_SZ + 1),m_fenwick_1(m_SZ + 1),m_PW(1){for(int i = 0;i < m_SZ;i++){int j = i + 1;U& fenwick_0i = m_fenwick_0[j];fenwick_0i = m_a[i];CO int j_llim = j -(j & -j);j--;WH(j > j_llim){CO U& uj = m_fenwick_0[j];fenwick_0i INEQUALITY uj?fenwick_0i = uj:fenwick_0i;j -=(j & -j);}}for(int i = m_SZ - 1;i >= 0;i--){int j = i + 1;U& fenwick_1i = m_fenwick_1[j];fenwick_1i = m_a[i];CO int j_ulim = min(j +(j & -j),m_SZ + 1);j++;WH(j < j_ulim){CO U& uj = m_fenwick_1[j];fenwick_1i INEQUALITY uj?fenwick_1i = uj:fenwick_1i;j +=(j & -j);}}WH(m_PW < m_SZ){m_PW <<= 1;}}TE <TY U> VO Interval ## MAX ## BIT<U>::Set(CRI i,CO U& u){U& ai = m_a[i];if(u INEQUALITY ai){int j = i + 1;WH(j <= m_SZ){CO int lsb =(j & -j);m_fenwick_0[j]= OPR(OPR(Interval ## MAX(j - lsb,i - 1),u),Interval ## MAX(i + 1,j - 1));j += lsb;}j = i + 1;WH(j > 0){CO int lsb =(j & -j);m_fenwick_1[j]= OPR(OPR(Interval ## MAX(j - 1,i - 1),u),Interval ## MAX(i + 1,j + lsb - 2));j -= lsb;}ai = u;}else{Set ## MAX(i,u);}RE;}TE <TY U> IN VO Interval ## MAX ## BIT<U>::Set(CO U& unit,VE<U>&& a){*TH = Interval ## MAX ## BIT<U>(unit,MO(a));}TE <TY U> VO Interval ## MAX ## BIT<U>::Set ## MAX(CRI i,CO U& u){AS(i < m_SZ);U& ai = m_a[i];ai INEQUALITY u?ai = u:ai;int j = i + 1;WH(j <= m_SZ){U& uj = m_fenwick_0[j];uj INEQUALITY u?uj = u:uj;j +=(j & -j);}j = i + 1;WH(j > 0){U& uj = m_fenwick_1[j];uj INEQUALITY u?uj = u:uj;j -=(j & -j);}RE;}TE <TY U> IN VO Interval ## MAX ## BIT<U>::Set ## MAX(VE<U> a){Interval ## MAX ## BIT<U> a_copy{m_unit,MO(a)};AS(m_SZ == a_copy.m_SZ);for(int j = 1;j <= m_SZ;j++){U& t0j = m_fenwick_0[j];U& a0j = a_copy.m_fenwick_0[j];t0j INEQUALITY a0j?t0j = a0j:t0j;U& t1j = m_fenwick_1[j];U& a1j = a_copy.m_fenwick_1[j];t1j INEQUALITY a1j?t1j = a1j:t1j;}}TE <TY U> VO Interval ## MAX ## BIT<U>::IntervalSet ## MAX(CRI i_start,CRI i_final,CO U& u){CO int j_min = max(i_start + 1,1);CO int j_max = min(i_final + 1,m_SZ);for(int i = j_min - 1;i < j_max;i++){U& ai = m_a[i];ai INEQUALITY u?ai = u:ai;}CO int j_llim = j_min -(j_min & -j_min);CO int j_ulim = min(j_max +(j_max & j_max),m_SZ + 1);if(j_min <= j_max){int j = j_min;WH(j < j_ulim){if(j -(j & -j)< j_max){U& uj = m_fenwick_0[j];uj INEQUALITY u?uj = u:uj;}j++;}j = j_max;WH(j > j_llim){if(j +(j & -j)> j_min){U& uj = m_fenwick_0[j];uj INEQUALITY u?uj = u:uj;}j--;}}RE;}TE <TY U> IN VO Interval ## MAX ## BIT<U>::Initialise(CO U& unit,CRI SZ){m_SZ = SZ;m_unit = unit;m_a = VE<U>(m_SZ,m_unit);m_fenwick_0 = m_fenwick_1 = VE<U>(m_SZ + 1,m_unit);}TE <TY U> IN CO U& Interval ## MAX ## BIT<U>::OP[](CRI i)CO{AS(0 <= i & i < m_SZ);RE m_a[i];}TE <TY U> IN CO U& Interval ## MAX ## BIT<U>::Get(CRI i)CO{RE OP[](i);}TE <TY U> IN CO U& Interval ## MAX ## BIT<U>::LSBSegment ## MAX(CRI j,CO bool& left)CO{AS(0 < j && j <= m_SZ);RE(left?m_fenwick_0:m_fenwick_1)[j];}TE <TY U> U Interval ## MAX ## BIT<U>::Interval ## MAX(CRI i_start,CRI i_final)CO{U AN = m_unit;CO int j_min = max(i_start + 1,1);CO int j_max = min(i_final + 1,m_SZ);int j = j_min;int j_next = j +(j & - j);WH(j_next <= j_max){CO U& uj = m_fenwick_1[j];AN INEQUALITY uj?AN = uj:AN;j = j_next;j_next +=(j & -j);}CO U& a_centre = m_a[j-1];(j_min <= j_max && AN INEQUALITY a_centre)?AN = a_centre:AN;j = j_max;j_next = j -(j & - j);WH(j_next >= j_min){CO U& uj = m_fenwick_0[j];AN INEQUALITY uj?AN = uj:AN;j = j_next;j_next -=(j & -j);}RE AN;}TE <TY U> int Interval ## MAX ## BIT<U>::BinarySearch(CO U& u)CO{int j = 0;int PW = m_PW;U temp{};U temp_next{};WH(PW > 0){int j_next = j | PW;if(j_next < m_SZ){CO U& fenwick_j_next = m_fenwick_0[j_next];temp_next INEQUALITY fenwick_j_next?temp_next = fenwick_j_next:temp;if(temp_next INEQUALITY u){temp = temp_next;j = j_next;}else{temp_next = temp;}}PW >>= 1;}RE j;}
DC_OF_INTERVAL_MAX_BIT(Max);DC_OF_INTERVAL_MAX_BIT(Min);
DF_OF_INTERVAL_MAX_BIT(Max,<,max);DF_OF_INTERVAL_MAX_BIT(Min,>,min);

#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/SetTheory/DirectProduct/AffineSpace/DifferenceSequence/TwoDimensional/a_Body.hpp"
#else
TE <TY U,TY GROUP>CL AbstractTwoDimensionalDifferenceSequence{PU:GROUP m_M;int m_SZ_X;int m_SZ_Y;VE<VE<U>> m_a;int m_degree;IN AbstractTwoDimensionalDifferenceSequence(GROUP M,CRI SZ_X,CRI SZ_Y,int degree = 1);IN AbstractTwoDimensionalDifferenceSequence(GROUP M,CO VE<VE<U>>& a ={},int degree = 0);TE <TY...Args> IN VO Initialise(Args&&... args);IN VO Set(CRI i_x,CRI i_y,CO U& u,CRI degree = 0);IN VO Add(CRI i_x,CRI i_y,CO U& u,CRI degree = 0);IN VO RectangleAdd(CRI i_start_x,CRI i_start_y,CRI i_final_x,CRI i_final_y,CO U& u,CRI degree = 0);IN CO U& Get(CRI i_x,CRI i_y,CRI degree = 0);IN CO U& InitialRectangleSum(CRI i_x,CRI i_y,CRI degree = 0);IN U RectangleSum(CRI i_start_x,CRI i_start_y,CRI i_final_x,CRI i_final_y,CRI degree = 0);IN VO Shift(CRI degree);VO Integrate();VO Differentiate();};TE <TY GROUP> AbstractTwoDimensionalDifferenceSequence(GROUP M,CRI SZ_X,CRI SZ_Y)-> AbstractTwoDimensionalDifferenceSequence<inner_t<GROUP>,GROUP>;TE <TY U = ll>CL TwoDimensionalDifferenceSequence:PU AbstractTwoDimensionalDifferenceSequence<U,AdditiveGroup<U>>{PU:TE <TY...Args> IN TwoDimensionalDifferenceSequence(Args&&... args);};
TE <TY U,TY GROUP> IN AbstractTwoDimensionalDifferenceSequence<U,GROUP>::AbstractTwoDimensionalDifferenceSequence(GROUP M,CRI SZ_X,CRI SZ_Y,int degree):m_M(MO(M)),m_SZ_X(SZ_X),m_SZ_Y(SZ_Y),m_a(m_SZ_X + 1,VE<U>(m_SZ_Y + 1,m_M.Zero())),m_degree(MO(degree)){}TE <TY U,TY GROUP> IN AbstractTwoDimensionalDifferenceSequence<U,GROUP>::AbstractTwoDimensionalDifferenceSequence(GROUP M,CO VE<VE<U>>& a,int degree):m_M(MO(M)),m_SZ_X(a.SZ()),m_SZ_Y(m_SZ_X > 0?a.front().SZ():0),m_a(m_SZ_X + 1,VE<U>(m_SZ_Y + 1,m_M.Zero())),m_degree(MO(degree)){for(int x = 0;x < m_SZ_X;x++){for(int y = 0;y < m_SZ_Y;y++){m_a[x+1][y+1]= a[x][y];}}}TE <TY U> TE <TY...Args> IN TwoDimensionalDifferenceSequence<U>::TwoDimensionalDifferenceSequence(Args&&... args):AbstractTwoDimensionalDifferenceSequence<U,AdditiveGroup<U>>(AdditiveGroup<U>(),forward<decay_t<Args>>(args)...){}TE <TY U,TY GROUP> TE <TY...Args> IN VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Initialise(Args&&... args){AbstractTwoDimensionalDifferenceSequence temp{m_M,forward<decay_t<Args>>(args)...};m_SZ_X = temp.m_SZ_X;m_SZ_Y = temp.m_SZ_Y;m_a = MO(temp.m_a);m_degree = temp.m_degree;}TE <TY U,TY GROUP> IN VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Set(CRI i_x,CRI i_y,CO U& u,CRI degree){Add(i_x,i_y,m_M.Sum(m_M.Inverse(Get(i_x,i_y,degree)),u),degree);}TE <TY U,TY GROUP> IN VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Add(CRI i_x,CRI i_y,CO U& u,CRI degree){if(u == m_M.Zero()){RE;}Shift(degree);auto& m_a_i_x_i_y = m_a[i_x+1][i_y+1];m_a_i_x_i_y = m_M.Sum(MO(m_a_i_x_i_y),u);}TE <TY U,TY GROUP> IN VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::RectangleAdd(CRI i_start_x,CRI i_start_y,CRI i_final_x,CRI i_final_y,CO U& u,CRI degree){if(u == m_M.Zero()){RE;}Shift(degree + 1);auto& m_a_i_start_x = m_a[i_start_x+1];auto& m_a_i_start_x_i_start_y = m_a_i_start_x[i_start_y+1];m_a_i_start_x_i_start_y = m_M.Sum(MO(m_a_i_start_x_i_start_y),u);CO int i_final_y_plus = i_final_y + 1;CO U u_inv = m_M.Inverse(u);if(i_final_y_plus < m_SZ_Y){auto& m_a_i_start_x_i_final_y_plus = m_a_i_start_x[i_final_y_plus+1];m_a_i_start_x_i_final_y_plus = m_M.Sum(MO(m_a_i_start_x_i_final_y_plus),u_inv);}CO int i_final_x_plus = i_final_x + 1;if(i_final_x_plus < m_SZ_X){auto& m_a_i_final_x_plus = m_a[i_final_x_plus+1];auto& m_a_i_final_x_plus_i_start_y = m_a_i_final_x_plus[i_start_y+1];m_a_i_final_x_plus_i_start_y = m_M.Sum(MO(m_a_i_final_x_plus_i_start_y),u_inv);if(i_final_y_plus < m_SZ_Y){auto& m_a_i_final_x_plus_i_final_y_plus = m_a_i_final_x_plus[i_final_y_plus+1];m_a_i_final_x_plus_i_final_y_plus = m_M.Sum(MO(m_a_i_final_x_plus_i_final_y_plus),u);}}RE;}TE <TY U,TY GROUP> IN CO U& AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Get(CRI i_x,CRI i_y,CRI degree){AS(0 <= i_x && i_x < m_SZ_X && 0 <= i_y && i_y < m_SZ_Y);Shift(degree);RE m_a[i_x+1][i_y+1];}TE <TY U,TY GROUP> IN CO U& AbstractTwoDimensionalDifferenceSequence<U,GROUP>::InitialRectangleSum(CRI i_x,CRI i_y,CRI degree){AS(-1 <= i_x && i_x < m_SZ_X && -1 <= i_y && i_y < m_SZ_Y);Shift(degree - 1);RE m_a[i_x+1][i_y+1];}TE <TY U,TY GROUP> IN U AbstractTwoDimensionalDifferenceSequence<U,GROUP>::RectangleSum(CRI i_start_x,CRI i_start_y,CRI i_final_x,CRI i_final_y,CRI degree){AS(0 <= i_start_x && i_start_x - 1 <= i_final_x && i_final_x < m_SZ_X && 0 <= i_start_y && i_start_y - 1 <= i_final_y && i_final_y < m_SZ_Y);Shift(degree - 1);RE m_M.Sum(m_M.Sum(m_a[i_start_x][i_start_y],m_M.Inverse(m_M.Sum(m_a[i_final_x+1][i_start_y],m_a[i_start_x][i_final_y+1]))),m_a[i_final_x+1][i_final_y+1]);}TE <TY U,TY GROUP> VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Shift(CRI degree){WH(m_degree < degree){Differentiate();}WH(m_degree > degree){Integrate();}}TE <TY U,TY GROUP> VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Integrate(){m_degree--;for(int x = 0;x < m_SZ_X;x++){auto& m_a_x_minus = m_a[x];auto& m_a_x = m_a[x+1];for(int y = 0;y < m_SZ_Y;y++){U& m_a_xy = m_a_x[y+1];m_a_xy = m_M.Sum(m_M.Sum(m_M.Sum(MO(m_a_xy),m_a_x_minus[y+1]),m_a_x[y]),m_M.Inverse(m_a_x_minus[y]));}}RE;}TE <TY U,TY GROUP> VO AbstractTwoDimensionalDifferenceSequence<U,GROUP>::Differentiate(){m_degree++;for(int x = m_SZ_X - 1;x >= 0;x--){auto& m_a_x_minus = m_a[x];auto& m_a_x = m_a[x+1];for(int y = m_SZ_Y - 1;y >=0;y--){U& m_a_xy = m_a_x[y+1];m_a_xy = m_M.Sum(m_M.Sum(m_M.Sum(MO(m_a_xy),m_M.Inverse(m_a_x_minus[y+1])),m_M.Inverse(m_a_x[y])),m_a_x_minus[y]);}}RE;}
#endif

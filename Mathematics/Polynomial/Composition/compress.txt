// ../Truncate/compress.txtを先に貼る。

// 一般の合成
TE <TY T> TRPO<T> Composite(CO TRPO<T>& f,CO TRPO<T>& g)CO{CRUI N = f.GetTruncation();assert(N > 0 && g[0]== PO<T>::CO_zero());CO uint N_minus = N - 1;if(N_minus == 0){RE *TH;}CO uint H = sqrt(N_minus);CO uint K = N_minus / H;VE<TRPO<T> > g_PW(K < 2?2:K);(g_PW[1]= g).SetTruncation(N);for(uint k = 2;k < K;k++){g_PW[k]= g_PW[k-1]* g_PW[1];}VE<TRPO<T> > g_PW2(H + 1);g_PW2[1]= K < 2?g_PW[1]:g_PW[K-1]* g_PW[1];for(uint h = 2;h <= H;h++){g_PW2[h]= g_PW2[h-1]* g_PW2[1];}uint k = 0;uint h = 0;uint n_max = N_minus;TRPO<T> AN{N};TRPO<T> AN_h{N};for(uint d = 0;d < N;d++){for(uint n = k;n <= n_max;n++){AN_h[n]+= k == 0?n == 0?f[d]:T{}:f[d]* g_PW[k][n];}ig(++k == K || d == N_minus){AN += h == 0?AN_h:AN_h *= g_PW2[h];k = 0;h++;n_max -= K;AN_h = TRPO<T>(N);}}RE AN;}

// 反転のN次打ち切り
TE <TY T> VO Reverse(CRUI N,PO<T>& f){f.reSZ(N);CO uint N_half = N / 2;for(uint d = 0;d < N_half;d++){swap(f[d],f[N - 1 - d]);}RE;}
// 平行移動
TE <TY T> VO Shift(PO<T>& f,CO T& t,CO bool& EXial = false){f.ReMORedundantZero();CRUI SZ = f.SZ();if(SZ > 0 && t != PO<T>::CO_zero()){TRPO<T> exp_t_transpose{SZ * 2};T PW_t = PO<T>::CO_one();for(uint d = 0;d < SZ;d++){exp_t_transpose[SZ - 1 - d]= PW_t * T::FactorialInverse(d);PW_t *= t;}if(EXial){exp_t_transpose *= f;for(uint d = 0;d < SZ;d++){f[d]= exp_t_transpose[d + SZ - 1];}}else{for(uint d = 0;d < SZ;d++){f[d]*= T::Factorial(d);}exp_t_transpose *= f;for(uint d = 0;d < SZ;d++){f[d]= exp_t_transpose[d + SZ - 1]* T::FactorialInverse(d);}}}RE;}
// アフィン変換
TE <TY T> VO AffineTransformation(PO<T>& f,CO T& t,CO T& u = PO<T>::CO_zero(),CO bool& EXial = false){Shift(f,u,EXial);CRUI SZ = f.SZ();T PW = PO<T>::CO_one();for(uint d = 0;d < SZ;d++){f[d]*= PW;PW *= t;}RE;}
// メビウス変換
TE <TY T>tuple<PO<T>,T,T,uint>MoeviusComposition(PO<T> f,T a,T b,T c,T d){CO T& zero = PO<T>::CO_zero();CO T& one = PO<T>::CO_one();if(c == zero){d = one / d;AffineTransformation(f,a *= d,b *= d);RE{MO(f),zero,one,0};}a /= c;b -= a * d;if(b == zero){RE{f(a),zero,one,0};}b = one / b;c *= b;d *= b;Shift(f,a);CO uint& SZ = f.SZ();Reverse(SZ,f);AffineTransformation(f,c,d);RE{MO(f),MO(c),MO(d),SZ - 1};}
// ../Sum/compress.txtを先に貼る。（PWを使用）
// メビウス変換のN次打ち切り（反転のN次打ち切りを使用）
TE <TY T> TRPO<T> MoeviusComposition(CRUI N,PO<T> f,T a,T b,T c,T d){CO T& zero = PO<T>::CO_zero();CO T& one = PO<T>::CO_one();if(c == zero){d = one / d;AffineTransformation(f,a *= d,b *= d);}else{a /= c;b -= a * d;if(b == zero){f = f(a);}else{b = one / b;c *= b;d *= b;Shift(f,a);CRUI SZ = f.SZ();if(SZ>0){Reverse(SZ,f);AffineTransformation(f,c,d);TRPO<T> g{N};g[0]= MO(d);g[1]= MO(c);g = Inverse(PW(g,SZ-1));g *= f;f = MO(g);}}}RE TRPO<T>(N,f);}

// ../Sum/compress.txtを先に貼る。（ExialSumを使用）
// exp(x)の合成のN次打ち切り
TE <TY T> TRPO<T> EXialComposition(CRUI N,CO PO<T>& f,CO T& t){CRUI SZ = f.SZ();LI<pair<T,T>> coef{};T temp = PO<T>::CO_zero();for(uint d = 0;d < SZ;d++){coef.push_back({f[d],temp});temp += t;}RE EXialSum(N,coef);}
// メビウス変換（次数打ち切りなし！）後にexp(x)の合成のN次打ち切り（メビウス変換とEXialCompositionとPWを使用）
TE <TY T>TRPO<T> MoeviusEXialComposition(CRUI N,CO PO<T>& f,T a,T b,T c,T d,CO T& t){auto[h,u,v,e]= MoeviusComposition(f,MO(a),MO(b),MO(c),MO(d));TRPO<T> g{EXialComposition(N,h,t)};h.reSZ(2);h[0]= MO(v);h[1]= MO(u);TRPO<T> r{EXialComposition(N,h,t)};r = PW(r,e);RE MO(g /= r);}

// ../MultipointEvaluation/compress.txtを先に貼る。（商と評価点に対するSetPartialFractionDecompositionを使用）
// t log(1-x)の合成のN次打ち切り
TE <TY T>TRPO<T> LogarithmComposition(CRUI N,PO<T> f,CO T& t){CRUI f_SZ = f.SZ();if(f_SZ == 0){RE TRPO<T>(N);}CO T& zero = PO<T>::CO_zero();if(t == zero){RE TRPO<T>(N,f(t));}CO uint SZ = max(f_SZ,N);LI<T> point{};VE<T> coef{};for(uint d = 0;d < f_SZ;d++){f[d]*= T::Factorial(d);}for(uint d = 1;d < SZ;d++){point.push_back(t * T::Inverse(d));}SetPartialFractionDecomposition(SZ,f,point,coef);point.clear();f = MO(coef);CO T& one = PO<T>::CO_one();CO T t_inv_minus = -one / t;T temp = t_inv_minus;for(uint d = 1;d < SZ;d++){f[d] *= temp;temp += t_inv_minus;}Shift(f,one);RE TRPO<T>(N,MO(f));}
// t log(x)の合成後に0を1に移すメビウス変換のN次打ち切り
TE <TY T>TRPO<T> MoeviusLogarithmComposition(CRUI N,PO<T> f,T a,T b,T c,CO T& t){CO T& zero = PO<T>::CO_zero();assert(b != zero);f = LogarithmComposition(N,MO(f),t);a -= c;RE MoeviusComposition(N,f,a,zero,c,b);}

// ../../../compress.txtÇêÊÇ…ì\ÇÈÅB

TE <TY R,TY U>CL VirtualModule:VI PU UnderlyingSet<U>{PU:VI U Action(CO R& r,CO U& u)= 0;IN U PW(CO U& u,CO R& r);IN U ScalarProduct(CO R& r,CO U& u);};TE <TY R,TY U,TY O_U>CL AbstractRSet:VI PU VirtualModule<R,U>{PU:O_U m_o_U;IN AbstractRSet(CO R& dummy0,CO U& dummy1,O_U o_U);IN U Action(CO R& r,CO U& u);};TE <TY R,TY U,TY O_U,TY GROUP>CL AbstractModule:PU AbstractRSet<R,U,O_U>,PU GROUP{PU:IN AbstractModule(CO R& dummy,O_U o_U,GROUP M);};TE <TY R,TY O_U,TY GROUP> AbstractModule(CO R& dummy,O_U o_U,GROUP M)-> AbstractModule<R,inner_t<GROUP>,O_U,GROUP>;TE <TY R,TY U>CL Module:VI PU VirtualModule<R,U>,PU AdditiveGroup<U>{PU:IN U Action(CO R& r,CO U& u);};
TE <TY R,TY U,TY O_U> IN AbstractRSet<R,U,O_U>::AbstractRSet(CO R& dummy0,CO U& dummy1,O_U o_U):m_o_U(MO(o_U)){ST_AS(is_invocable_r_v<U,O_U,R,U>);}TE <TY R,TY U,TY O_U,TY GROUP> IN AbstractModule<R,U,O_U,GROUP>::AbstractModule(CO R& dummy,O_U o_U,GROUP M):AbstractRSet<R,U,O_U>(dummy,M.One(),MO(o_U)),GROUP(MO(M)){ST_AS(is_same_v<U,inner_t<GROUP>>);}TE <TY R,TY U,TY O_U> IN U AbstractRSet<R,U,O_U>::Action(CO R& r,CO U& u){RE m_o_U(r,u);}TE <TY R,TY U> IN U Module<R,U>::Action(CO R& r,CO U& u){RE r * u;}TE <TY R,TY U> IN U VirtualModule<R,U>::PW(CO U& u,CO R& r){RE Action(r,u);}TE <TY R,TY U> IN U VirtualModule<R,U>::ScalarProduct(CO R& r,CO U& u){RE Action(r,u);}

#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Combinatorial/Loop/Recursion/a_Body.hpp"
#else
TE <TY INT,TY Arg,TY BEFORE,TY AFTER>Arg ExecuteLoop(CRI SZ,CO VE<INT>& lower_bound,CO VE<INT>& upper_limit,CRI d,Arg&& arg,CO BEFORE& before,CO AFTER& after){ST_AS(is_invocable_r_v<Arg,BEFORE,CRI,CRI,CO Arg&> && is_invocable_v<AFTER,CRI,CRI,CO Arg&>);if(d + 1 < SZ){for(INT i = lower_bound[d];i < upper_limit[d];i++){after(d,i,ExecuteLoop(SZ,lower_bound,upper_limit,d + 1,before(d,i,arg),before,after));}}else{for(INT i = lower_bound[d];i < upper_limit[d];i++){after(d,i,before(d,i,arg));}}RE MO(arg);}TE <TY INT,TY Arg,TY BEFORE,TY AFTER> IN Arg ExecuteLoop(CO VE<INT>& lower_bound,CO VE<INT>& upper_limit,Arg&& arg,CO BEFORE& before,CO AFTER& after){RE ExecuteLoop(lower_bound.SZ(),lower_bound,upper_limit,0,MO(arg),before,after);}TE <TY INT,TY Arg,TY BEFORE,TY AFTER>Arg ExecuteLoopEq(CRI SZ,CO VE<INT>& lower_bound,CO VE<INT>& upper_bound,CRI d,Arg&& arg,CO BEFORE& before,CO AFTER& after){ST_AS(is_invocable_r_v<Arg,BEFORE,CRI,CRI,CO Arg&> && is_invocable_v<AFTER,CRI,CRI,CO Arg&>);if(d + 1 < SZ){for(INT i = lower_bound[d];i <= upper_bound[d];i++){after(d,i,ExecuteLoopEq(SZ,lower_bound,upper_bound,d + 1,before(d,i,arg),before,after));}}else{for(INT i = lower_bound[d];i <= upper_bound[d];i++){after(d,i,before(d,i,arg));}}RE MO(arg);}TE <TY INT,TY Arg,TY BEFORE,TY AFTER> IN Arg ExecuteLoopEq(CO VE<INT>& lower_bound,CO VE<INT>& upper_bound,Arg&& arg,CO BEFORE& before,CO AFTER& after){RE ExecuteLoopEq(lower_bound.SZ(),lower_bound,upper_bound,0,MO(arg),before,after);}
#endif

#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Combinatorial/KnapsackProblem/Costfree/InitialSegment/a_Body.hpp"
#else
TE <TY INT,TY VALUE>int CostfreeInitialSegmentKnapsack(CRL N,VALUE value,CO INT& value_sum_bound,CO bool& cumulative){ST_AS(is_invocable_r_v<INT,VALUE,CRL>);if(cumulative){ll l = 0,r = N;WH(l < r - 1){ll m =(l + r)>> 1;(value(m)> value_sum_bound?r:l)= m;}RE l;}INT temp = 0;int AN = -1;WH(AN + 1 < N &&(temp += value(AN + 1))<= value_sum_bound){++AN;}RE AN;}TE <TY INT,TY VALUE>INT CostfreeInitialSegmentDoubleKnapsackValueSumBound(CRL N,VALUE value,CO INT& value_sum_bound_0,CO INT& value_sum_bound_1,CO INT& unpresentable_max,CO bool& cumulative){if(N == 0){RE 0;}auto value_fixed =[&](CRL k){RE value(k)-(cumulative && k > 0?value(k - 1):0);};CO INT& V_min = value_sum_bound_0 > value_sum_bound_1?value_sum_bound_1:value_sum_bound_0;CO INT& V_max = value_sum_bound_0 > value_sum_bound_1?value_sum_bound_0:value_sum_bound_1;CO INT L = unpresentable_max << 1;ll l = 0,N_1 = N;WH(l < N_1 - 1){ll m =(l + N_1)>> 1;(value_fixed(m)> L?N_1:l)= m;}ll N_2;if(cumulative){l = 0,N_2 = N_1;WH(l < N_2 - 1){ll m =(l + N_2)>> 1;(value(m)> V_min?N_2:l)= m;}}else{N_2 = 0;INT sum = 0;WH(N_2 < N_1 &&(sum += value(N_2))<= V_min){++N_2;}}if(N_1 == N_2 && N_1 < N){RE V_min + V_max;}l = N_2;ll N_3 = N;WH(l < N_3 - 1){ll m =(l + N_3)>> 1;(value_fixed(m)> V_min?N_3:l)= m;}VE dp(N_3 + 1,VE<bool>(V_min + 1));dp[0][0]= true;INT V = 0,sum = 0;for(int i = 0;i < N_3;i++){auto&& value_i = value_fixed(i);sum += value_i;for(INT v = 0;v <= V_min;v++){(dp[i+1][v]=((dp[i][v]&& sum - v <= V_max)||(v >= value_i && dp[i][v - value_i])))?V = max(V,v):V;}}RE V + V_max;}TE <TY INT,TY VALUE> IN int CostfreeInitialSegmentDoubleKnapsack(CRL N,VALUE value,CO INT& value_sum_bound_0,CO INT& value_sum_bound_1,CO INT& unpresentable_max,CO bool& cumulative){RE CostfreeInitialSegmentKnapsack(N,value,CostfreeInitialSegmentDoubleKnapsackValueSumBound(N,value,value_sum_bound_0,value_sum_bound_1,unpresentable_max,cumulative),cumulative);}
#endif

class ModB:
	B = 998244353
	length_max = 10**6 #ユーザー定義
	inverse=None
	factorial=None
	factorial_inverse=None
	def SetModulo(B):
		ModB.B = int(B)
		inverse = [None,ModB(1)]
		factorial = [ModB(1)]
		factorial_inverse = [ModB(1)]

	def __init__(self,val,valid = False):
		self.val = int(val)
		if not valid:self.val %= ModB.B
	def copy(self):
		return ModB(self.val,True)

	def __eq__(self,x):
		return x==self.val
	def __ne__(self,other):
		return not( self == other )

	def __add__(self,x):
		val = self.val + x #__radd__を使用
		if val >= ModB.B:val -= ModB.B
		return ModB(val,True)
	def __iadd__(self,other):
		self = self + other
		return self

	def __sub__(self,x):
		val = self.val - x #__rsub__を使用
		if val < 0:val += ModB.B
		return ModB(val,True)
	def __isub__(self,other):
		self = self - other
		return self
	def __neg__(self):
		return ModB(ModB.B - self.val if self.val else 0,True)

	def __mul__(self,x):
		val = self.val * x % ModB.B #__mod__を使用
		return ModB(val,True)
	def __rmul__(self,x):
		return ModB(x * self.val)
	def __imul__(self,x):
		self = self * x
		return self

	def __pow__(self,n):
		if n < 0:n *= Mod.B - 2 #Bが素数でval!=0の場合のみサポート
		answer = ModB(1)
		power = self.copy()
		while n > 0:
			if n&1:answer *= power
			power *= power
			n >>= 1
		return answer

	def Inverse(n): #Bが素数の場合のみサポート
		if n < ModB.length_max:
			while len(ModB.inverse) <= n:ModB.inverse+=[ModB(ModB.B - ModB.inverse[ModB.B % len(ModB.inverse)].val * ( ModB.B // len(ModB.inverse) ) % ModB.B,True)]
			return ModB.inverse[n]
		else:return ModB(n) ** ( ModB.B - 2 )
	def __rtruediv__(self,x):
		return x * ModB.Inverse(self.val)
	def __itruediv__(self,other):
		self *= ModB.Inverse(other.val)
		return self

	def Factorial(n):
		while len(ModB.factorial) <= n:ModB.factorial+=[ModB.factorial[-1] * len(ModB.factorial)]
		return ModB.factorial[n]
	def FactorialInverse(n): #Bが素数の場合のみサポート
		while len(ModB.factorial_inverse) <= n:ModB.factorial_inverse+=[ModB.factorial_inverse[-1] * ModB.Inverse( len(ModB.factorial_inverse) )]
		return ModB.factorial[n]
	def Combination(n,m): #Bが素数の場合のみサポート
		return ModB.Factorial(n) * ModB.FactorialInverse(m) * ModB.FactorialInverse(n-m)if 0<=m<=n else ModB(0)

	#private:
	def __radd__(self,x): #__add__オーバーロード用
		return x + self.val
	def __rsub__(self,x): #__sub__オーバーロード用
		return x - self.val	
	def __mod__(self,x): #__mul__オーバーロード用
		return self.val
ModB.inverse = [None,ModB(1)]
ModB.factorial = [ModB(1)]
ModB.factorial_inverse = [ModB(1)]

class VaridatedReal:
	#digit=128
	digit=256
	scale=1<<digit
	precision=10
	epsilon=10**(-precision-1)
	one=None
	zero=None

	def __init__(self,l=0,r=None,shifted=False):
		if r is None:r=l
		if shifted:self.l,self.r=l,r
		else:self.l,self.r=l<<__class__.digit,r<<__class__.digit
	def ref(x):
		return x if x.__class__==__class__ else __class__(x)
	def copy(self):
		return __class__(self.l,self.r,True)

	def __add__(self,x):
		other=__class__.ref(x)
		return __class__(self.l+other.l,self.r+other.r,True)
	def __radd__(self,x):
		x<<=__class__.digit
		return __class__(x+self.l,x+self.r,True)

	def __neg__(self):
		return __class__(-self.r,-self.l,True)
	def __sub__(self,x):
		return self+(-x)
	def __rsub__(self,x):
		x<<=__class__.digit
		return __class__(x-self.r,x-self.l,True)

	def __mul__(self,x):
		other=__class__.ref(x)
		if other.l<=0<=other.r:
			if self.l<=0<=self.r:
				l,r=min(self.l*other.r,self.r*other.l),max(self.l*other.l,self.r*other.r)
			elif self.l>0:
				l,r=self.r*other.l,self.r*other.r
			else:
				l,r=self.l*other.r,self.l*other.l
		elif other.l>0:
			if self.l<=0<=self.r:
				l,r=self.l*other.r,self.r*other.r
			elif self.l>0:
				l,r=self.l*other.l,self.r*other.r
			else:
				l,r=self.l*other.r,self.r*other.l
		else:
			if self.l<=0<=self.r:
				l,r=self.r*other.l,self.l*other.l
			elif self.l>0:
				l,r=self.r*other.l,self.l*other.r
			else:
				l,r=self.r*other.r,self.l*other.l
		return __class__(l>>__class__.digit,-((-r)>>__class__.digit),	True)
	def __rmul__(self,x):
		return self*x
	def Square(self):
		if self.l<=0<=self.r:l,r=0,max(self.l**2,self.r**2)
		elif self.l>0:l,r=self.l**2,self.r**2
		else:l,r=self.r**2,self.l**2
		return __class__(l>>__class__.digit,-((-r)>>__class__.digit),True)

	def __truediv__(self,x):
		other=__class__.ref(x)
		if other.l<=0<=other.r:
			print("InversingZero:")
			print("x ->",other)
			raise NameError("InversingZero")
		elif other.l>0:
			if self.l<=0<=self.r:
				l,r=(self.l<<__class__.digit)//other.l,-(((-self.r)<<__class__.digit)//other.l)
			elif self.l>0:
				l,r=(self.l<<__class__.digit)//other.r,-(((-self.r)<<__class__.digit)//other.l)
			else:
				l,r=(self.l<<__class__.digit)//other.l,-((-(self.r)<<__class__.digit)//other.r)
		else:
			if self.l<=0<=self.r:
				l,r=(self.r<<__class__.digit)//other.r,-(((-self.l)<<__class__.digit)//other.r)
			if self.l>0:
				l,r=(self.r<<__class__.digit)//other.r,-(((-self.l)<<__class__.digit)//other.l)
			else:
				l,r=(self.r<<__class__.digit)//other.l,-(((-self.l)<<__class__.digit)//other.r)
		return __class__(l,r,True)
	def __rtruediv__(self,x):
		return __class__(x)/self

	def __lshift__(self,n):
		return __class__(self.l<<n,self.r<<n,True)
	def __rshift__(self,n):
		return __class__(self.l>>n,self.r>>n,True)

	def __pow__(self,n):
		a,p=__class__.one,self.copy()
		while n:
			if n&1:a*=p
			n,p=n>>1,Square(p)
		return a
	def __xor__(self,n):
		return 1/(self**(-n))if n<0 else self**n

	#True if there is a witness in the pair of intervals
	def __eq__(self,x):
		other=__class__.ref(x)
		return max(self.l,other.l)<=min(self.r,other.r)
	def __neq__(self,x):
		return not(self==x)
	def __lt__(self,x):
		other=__class__.ref(x)
		return self.l<other.r
	def __gt__(self,x):
		other=__class__.ref(x)
		return self.r>other.l
	def __le__(self,x):
		other=__class__.ref(x)
		return self.l<=other.r
	def __ge__(self,x):
		other=__class__.ref(x)
		return self.r>=other.l

	def nrm(self):
		if self.l<0<self.r:l,r=0,max(-self.l,self.r)
		elif self.l<=0:l,r=-self.r,-self.l
		else:l,r=self.l,self.r
		return __class__(l,r,True)
	def err(self):
		return (self.r-self.l)/__class__.scale
	def sign(self):
		return 0 if self.l<=0<=self.r else 1 if 0<=self.l else -1

	def to_int(self,n=1):
		return[(self.l*n)>>__class__.digit,-((-self.r*n)>>__class__.digit)]
	def to_str(self,d):
		a=[]
		for n in self.to_int(10**d):
			s=str(abs(n))
			l=len(s)
			if d:
				if l>d:s=s[:l-d]+"."+s[-d:]
				else:s="0."+"0"*(d-l)+s
			if n<0:s="-"+s
			a+=[s]
		return a
	def __str__(self):
		return self.to_str(__class__.precision).__str__()

	def set_precision(d):
		__class__.precision=d
		__class__.epsilon=10**(-d-1)
	def eval(self):
		if self.err()>__class__.epsilon:
			print("TooBigError:")
			print("self ->",self)
			print("self.err() ->",self.err())
			raise NameError("TooBigError")
		a=self.to_str(__class__.precision+1)
		return a[1 if a[1][-2]=='0'else 0][:-1]
VaridatedReal.one=VaridatedReal(1)
VaridatedReal.zero=VaridatedReal()

def to_real(n=0,d=1):
	i=VaridatedReal.digit
	if d<0:n,d=-n,-d
	while d&1<1 and i:d,i=d>>1,i-1
	x,d=(abs(n)<<i)//d,d>1
	if n<0:l,r=-x-d,-x
	else:l,r=x,x+d
	return VaridatedReal(l,r,True)
def vmax(x,y):
	return VaridatedReal(max(x.l,y.l),max(x.r,y.r),True)
def vmin(x,y):
	return VaridatedReal(min(x.l,y.l),min(x.r,y.r),True)
bound_vcos=40
def vcos(x):
	a,p,xx=VaridatedReal.zero,VaridatedReal.one,x.Square()
	for i in R(bound_vcos):
		if i:p=-(p*xx/((2*i-1)*2*i))
		a+=p
	return a
def vsin(x):
	a,p,xx=VaridatedReal.zero,VaridatedReal.one,x.Square()
	for i in R(bound_vcos):
		if i:p=-(p*xx/(2*i*(2*i+1)))
		a+=p
	return a

def inverse_vfunction(vf,x,y,increasing=True):
	m=(y.l+y.r)>>1
	vfy,vfm=vf(y),vf(VaridatedReal(m,m,True))
	byl,byr,bml,bmr=vfy.l<x.l,x.r<vfy.r,vfm.l<x.l,x.r<vfm.r
	while (byl or byr)and y.l+1<y.r:
		if bml:
			if bmr:break
			if increasing:y.l=m
			else:y.r=m
		elif increasing:y.r=m
		else:y.l=m
		m=(y.l+y.r)>>1
		vfy,vfm=vf(y),vf(VaridatedReal(m,m,True))
		byl,byr,bml,bmr=vfy.l<x.l,x.r<vfy.r,vfm.l<x.l,x.r<vfm.r
	if bml and bmr:
		print("TooBigError:")
		print("vfm ->",vfm)
		raise NameError("TooBigError")
	return y
#pi=VaridatedReal(1069028584064966747859680373161870783300,1069028584064966747859680373161870783301,True);assert(VaridatedReal.digit==128)
pi=VaridatedReal(363771576891766324280234942777729862653393377328392429958772151117938894466185,363771576891766324280234942777729862653393377328392429958772151117938894466186,True);assert(VaridatedReal.digit==256)
def vacos(x):
	return inverse_vfunction(vcos,x,VaridatedReal(0,pi,r,True),False)
def vasin(x):
	return inverse_vfunction(vsin,x,VaridatedReal(-pi.r>>1,pi,r>>1,True),False)

def vSquare(x):
	return x.Square()
def vsqrt(x):
	return inverse_vfunction(vSquare,x,VaridatedReal(0,max(1<<VaridatedReal.digit,x.r),True),True)

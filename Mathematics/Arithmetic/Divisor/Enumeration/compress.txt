#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/Divisor/Enumeration/a_Body.hpp"
#else
// PrimeEnumeration:
// val_limit = 316 ≒ sqrt(1e5) -> length = 65
// val_limit = 448 ≒ sqrt(2e5) -> length = 86
// val_limit = 1e5 -> length = 9592
// val_limit = 1e6 -> length = 78498
// nの素因数分解：PrimeFactorisation(CO PE/LD& pe,CO INT& n) O(√n/log n)/O(log n)
// nの素羃への分解：PrimePowerFactorisation(CO PE/LD& pe,CO INT& n) O(√n/log n)/O(log n)
// CountDivisor( n ):
// n <= 1e3 -> answer <= 32
// n <= 1e4 -> answer <= 64
// n <= 1e5 -> answer <= 128
// n <= 1e6 -> answer <= 256
// nの約数数え上げ：CountDivisor(CO PE/LD& pe,INT n) O(√n/log n)/O(log n)
// nの約数辞書順列挙：EnumerateDivisor(CO PE/LD& pe,INT n) O(√n/log n)/O(log n/log log n)
// SZ未満の数の約数全列挙：TotalEnumerateDivisor(CRI SZ) O(size log size)
TE <int val_limit,int le_max = val_limit>CL PrimeEnumeration{PU:bool m_is_composite[val_limit];int m_val[le_max];int m_le;CE PrimeEnumeration();IN CRI OP[](CRI i)CO;CE CRI Get(CRI i)CO;CE CO bool& IsComposite(CRI n)CO;CE CRI length()CO NE;};
TE <int val_limit,int le_max> CE PrimeEnumeration<val_limit,le_max>::PrimeEnumeration():m_is_composite(),m_val(),m_le(0){for(int i = 2;i < val_limit;i++){if(! m_is_composite[i]){if(i <=(val_limit - 1)/ i){for(int j = i * i;j < val_limit;j += i){m_is_composite[j]= true;}}m_val[m_le++]= i;if(m_le >= le_max){break;}}}}TE <int val_limit,int le_max> IN CRI PrimeEnumeration<val_limit,le_max>::OP[](CRI i)CO{AS(0 <= i && i < m_le);RE m_val[i];}TE <int val_limit,int le_max> CE CRI PrimeEnumeration<val_limit,le_max>::Get(CRI i)CO{RE m_val[i];}TE <int val_limit,int le_max> CE CO bool& PrimeEnumeration<val_limit,le_max>::IsComposite(CRI n)CO{RE m_is_composite[n];}TE <int val_limit,int le_max> CE CRI PrimeEnumeration<val_limit,le_max>::length()CO NE{RE m_le;}
CL HeapPrimeEnumeration{PU:int m_val_limit;VE<bool> m_is_composite;VE<int> m_val;int m_le;IN HeapPrimeEnumeration(CRI val_limit);IN CRI OP[](CRI i)CO;IN CRI Get(CRI i)CO;IN bool IsComposite(CRI n)CO;IN CRI length()CO NE;};
IN HeapPrimeEnumeration::HeapPrimeEnumeration(CRI val_limit):m_val_limit(val_limit),m_is_composite(m_val_limit),m_val(),m_le(0){for(int i = 2;i < m_val_limit;i++){if(! m_is_composite[i]){if(i <=(m_val_limit - 1)/ i){for(int j = i * i;j < val_limit;j += i){m_is_composite[j]= true;}}m_val.push_back(i);}}m_le = m_val.SZ();}IN CRI HeapPrimeEnumeration::OP[](CRI i)CO{AS(0 <= i && i < m_le);RE m_val[i];}IN CRI HeapPrimeEnumeration::Get(CRI i)CO{RE OP[](i);}IN bool HeapPrimeEnumeration::IsComposite(CRI n)CO{AS(0 <= n && n < m_val_limit);RE m_is_composite[n];}IN CRI HeapPrimeEnumeration::length()CO NE{RE m_le;}

TE <TY PE> auto CheckPE(CO PE& pe)-> decltype(pe.IsComposite(0),true_type());TE <TY...> false_type CheckPE(...);TE <TY T>CE bool IsPE = decltype(CheckPE(declval<T>()))();

TE <int val_limit>CL LeastDivisor{PU:int m_val[val_limit];CE LeastDivisor()NE;IN CRI OP[](CRI i)CO;CE CRI Get(CRI i)CO;CE int length()CO NE;};
TE <int val_limit> CE LeastDivisor<val_limit>::LeastDivisor()NE:m_val{}{for(int d = 2;d < val_limit;d++){if(m_val[d]== 0){for(int n = d;n < val_limit;n += d){m_val[n]== 0?m_val[n]= d:d;}}}}TE <int val_limit> IN CRI LeastDivisor<val_limit>::OP[](CRI i)CO{AS(0 <= i && i < val_limit);RE m_val[i];}TE <int val_limit> CE CRI LeastDivisor<val_limit>::Get(CRI i)CO{RE m_val[i];}TE <int val_limit> CE int LeastDivisor<val_limit>::length()CO NE{RE val_limit;}
CL HeapLeastDivisor{PU:int m_val_limit;VE<int> m_val;IN HeapLeastDivisor(CRI val_limit)NE;IN CRI OP[](CRI i)CO;IN CRI Get(CRI i)CO;IN CRI length()CO NE;};
IN HeapLeastDivisor::HeapLeastDivisor(CRI val_limit)NE:m_val_limit(val_limit),m_val(m_val_limit){for(int d = 2;d < m_val_limit;d++){if(m_val[d]== 0){for(int n = d;n < m_val_limit;n += d){m_val[n]== 0?m_val[n]= d:d;}}}}IN CRI HeapLeastDivisor::OP[](CRI i)CO{AS(0 <= i && i < m_val_limit);RE m_val[i];}IN CRI HeapLeastDivisor::Get(CRI i)CO{RE m_val[i];}IN CRI HeapLeastDivisor::length()CO NE{RE m_val_limit;}

TE <TY PE,TY INT>auto PrimeFactorisation(CO PE& pe,INT n)-> enable_if_t<IsPE<PE>,pair<VE<INT>,VE<int>>>{AS(n > 0);VE<INT> P{};VE<int> E{};CRI le = pe.length();for(int i = 0;i < le;i++){auto& p = pe[i];if(n % p == 0){int e = 1;WH((n /= p)% p == 0){e++;}P.push_back(p);E.push_back(e);}else if(n / p < p){break;}}if(n != 1){P.push_back(n);E.push_back(1);}RE{MO(P),MO(E)};}TE <TY LD>auto PrimeFactorisation(CO LD& ld,int n)-> enable_if_t<!IsPE<LD>,pair<VE<int>,VE<int>>>{AS(n > 0);VE<int> P{};VE<int> E{};if(n > 1){P.push_back(ld[n]);E.push_back(1);n /= ld[n];}WH(n > 1){if(P.back()!= ld[n]){P.push_back(ld[n]);E.push_back(1);}else{E.back()++;}n /= ld[n];}RE{MO(P),MO(E)};}TE <TY PE,TY INT>auto PrimePowerFactorisation(CO PE& pe,INT n)-> enable_if_t<IsPE<PE>,tuple<VE<INT>,VE<int>,VE<INT>>>{AS(n > 0);VE<INT> P{};VE<int> E{};VE<INT> Q{};CRI le = pe.length();for(int i = 0;i < le;i++){auto& p = pe[i];if(n % p == 0){int e = 1;INT q = p;WH((n /= p)% p == 0){e++;q *= p;}P.push_back(p);E.push_back(e);Q.push_back(q);}else if(n / p < p){break;}}if(n != 1){P.push_back(n);E.push_back(1);Q.push_back(n);}RE{MO(P),MO(E),MO(Q)};}TE <TY LD>auto PrimePowerFactorisation(CO LD& ld,int n)-> enable_if_t<!IsPE<LD>,tuple<VE<int>,VE<int>,VE<int>>>{AS(n > 0);VE<int> P{};VE<int> E{};VE<int> Q{};if(n > 1){P.push_back(ld[n]);E.push_back(1);Q.push_back(ld[n]);n /= ld[n];}WH(n > 1){if(P.back()!= ld[n]){P.push_back(ld[n]);E.push_back(1);Q.push_back(ld[n]);}else{Q.back()*= ld[n];E.back()++;}n /= ld[n];}RE{MO(P),MO(E),MO(Q)};}

TE <TY INT> INT CountDivisorBody(VE<int>& E)NE{CO int LE = E.SZ();INT AN = 1;for(int i = 0;i < LE;i++){AN *= ++E[i];}RE AN;}TE <TY PE,TY INT>INT CountDivisor(CO PE& pe,INT n)NE{auto[P,E]= PrimeFactorisation(pe,MO(n));RE CountDivisorBody<INT>(E);}

TE <TY INT> VE<INT> EnumerateDivisorBody(CO VE<INT>& P,VE<int>& E){CO int le = P.SZ();VE AN(CountDivisorBody<INT>(E),INT(1));int SZ = 1;for(int i = 0;i < le;i++){auto& P_i = P[i];auto& E_i = E[i];INT q = 1;int j_shift = 0;for(int e = 1;e < E_i;e++){q *= P_i;j_shift += SZ;for(int j = 0;j < SZ;j++){AN[j + j_shift]= AN[j]* q;}}SZ *= E_i;}RE AN;}TE <TY PE,TY INT>auto EnumerateDivisor(CO PE& pe,INT n)-> enable_if_t<IsPE<PE>,VE<INT>>{auto[P,E]= PrimeFactorisation(pe,MO(n));RE EnumerateDivisorBody(P,E);}TE <TY LD,TY INT>auto EnumerateDivisor(CO LD& ld,INT n)-> enable_if_t<!IsPE<LD>,VE<INT>>{VE<INT> P{};VE<int> E{};WH(n > 1){auto& p = ld[n];int e = 1;WH((n /= p)% p == 0){e++;}P.push_back(p);E.push_back(e);}RE EnumerateDivisorBody(P,E);}TE <TY INT>VE<VE<INT>> TotalEnumerateDivisor(CO INT& SZ)NE{VE<VE<INT>> AN(SZ);for(INT d = 1;d < SZ;d++){for(INT n = 0;n < SZ;n += d){AN[n].push_back(d);}}RE AN;}
#endif


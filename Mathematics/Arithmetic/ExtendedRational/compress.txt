#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Arithmetic/ExtendedRational/a_Body.hpp"
#else
TE <TY INT1,TY INT2>INT1 GCD(CO INT1& b_0,CO INT2& b_1){INT1 a_0 = b_0 < 0?-b_0:b_0;INT1 a_1 = b_1 < 0?-b_1:b_1;WH(a_1 != 0){swap(a_0 %= a_1,a_1);}RE a_0;}TE <TY INT1,TY INT2> IN INT1 LCM(CO INT1& b_0,CO INT2& b_1){RE(b_0 == 0 && b_1 == 0)?0:(b_0 / GCD(b_0,b_1))* b_1;}

#define DC_OF_OP_FOR_EXTENED_RATIONAL(OPR)CE ExtendedRational<T>& OP OPR ## =(CO ExtendedRational<T>& r)NE;CE ExtendedRational<T> OP OPR(CO ExtendedRational<T>& r)CO NE
#define DF_OF_OP_FOR_EXTENED_RATIONAL(OPR)TE <TY T> CE ExtendedRational<T>& ExtendedRational<T>::OP OPR ## =(CO ExtendedRational<T>& r)NE{RE *TH = *TH + r;}
#define DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(OPR)TE <TY T,TY ARG> CE ExtendedRational<T> OP OPR(CO ARG& t,CO ExtendedRational<T>& r)NE
TE <TY T>CL ExtendedRational{PU:T m_n;T m_d;CE ExtendedRational(CO T& n = 0,CO T& d = 1,CO bool& reduced = false);CE ExtendedRational(CO ExtendedRational<T>& r);CE ExtendedRational(ExtendedRational<T>&& r);CE ExtendedRational<T>& OP=(ExtendedRational<T> r)NE;CE bool OP==(CO ExtendedRational<T>& r)CO NE;CE bool OP!=(CO ExtendedRational<T>& r)CO NE;CE bool OP<=(CO ExtendedRational<T>& r)CO NE;CE bool OP>=(CO ExtendedRational<T>& r)CO NE;CE bool OP<(CO ExtendedRational<T>& r)CO NE;CE bool OP>(CO ExtendedRational<T>& r)CO NE;DC_OF_OP_FOR_EXTENED_RATIONAL(+);DC_OF_OP_FOR_EXTENED_RATIONAL(-);CE ExtendedRational<T> OP-()CO NE;DC_OF_OP_FOR_EXTENED_RATIONAL(*);CE ExtendedRational<T> Inverse()CO NE;DC_OF_OP_FOR_EXTENED_RATIONAL(/);CE CO T& GetNumerator()CO NE;CE CO T& GetDenominator()CO NE;};
TE <TY T> CE ExtendedRational<T>::ExtendedRational(CO T& n,CO T& d,CO bool& reduced):m_n(n),m_d(d){AS(m_n != 0 || m_d != 0);if(m_d == 0){m_n = 1;}else{if(m_d != 1 && !reduced){CO T gcd = GCD(m_n,m_d);AS(gcd != 0);m_n /= gcd;m_d /= gcd;}if(m_d < 0){m_n *= -1;m_d *= -1;}}}TE <TY T> CE ExtendedRational<T>::ExtendedRational(CO ExtendedRational<T>& r):m_n(r.m_n),m_d(r.m_d){}TE <TY T> CE ExtendedRational<T>::ExtendedRational(ExtendedRational<T>&& r):m_n(MO(r.m_n)),m_d(MO(r.m_d)){}TE <TY T> CE ExtendedRational<T>& ExtendedRational<T>::OP=(ExtendedRational<T> r)NE{m_n = MO(r.m_n);m_d = MO(r.m_d);RE *TH;}TE <TY T> CE bool ExtendedRational<T>::OP==(CO ExtendedRational<T>& r)CO NE{RE m_n == r.m_n && m_d == r.m_d;}TE <TY T> CE bool ExtendedRational<T>::OP!=(CO ExtendedRational<T>& r)CO NE{RE !(*TH == r);}TE <TY T> CE bool ExtendedRational<T>::OP<=(CO ExtendedRational<T>& r)CO NE{RE *TH == r || *TH < r;}TE <TY T> CE bool ExtendedRational<T>::OP>=(CO ExtendedRational<T>& r)CO NE{RE r <= *TH;}TE <TY T> CE bool ExtendedRational<T>::OP<(CO ExtendedRational<T>& r)CO NE{RE m_d != 0 &&(r - *TH).m_n > 0;}TE <TY T> CE bool ExtendedRational<T>::OP>(CO ExtendedRational<T>& r)CO NE{RE r < *TH;}DF_OF_OP_FOR_EXTENED_RATIONAL(+);DF_OF_OP_FOR_EXTENED_RATIONAL(-);DF_OF_OP_FOR_EXTENED_RATIONAL(*);DF_OF_OP_FOR_EXTENED_RATIONAL(/);TE <TY T> CE ExtendedRational<T> ExtendedRational<T>::OP+(CO ExtendedRational<T>& r)CO NE{CO T gcd = GCD(m_d,r.m_d),d = gcd == 0?gcd:r.m_d / gcd;RE gcd == 0?*TH:ExtendedRational<T>{m_n * d + r.m_n *(m_d / gcd),m_d * d};}TE <TY T> CE ExtendedRational<T> ExtendedRational<T>::OP-()CO NE{RE ExtendedRational<T>{-m_n,m_d,true};}TE <TY T> CE ExtendedRational<T> ExtendedRational<T>::OP-(CO ExtendedRational<T>& r)CO NE{RE *TH +(-r);}TE <TY T> CE ExtendedRational<T> ExtendedRational<T>::OP*(CO ExtendedRational<T>& r)CO NE{CO T gcd1 = GCD(m_n,r.m_d),gcd2 = GCD(m_d,r.m_n);RE gcd1 == 0?r:gcd2 == 0?*TH:ExtendedRational<T>{(m_n / gcd1)*(r.m_n / gcd2),(m_d / gcd2)*(r.m_d / gcd1),true};}TE <TY T> CE ExtendedRational<T> ExtendedRational<T>::Inverse()CO NE{RE ExtendedRational<T>{m_d,m_n,true};}TE <TY T> CE ExtendedRational<T> ExtendedRational<T>::OP/(CO ExtendedRational<T>& r)CO NE{RE *TH * r.Inverse();}TE <TY T> CE CO T& ExtendedRational<T>::GetNumerator()CO NE{RE m_n;}TE <TY T> CE CO T& ExtendedRational<T>::GetDenominator()CO NE{RE m_d;}TE <TY T> CE bool OP==(CO T& n,CO ExtendedRational<T>& r)NE{RE n * r.GetDenominator()== r.GetNumerator();}TE <TY T> CE bool OP!=(CO T& n,CO ExtendedRational<T>& r)NE{RE !(n == r);}TE <TY T> CE bool OP<=(CO T& n,CO ExtendedRational<T>& r)NE{RE n * r.GetDenominator()<= r.GetNumerator();}TE <TY T> CE bool OP>=(CO T& n,CO ExtendedRational<T>& r)NE{RE r <= n;}TE <TY T> CE bool OP<(CO T& n,CO ExtendedRational<T>& r)NE{RE n * r.GetDenominator()< r.GetNumerator();}TE <TY T> CE bool OP>(CO T& n,CO ExtendedRational<T>& r)NE{RE r < n;}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(+){CO T& d = r.GetDenominator();RE ExtendedRational(t * d + r.GetNumerator(),d,true);}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(-){CO T& d = r.GetDenominator();RE ExtendedRational(t * d - r.GetNumerator(),d,true);}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(*){RE ExtendedRational<T>(t)* r;}DC_OF_NON_MEMBER_OP_FOR_EXTENED_RATIONAL(/){RE ExtendedRational<T>(t)/ r;}TE <TY T,CL Traits> IN IS& OP>>(IS& is,ExtendedRational<T>& r){T temp;cin >> temp;r = temp;RE cin;}TE <TY T,CL Traits> IN OS& OP<<(OS& os,CO ExtendedRational<T>& r){RE os << r.GetNumerator()<< "/" << r.GetDenominator();}

TE <TY T> DC_OF_HASH(ExtendedRational<T>);
TE <TY T> IN size_t hash<ExtendedRational<T>>::OP()(CO ExtendedRational<T>& r)CO{ST CO size_t seed =(GetRand(1e3,1e8)<< 1)| 1;ST CO hash<T> h;RE(h(r.GetNumerator())* seed)^ h(r.GetDenominator());}
#endif

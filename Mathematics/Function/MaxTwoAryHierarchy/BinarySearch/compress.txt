#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Function/MaxTwoAryHierarchy/BinarySearch/a_Body.hpp"
#else
#define DC_OF_REVERSED_RELATION(OPR)IN bool OP OPR(CO Reversed<T>& t)CO
#define DF_OF_REVERSED_RELATION(OPR)TE <TY T> IN bool Reversed<T>::OP OPR(CO Reversed<T>& t)CO{RE t.m_t OPR m_t;}
#define DC_OF_REVERSED_AR(OPR,TYPE)IN Reversed<T>& OP OPR ## =(CO TYPE& t);IN Reversed<T> OP OPR(CO TYPE& t)CO;
#define DF_OF_REVERSED_AR(OPR,TYPE,OBJ)TE <TY T> IN Reversed<T>& Reversed<T>::OP OPR ## =(CO TYPE& t){m_t OPR ## = OBJ;RE *TH;}TE <TY T> IN Reversed<T> Reversed<T>::OP OPR(CO TYPE& t)CO{RE MO(Reversed<T>(*TH)OPR ## = t);}
TE <TY T>CL Reversed{PU:T m_t;IN Reversed(CO Reversed<T>& t);IN Reversed(Reversed<T>& t);IN Reversed(Reversed<T>&& t);TE <TY...Args> IN Reversed(Args&&... args);IN Reversed<T>& OP=(Reversed<T> t);DC_OF_REVERSED_RELATION(==);DC_OF_REVERSED_RELATION(!=);DC_OF_REVERSED_RELATION(<);DC_OF_REVERSED_RELATION(>);DC_OF_REVERSED_RELATION(<=);DC_OF_REVERSED_RELATION(>=);DC_OF_REVERSED_AR(+,Reversed<T>);IN Reversed<T> OP-()CO;DC_OF_REVERSED_AR(-,Reversed<T>);DC_OF_REVERSED_AR(*,Reversed<T>);DC_OF_REVERSED_AR(/,Reversed<T>);DC_OF_REVERSED_AR(%,Reversed<T>);DC_OF_REVERSED_AR(<<,int);DC_OF_REVERSED_AR(>>,int);IN T& Ref()NE;IN CO T& Get()CO NE;IN T&& MO()NE;};
TE <TY T> IN Reversed<T>::Reversed(CO Reversed<T>& t):m_t(t.m_t){}TE <TY T> IN Reversed<T>::Reversed(Reversed<T>& t):m_t(t.m_t){}TE <TY T> IN Reversed<T>::Reversed(Reversed<T>&& t):m_t(t.MO()){}TE <TY T> TE <TY...Args> IN Reversed<T>::Reversed(Args&&... args):m_t(forward<Args>(args)...){}TE <TY T> IN Reversed<T>& Reversed<T>::OP=(Reversed<T> t){m_t = t.MO();RE *TH;}TE <TY T> IN T& Reversed<T>::Ref()NE{RE m_t;}TE <TY T> IN CO T& Reversed<T>::Get()CO NE{RE m_t;}TE <TY T> IN T&& Reversed<T>::MO()NE{RE std::MO(m_t);}DF_OF_REVERSED_RELATION(==);DF_OF_REVERSED_RELATION(!=);DF_OF_REVERSED_RELATION(<);DF_OF_REVERSED_RELATION(>);DF_OF_REVERSED_RELATION(<=);DF_OF_REVERSED_RELATION(>=);DF_OF_REVERSED_AR(+,Reversed<T>,t.m_t);TE <TY T> IN Reversed<T> Reversed<T>::OP-()CO{RE Reversed<T>(-m_t);}DF_OF_REVERSED_AR(-,Reversed<T>,t.m_t);DF_OF_REVERSED_AR(*,Reversed<T>,t.m_t);DF_OF_REVERSED_AR(/,Reversed<T>,t.m_t);DF_OF_REVERSED_AR(%,Reversed<T>,t.m_t);DF_OF_REVERSED_AR(<<,int,t);DF_OF_REVERSED_AR(>>,int,t);

TE <TY U,TY V,TY X>CL VirtualTwoAryHierarchyIntersection{PU:VI X Intersection(CO U& u0,CO V& v0,CO U& u1,CO V& v1)= 0;};TE <TY U,TY V,TY X,TY FUNC>CL VirtualMaxTwoAryHierarchy:VI PU VirtualTwoAryHierarchyIntersection<U,V,X>{PU:FUNC m_func;X m_x_min;X m_x_max;map<U,pair<V,X> > m_uvx;map<X,U> m_xu;IN VirtualMaxTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2);VO SetMax(CO U& u,CO V& v);tuple<ret_t<FUNC,CO U&,CO V&,CO X&>,U,V> Get(CO X& x);};TE <TY U,TY V,TY X,TY FUNC>CL ReversedTwoAryHierarchy:PU FUNC{PU:IN ReversedTwoAryHierarchy(FUNC&& func);IN Reversed<ret_t<FUNC,CO U&,CO V&,CO X&>> OP()(CO Reversed<U>& u,CO Reversed<V>& v,CO X& x);};TE <TY U,TY V,TY X,TY FUNC>CL VirtualMinTwoAryHierarchy:PU VirtualMaxTwoAryHierarchy<Reversed<U>,Reversed<V>,X,ReversedTwoAryHierarchy<U,V,X,FUNC>>{PU:IN VirtualMinTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2);IN VO SetMin(CO U& u,CO V& v);IN tuple<ret_t<FUNC,CO U&,CO V&,CO X&>,U,V> Get(CO X& x);};TE <TY U,TY V,TY X,TY INTERSECTION>CL AbstractTwoAryHierarchyIntersection:VI PU VirtualTwoAryHierarchyIntersection<U,V,X>{PU:INTERSECTION m_intersection;IN AbstractTwoAryHierarchyIntersection(INTERSECTION intersection);IN X Intersection(CO U& u0,CO V& v0,CO U& u1,CO V& v1);};TE <TY U,TY V,TY X,TY FUNC,TY INTERSECTION>CL AbstractMaxTwoAryHierarchy:PU VirtualMaxTwoAryHierarchy<U,V,X,FUNC>,PU AbstractTwoAryHierarchyIntersection<U,V,X,INTERSECTION>{PU:IN AbstractMaxTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2,INTERSECTION intersection);};TE <TY U,TY V,TY X,TY FUNC,TY INTERSECTION>CL AbstractMinTwoAryHierarchy:PU VirtualMinTwoAryHierarchy<U,V,X,FUNC>,PU AbstractTwoAryHierarchyIntersection<U,V,X,INTERSECTION>{PU:IN AbstractMinTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2,INTERSECTION intersection);};
TE <TY U,TY V,TY X,TY FUNC> IN VirtualMaxTwoAryHierarchy<U,V,X,FUNC>::VirtualMaxTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2):m_func(MO(func)),m_x_min(x_min),m_x_max(x_max),m_uvx(),m_xu(){AS(m_x_min <= m_x_max);}TE <TY U,TY V,TY X,TY FUNC> IN VirtualMinTwoAryHierarchy<U,V,X,FUNC>::VirtualMinTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2):VirtualMaxTwoAryHierarchy<Reversed<U>,Reversed<V>,X,ReversedTwoAryHierarchy<U,V,X,FUNC>>(MO(func),x_min,x_max,dummy1,dummy2){}TE <TY U,TY V,TY X,TY FUNC> IN ReversedTwoAryHierarchy<U,V,X,FUNC>::ReversedTwoAryHierarchy(FUNC&& func):FUNC(MO(func)){}TE <TY U,TY V,TY X,TY FUNC> IN Reversed<ret_t<FUNC,CO U&,CO V&,CO X&>> ReversedTwoAryHierarchy<U,V,X,FUNC>::OP()(CO Reversed<U>& u,CO Reversed<V>& v,CO X& x){RE Reversed<ret_t<FUNC,CO U&,CO V&,CO X&>>(FUNC::OP()(u.Get(),v.Get(),x));}TE <TY U,TY V,TY X,TY FUNC>VO VirtualMaxTwoAryHierarchy<U,V,X,FUNC>::SetMax(CO U& u,CO V& v){if(m_uvx.empty()){AS(m_xu.empty());m_uvx[u]={v,m_x_min};m_xu[m_x_min]= u;}auto IT_right = m_uvx.lower_bound(u),BE = m_uvx.BE();auto EN = m_uvx.EN();if(IT_right != EN){CO U& u0 = IT_right->first;auto&[v0,x0]= IT_right->second;if(u == u0){if(v <= v0){RE;}m_xu.erase(x0);if(IT_right == BE){if(++BE == EN){m_uvx[u]={v,m_x_min};m_xu[m_x_min]= u;RE;}}IT_right = m_uvx.erase(IT_right);}}auto IT_left = IT_right;if(IT_left == BE){CO U& u0 = IT_left->first;auto&[v0,x0]= IT_left->second;if(m_x_min >= TH->Intersection(u,v,u0,v0)){RE;}IT_left = EN;}else if(IT_left == EN){IT_left = m_uvx.lower_bound(m_uvx.rBE()->first);CO U& u0 = IT_left->first;auto&[v0,x0]= IT_left->second;if(TH->Intersection(u0,v0,u,v)>= m_x_max){RE;}}else{--IT_left;CO U& u0 = IT_left->first;auto&[v0,x0]= IT_left->second;CO U& u1 = IT_right->first;auto&[v1,x1]= IT_right->second;if(TH->Intersection(u0,v0,u,v)>= TH->Intersection(u,v,u1,v1)){RE;}}if(IT_right != EN){bool valid = true;WH(valid){auto IT_right_copy = IT_right++;CO U& u0 = IT_right_copy->first;auto&[v0,x0]= IT_right_copy->second;m_xu.erase(x0);x0 = TH->Intersection(u,v,u0,v0);bool reMO = true;if(IT_right == EN){valid = false;reMO = m_x_max < x0;}else if(x0 < IT_right->second.second){valid = false;reMO = false;}if(reMO){m_uvx.erase(IT_right_copy);}else{m_xu[x0]= u0;}}}X x = m_x_min;if(IT_left != EN){WH(true){CO U& u1 = IT_left->first;auto&[v1,x1]= IT_left->second;if(x1 <(x = TH->Intersection(u1,v1,u,v))){break;}m_xu.erase(x1);if(IT_left == BE){m_uvx.erase(IT_left);break;}m_uvx.erase(IT_left--);}}m_uvx[u]={v,x = min(max(m_x_min,x),m_x_max)};m_xu[x]= u;RE;}TE <TY U,TY V,TY X,TY FUNC>VO VirtualMinTwoAryHierarchy<U,V,X,FUNC>::SetMin(CO U& u,CO V& v){TH->SetMax(u,v);}TE <TY U,TY V,TY X,TY FUNC>tuple<ret_t<FUNC,CO U&,CO V&,CO X&>,U,V> VirtualMaxTwoAryHierarchy<U,V,X,FUNC>::Get(CO X& x){AS(!m_uvx.empty()&& !m_xu.empty()&& m_x_min <= x && x <= m_x_max);auto IT_next = m_xu.upper_bound(x);auto&[x0,u0]= *(--IT_next);auto IT = m_uvx.lower_bound(u0);CO U& u1 = IT->first;auto&[v1,x1]= IT->second;RE{m_func(u1,v1,x),u1,v1};}TE <TY U,TY V,TY X,TY FUNC> IN tuple<ret_t<FUNC,CO U&,CO V&,CO X&>,U,V> VirtualMinTwoAryHierarchy<U,V,X,FUNC>::Get(CO X& x){auto[y,u,v]= VirtualMaxTwoAryHierarchy<Reversed<U>,Reversed<V>,X,ReversedTwoAryHierarchy<U,V,X,FUNC>>::Get(x);RE{y.MO(),u.MO(),v.MO()};}TE <TY U,TY V,TY X,TY INTERSECTION>IN AbstractTwoAryHierarchyIntersection<U,V,X,INTERSECTION>::AbstractTwoAryHierarchyIntersection(INTERSECTION intersection):m_intersection(MO(intersection)){}TE <TY U,TY V,TY X,TY INTERSECTION>IN X AbstractTwoAryHierarchyIntersection<U,V,X,INTERSECTION>::Intersection(CO U& u0,CO V& v0,CO U& u1,CO V& v1){AS(u0 < u1);RE m_intersection(u0,v0,u1,v1);}TE <TY U,TY V,TY X,TY FUNC,TY INTERSECTION> IN AbstractMaxTwoAryHierarchy<U,V,X,FUNC,INTERSECTION>::AbstractMaxTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2,INTERSECTION intersection):VirtualMaxTwoAryHierarchy<U,V,X,FUNC>(MO(func),x_min,x_max,dummy1,dummy2),AbstractTwoAryHierarchyIntersection<U,V,X,INTERSECTION>(MO(intersection)){}TE <TY U,TY V,TY X,TY FUNC,TY INTERSECTION> IN AbstractMinTwoAryHierarchy<U,V,X,FUNC,INTERSECTION>::AbstractMinTwoAryHierarchy(FUNC func,CO X& x_min,CO X& x_max,CO U& dummy1,CO V& dummy2,INTERSECTION intersection):VirtualMinTwoAryHierarchy<U,V,X,FUNC>(MO(func),x_min,x_max,dummy1,dummy2),AbstractTwoAryHierarchyIntersection<U,V,X,INTERSECTION>(MO(intersection)){}

TE <TY U,TY V,TY INT,TY FUNC>CL TwoAryHierarchyBinarySearchIntersection:VI PU VirtualTwoAryHierarchyIntersection<U,V,INT>{PU:FUNC* m_p_func;CO INT* m_p_x_min;CO INT* m_p_x_max;IN TwoAryHierarchyBinarySearchIntersection(FUNC& func,CO INT& x_min,CO INT& x_max);INT Intersection(CO U& u0,CO V& v0,CO U& u1,CO V& v1);};TE <TY U,TY V,TY INT,TY FUNC>CL MaxTwoAryHierarchyBinarySearch:PU VirtualMaxTwoAryHierarchy<U,V,INT,FUNC>,PU TwoAryHierarchyBinarySearchIntersection<U,V,INT,FUNC>{PU:IN MaxTwoAryHierarchyBinarySearch(FUNC func,CO INT& x_min,CO INT& x_max,CO U& dummy1,CO V& dummy2);};TE <TY U,TY V,TY INT,TY FUNC>CL MinTwoAryHierarchyBinarySearch:PU VirtualMinTwoAryHierarchy<U,V,INT,FUNC>,PU TwoAryHierarchyBinarySearchIntersection<Reversed<U>,Reversed<V>,INT,ReversedTwoAryHierarchy<U,V,INT,FUNC>>{PU:IN MinTwoAryHierarchyBinarySearch(FUNC func,CO INT& x_min,CO INT& x_max,CO U& dummy1,CO V& dummy2);};
TE <TY U,TY V,TY INT,TY FUNC> IN TwoAryHierarchyBinarySearchIntersection<U,V,INT,FUNC>::TwoAryHierarchyBinarySearchIntersection(FUNC& func,CO INT& x_min,CO INT& x_max):m_p_func(&func),m_p_x_min(&x_min),m_p_x_max(&x_max){}TE <TY U,TY V,TY INT,TY FUNC> INT TwoAryHierarchyBinarySearchIntersection<U,V,INT,FUNC>::Intersection(CO U& u0,CO V& v0,CO U& u1,CO V& v1){INT r = *m_p_x_max;if((*m_p_func)(u1,v1,r)<(*m_p_func)(u0,v0,r)){RE r + 1;}INT l = *m_p_x_min - 1;WH(l + 1 < r){INT m =(l + r)>> 1;((*m_p_func)(u1,v1,m)<(*m_p_func)(u0,v0,m)?l:r)= m;}RE r;}TE <TY U,TY V,TY INT,TY FUNC> IN MaxTwoAryHierarchyBinarySearch<U,V,INT,FUNC>::MaxTwoAryHierarchyBinarySearch(FUNC func,CO INT& x_min,CO INT& x_max,CO U& dummy1,CO V& dummy2):VirtualMaxTwoAryHierarchy<U,V,INT,FUNC>(MO(func),x_min,x_max,dummy1,dummy2),TwoAryHierarchyBinarySearchIntersection<U,V,INT,FUNC>(TH->m_func,TH->m_x_min,TH->m_x_max){}TE <TY U,TY V,TY INT,TY FUNC> IN MinTwoAryHierarchyBinarySearch<U,V,INT,FUNC>::MinTwoAryHierarchyBinarySearch(FUNC func,CO INT& x_min,CO INT& x_max,CO U& dummy1,CO V& dummy2):VirtualMinTwoAryHierarchy<U,V,INT,FUNC>(MO(func),x_min,x_max,dummy1,dummy2),TwoAryHierarchyBinarySearchIntersection<Reversed<U>,Reversed<V>,INT,ReversedTwoAryHierarchy<U,V,INT,FUNC>>(TH->m_func,TH->m_x_min,TH->m_x_max){}
#endif

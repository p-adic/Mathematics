// êÊÇ…../compress.txtÇì\ÇÈÅB

TE <TY T,TY PATH,TY ACYCLIC_GRAPH> IN VO TopologicalSort_Body(ACYCLIC_GRAPH& G,VE<T>& AN,CO PATH& e,VE<bool>& found,int& num);TE <TY T,TY ACYCLIC_GRAPH> IN VO TopologicalSort_Body(ACYCLIC_GRAPH& G,VE<T>& AN,CO T& t,VE<bool>& found,int& num);TE <TY T,TY ACYCLIC_GRAPH>VO TopologicalSort_Body(ACYCLIC_GRAPH& G,VE<T>& AN,CO T& t,CRI i,VE<bool>& found,int& num){if(!found[i]){found[i]= true;auto&& edge_i = G.Edge(t);for(auto IT = edge_i.BE(),EN = edge_i.EN();IT != EN;IT++){TopologicalSort_Body(G,AN,*IT,found,num);}AN[num--]= t;}RE;}TE <TY T,TY PATH,TY ACYCLIC_GRAPH> IN VO TopologicalSort_Body(ACYCLIC_GRAPH& G,VE<T>& AN,CO PATH& e,VE<bool>& found,int& num){TopologicalSort_Body(G,AN,get<0>(e),found,num);}TE <TY T,TY ACYCLIC_GRAPH> IN VO TopologicalSort_Body(ACYCLIC_GRAPH& G,VE<T>& AN,CO T& t,VE<bool>& found,int& num){TopologicalSort_Body(G,AN,t,G.Enumeration_inv(t),found,num);}TE <TY ACYCLIC_GRAPH>VE<inner_t<ACYCLIC_GRAPH>> TopologicalSort(ACYCLIC_GRAPH& G){CRI SZ = G.SZ();VE<inner_t<ACYCLIC_GRAPH>> AN(SZ);VE<bool> found(SZ);int num = SZ - 1;for(int i = 0;i < SZ;i++){TopologicalSort_Body(G,AN,G.Enumeration(i),i,found,num);}RE AN;}TE <TY ACYCLIC_GRAPH,TY MONOID> pair<inner_t<MONOID>,LI<inner_t<ACYCLIC_GRAPH>>> GetLongestWalk(ACYCLIC_GRAPH& G,MONOID M){US T = inner_t<ACYCLIC_GRAPH>;US U = inner_t<MONOID>;CRI SZ = G.SZ();CO U& one = M.One();if(SZ == 0){RE{one,LI<T>()};}VE<T> top_sort = TopologicalSort(G);VE<U> dp(SZ,one);VE<int> prev(SZ,-1);for(auto IT_vertex = top_sort.BE(),EN_vertex = top_sort.EN();IT_vertex != EN_vertex;IT_vertex++){auto&& edge_i = G.Edge(*IT_vertex);auto&& i = G.Enumeration_inv(*IT_vertex);CO U& dp_i = dp[i];for(auto IT_edge_i = edge_i.BE(),EN_edge_i = edge_i.EN();IT_edge_i != EN_edge_i;IT_edge_i++){auto&[t,u]= *IT_edge_i;auto&& j = G.Enumeration_inv(t);U& dp_j = dp[j];if(!(dp_i < dp_j)){dp_j = M.Product(dp_i,u);prev[j]= i;}}}U AN = one;int EN_num = -1;for(int i = 0;i < SZ;i++){CO U& dp_i = dp[i];if(EN_num == -1 || AN < dp_i){AN = dp_i;EN_num = i;}}LI<T> path{};WH(EN_num != -1){path.push_front(G.Enumeration(EN_num));EN_num = prev[EN_num];}RE{MO(AN),MO(path)};}

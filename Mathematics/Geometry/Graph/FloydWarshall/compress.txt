#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/FloydWarshall/a_Body.hpp"
#else
TE <TY U,TY MONOID,TY SEMIGROUP>CL VirtualSemirng{PU:VI U Sum(CO U& u0,CO U& u1)= 0;VI CO U& Zero()CO NE = 0;VI U Product(CO U& u0,CO U& u1)= 0;VI MONOID& AdditiveMonoid()NE = 0;VI SEMIGROUP& MultiplicativeSemigroup()NE = 0;US type = U;};TE <TY U,TY MONOID,TY SEMIGROUP>CL AbstractSemirng:VI PU VirtualSemirng<U,MONOID,SEMIGROUP>{PU:MONOID m_R0;SEMIGROUP m_R1;IN AbstractSemirng(MONOID R0,SEMIGROUP R1);IN U Sum(CO U& u0,CO U& u1);IN CO U& Zero()CO NE;IN U Product(CO U& u0,CO U& u1);IN MONOID& AdditiveMonoid()NE;IN SEMIGROUP& MultiplicativeSemigroup()NE;};TE <TY U>CL Semirng:PU AbstractSemirng<U,AdditiveMonoid<U>,MultiplicativeMagma<U>>{PU:IN Semirng();};
TE <TY U,TY MONOID,TY SEMIGROUP> IN AbstractSemirng<U,MONOID,SEMIGROUP>::AbstractSemirng(MONOID R0,SEMIGROUP R1):m_R0(MO(R0)),m_R1(MO(R1)){}TE <TY U> IN Semirng<U>::Semirng():AbstractSemirng<U,AdditiveMonoid<U>,MultiplicativeMagma<U>>(AdditiveMonoid<U>(),MultiplicativeMagma()){}TE <TY U,TY MONOID,TY SEMIGROUP> IN U AbstractSemirng<U,MONOID,SEMIGROUP>::Sum(CO U& u0,CO U& u1){RE m_R0.Sum(u0,u1);}TE <TY U,TY MONOID,TY SEMIGROUP> IN CO U& AbstractSemirng<U,MONOID,SEMIGROUP>::Zero()CO NE{RE m_R0.Zero();}TE <TY U,TY MONOID,TY SEMIGROUP> IN U AbstractSemirng<U,MONOID,SEMIGROUP>::Product(CO U& u0,CO U& u1){RE m_R1.Product(u0,u1);}TE <TY U,TY MONOID,TY SEMIGROUP> IN MONOID& AbstractSemirng<U,MONOID,SEMIGROUP>::AdditiveMonoid()NE{RE m_R0;}TE <TY U,TY MONOID,TY SEMIGROUP> IN SEMIGROUP& AbstractSemirng<U,MONOID,SEMIGROUP>::MultiplicativeSemigroup()NE{RE m_R1;}

TE <TY U>CL VirtualMeetSemilattice:VI PU VirtualMonoid<U>{PU:IN U Meet(U u0,CO U& u1);};TE <TY U>CL MinSemilattice:VI PU VirtualMeetSemilattice<U>,PU PointedSet<U>{PU:IN MinSemilattice(U infty_U);IN U Product(U u0,CO U& u1);};TE <TY U>CL MaxSemilattice:VI PU VirtualMeetSemilattice<U>,PU PointedSet<U>{PU:IN MaxSemilattice(U zero_U);IN U Product(U u0,CO U& u1);};
TE <TY U> IN U VirtualMeetSemilattice<U>::Meet(U u0,CO U& u1){RE TH->Product(MO(u0),u1);}TE <TY U> IN MinSemilattice<U>::MinSemilattice(U infty_U):PointedSet<U>(MO(infty_U)){}TE <TY U> IN MaxSemilattice<U>::MaxSemilattice(U zero_U):PointedSet<U>(MO(zero_U)){}TE <TY U> IN U MinSemilattice<U>::Product(U u0,CO U& u1){RE u0 < u1?MO(u0):u1;}TE <TY U> IN U MaxSemilattice<U>::Product(U u0,CO U& u1){RE u1 < u0?MO(u0):u1;}

TE <TY U,TY MEET_SEMILATTICE,TY SEMIGROUP>CL VirtualMeetSemirng:VI PU VirtualSemirng<U,MEET_SEMILATTICE,SEMIGROUP>{PU:IN CO U& Infty();IN U Meet(U u0,CO U& u1);};TE <TY U,TY SEMIGROUP>CL AbstractTropicalSemirng:VI PU VirtualMeetSemirng<U,MinSemilattice<U>,SEMIGROUP>,PU AbstractSemirng<U,MinSemilattice<U>,SEMIGROUP>{PU:IN AbstractTropicalSemirng(U infty_U,SEMIGROUP M);IN U Product(U u0,CO U& u1);};TE <TY U>CL AdditiveTropicalSemirng:PU AbstractTropicalSemirng<U,AdditiveMagma<U>>{PU:IN AdditiveTropicalSemirng(U infty_U);};TE <TY U>CL MultiplicativeTropicalSemirng:PU AbstractTropicalSemirng<U,MultiplicativeMagma<U>>{PU:IN MultiplicativeTropicalSemirng(U infty_U);};
TE <TY U,TY SEMIGROUP> IN AbstractTropicalSemirng<U,SEMIGROUP>::AbstractTropicalSemirng(U infty_U,SEMIGROUP M):AbstractSemirng<U,MinSemilattice<U>,SEMIGROUP>(MinSemilattice<U>(MO(infty_U)),MO(M)){}TE <TY U> IN AdditiveTropicalSemirng<U>::AdditiveTropicalSemirng(U infty_U):AbstractTropicalSemirng<U,AdditiveMagma<U>>(MO(infty_U),AdditiveMagma<U>()){}TE <TY U> IN MultiplicativeTropicalSemirng<U>::MultiplicativeTropicalSemirng(U infty_U):AbstractTropicalSemirng<U,MultiplicativeMagma<U>>(MO(infty_U),MultiplicativeMagma<U>()){}TE <TY U,TY MEET_SEMILATTICE,TY SEMIGROUP> IN CO U& VirtualMeetSemirng<U,MEET_SEMILATTICE,SEMIGROUP>::Infty(){RE TH->Zero();}TE <TY U,TY MEET_SEMILATTICE,TY SEMIGROUP> IN U VirtualMeetSemirng<U,MEET_SEMILATTICE,SEMIGROUP>::Meet(U u0,CO U& u1){RE TH->Sum(MO(u0),u1);}TE <TY U,TY SEMIGROUP> IN U AbstractTropicalSemirng<U,SEMIGROUP>::Product(U u0,CO U& u1){CO U& infty = TH->Infty();RE u0 < infty && u1 < infty?TH->MultiplicativeSemigroup().Product(MO(u0),u1):infty;}

TE <TY U,TY IDEMPOTENT_SEMIRNG>CL AbstractFloydWarshall{PU:IDEMPOTENT_SEMIRNG m_R;int m_SZ;CO VE<VE<U>>* m_p_d;IN AbstractFloydWarshall(IDEMPOTENT_SEMIRNG R,CO VE<VE<U>>& d ={});IN VO Initialise(CO VE<VE<U>>& d ={});VE<VE<U>> GetDistance();pair<VE<VE<U>>,VE<VE<int>>> GetPath();};TE <TY IDEMPOTENT_SEMIRNG> AbstractFloydWarshall(IDEMPOTENT_SEMIRNG)-> AbstractFloydWarshall<inner_t<IDEMPOTENT_SEMIRNG>,IDEMPOTENT_SEMIRNG>;TE <TY U>CL FloydWarshall:PU AbstractFloydWarshall<U,AdditiveTropicalSemirng<U>>{PU:IN FloydWarshall(U infty_U,CO VE<VE<U>>& d ={});};
TE <TY U,TY IDEMPOTENT_SEMIRNG> IN AbstractFloydWarshall<U,IDEMPOTENT_SEMIRNG>::AbstractFloydWarshall(IDEMPOTENT_SEMIRNG R,CO VE<VE<U>>& d):m_R(MO(R)),m_SZ(),m_p_d(){ST_AS(is_same_v<U,inner_t<IDEMPOTENT_SEMIRNG>>);Initialise(d);}TE <TY U> IN FloydWarshall<U>::FloydWarshall(U infty_U,CO VE<VE<U>>& d):AbstractFloydWarshall<U,AdditiveTropicalSemirng<U>>(MO(infty_U),d){}TE <TY U,TY IDEMPOTENT_SEMIRNG> IN VO AbstractFloydWarshall<U,IDEMPOTENT_SEMIRNG>::Initialise(CO VE<VE<U>>& d){m_p_d =(m_SZ = d.SZ())== 0?nullptr:&d;AS(m_SZ == 0 || m_SZ == int(d[0].SZ()));}TE <TY U,TY IDEMPOTENT_SEMIRNG>VE<VE<U>> AbstractFloydWarshall<U,IDEMPOTENT_SEMIRNG>::GetDistance(){auto& d = *m_p_d;auto AN = d;CO U& infty = m_R.Infty();for(int k = 0;k < m_SZ;k++){auto& AN_k = AN[k];for(int i = 0;i < m_SZ;i++){auto& AN_i = AN[i];CO U& AN_ik = AN_i[k];if(i != k && AN_ik != infty){for(int j = 0;j < m_SZ;j++){CO U& AN_kj = AN_k[j];if(i != j && k != j && AN_kj != infty){U& AN_ij = AN_i[j];AN_ij = m_R.Meet(MO(AN_ij),m_R.Product(AN_ik,AN_kj));}}}}}RE AN;}TE <TY U,TY IDEMPOTENT_SEMIRNG>pair<VE<VE<U>>,VE<VE<int>>> AbstractFloydWarshall<U,IDEMPOTENT_SEMIRNG>::GetPath(){auto& d = *m_p_d;auto weight = d;auto path = VE(m_SZ,VE(m_SZ,-1));CO U& infty = m_R.Infty();for(int k = 0;k < m_SZ;k++){auto& weight_k = weight[k];for(int i = 0;i < m_SZ;i++){auto& weight_i = weight[i];auto& path_i = path[i];CO U& weight_ik = weight_i[k];if(i != k && weight_ik != infty){for(int j = 0;j < m_SZ;j++){CO U& weight_kj = weight_k[j];if(i != j && k != j && weight_kj != infty){U& weight_ij = weight_i[j];U weight_curr = m_R.Product(weight_ik,weight_kj);if(weight_ij > weight_curr){weight_ij = MO(weight_curr);path_i[j]= k;}}}}}}RE{MO(weight),MO(path)};}
#endif


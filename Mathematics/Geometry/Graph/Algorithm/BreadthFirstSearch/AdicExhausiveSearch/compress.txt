#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/BreadthFirstSearch/AdicExhausiveSearch/a_Body.hpp"
#else
TE <TY INT> bool NextLoop(CRI SZ,CO VE<INT>& lower_bound,CO VE<INT>& upper_limit,VE<INT>& index){int depth = 0;WH(depth < SZ){if(++index[depth]< upper_limit[depth]){break;}index[depth]= lower_bound[depth];depth++;}RE depth < SZ;}TE <TY INT> bool NextLoop(CO VE<INT>& lower_bound,CO VE<INT>& upper_limit,VE<INT>& index){RE NextLoop(index.SZ(),lower_bound,upper_limit,index);}

TE <TY T,TY GRAPH>CL VirtualBreadthFirstSearch{PU:GRAPH& m_G;T m_not_found;bool m_initialised;LI<T> m_next;VE<bool> m_found;VE<T> m_prev;IN VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found);TE <TY Arg> IN VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);IN VO Initialise(LI<T> inits);IN VO Shift(CO T& init);IN VO Shift(LI<T> inits);IN CRI SZ()CO NE;IN VE<bool>::reference found(CO T& t);IN CO T& prev(CO T& t);IN T Next();TE <TY U = T> auto GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>;TE <TY U = T> auto GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>;pair<VE<int>,int> GetConnectedComponent();VI VO Push(LI<T>& next,CO T& t)= 0;TE <TY PATH> IN VO Push(LI<T>& next,CO PATH& p);};
TE <TY T,TY GRAPH> IN VirtualBreadthFirstSearch<T,GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_initialised(false),m_next(),m_found(),m_prev(){ST_AS(is_same_v<inner_t<GRAPH>,T>);}TE <TY T,TY GRAPH> TE <TY Arg> IN VirtualBreadthFirstSearch<T,GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(){m_initialised = true;CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_prev = VE<T>(V,m_not_found);}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);m_found[i]= true;}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(LI<T> inits){Initialise();m_next = MO(inits);CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);m_found[i]= true;}}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Shift(CO T& init){if(m_initialised){CRI V = SZ();auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < V);m_next.clear();if(! m_found[i]){m_next.push_back(init);m_found[i]= true;}}else{Initialise(init);}}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Shift(LI<T> inits){if(m_initialised){m_next.clear();CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);if(! m_found[i]){m_next.push_back(u);m_found[i]= true;}}}else{Initialise(MO(inits));}}TE <TY T,TY GRAPH> IN CRI VirtualBreadthFirstSearch<T,GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY T,TY GRAPH> IN VE<bool>::reference VirtualBreadthFirstSearch<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& VirtualBreadthFirstSearch<T,GRAPH>::prev(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY T,TY GRAPH> IN T VirtualBreadthFirstSearch<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO T t_curr = m_next.front();m_next.pop_front();auto&& edge = m_G.Edge(t_curr);for(auto& t:edge){auto&& i = m_G.Enumeration_inv(t);auto&& found_i = m_found[i];if(! found_i){Push(m_next,t);m_prev[i]= t_curr;found_i = true;}}RE t_curr;}TE <TY T,TY GRAPH> TE <TY U>auto VirtualBreadthFirstSearch<T,GRAPH>::GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>{Map<T,int> AN{};for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[*IT]= 0;}T t;WH((t = Next())!= m_not_found){if(AN.count(t) == 0){AN[t]= AN[m_prev[m_G.Enumeration_inv(t)]]+ 1;}}RE AN;}TE <TY T,TY GRAPH> TE <TY U>auto VirtualBreadthFirstSearch<T,GRAPH>::GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>{VE AN(SZ(),-1);for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[m_G.Enumeration_inv(*IT)]= 0;}T t;WH((t = Next())!= m_not_found){auto&& i = m_G.Enumeration_inv(t);int& AN_i = AN[i];AN_i == -1?AN_i = AN[m_G.Enumeration_inv(m_prev[i])]+ 1:AN_i;}RE AN;}TE <TY T,TY GRAPH>pair<VE<int>,int> VirtualBreadthFirstSearch<T,GRAPH>::GetConnectedComponent(){ST_AS(!is_same_v<GRAPH,MemorisationGraph<T,decldecay_t(m_G.edge())>>);CRI V = SZ();VE cc_num(V,-1);int count = 0;for(int i = 0;i < V;i++){if(cc_num[i]== -1){Shift(m_G.Enumeration(i));T t = Next();if(t != m_not_found){WH(t != m_not_found){cc_num[m_G.Enumeration_inv(t)]= count;t = Next();}count++;}}}RE{MO(cc_num),MO(count)};}TE <TY T,TY GRAPH> TE <TY PATH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Push(LI<T>& next,CO PATH& p){Push(next,get<0>(p));}

TE <TY T,TY GRAPH>CL BreadthFirstSearch:PU VirtualBreadthFirstSearch<T,GRAPH>{PU:TE <TY...Args> IN BreadthFirstSearch(GRAPH& G,CO T& not_found,Args&&... args);IN VO Push(LI<T>& next,CO T& t);};
TE <TY T,TY GRAPH> TE <TY...Args> IN BreadthFirstSearch<T,GRAPH>::BreadthFirstSearch(GRAPH& G,CO T& not_found,Args&&... args):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found,forward<Args>(args)...){}TE <TY T,TY GRAPH> IN VO BreadthFirstSearch<T,GRAPH>::Push(LI<T>& next,CO T& t){next.push_back(t);}

CL AdicExhausiveEdge{PU:CO int* m_p_V;CO int* m_p_N;CO int* m_p_N_minus;bool m_reversed;IN VE<int> OP()(CRI t);};CL AdicExhausiveSearch:PU BreadthFirstSearch<int,Graph<AdicExhausiveEdge>>{PU:Graph<AdicExhausiveEdge> m_G;CO int* m_p_V;int m_N;int m_N_minus;int m_digit;VE<int> m_N_PW;VE<int> m_valuation;IN AdicExhausiveSearch(CRI N,CRI V,CO bool& reversed = false);IN AdicExhausiveSearch(CRI N,CRI digit,CRI dummy,CO bool& reversed = false);IN VE<int> to_vec(int t);IN int to_int(CO VE<int>& a);IN VE<int> UnreachedAdjacentUpperboundOf(CRI t);IN VE<int> UnreachedAdjacentLowerboundOf(CRI t);IN VE<int> UnreachedProperUpperboundOf(CRI t);IN VE<int> UnreachedProperLowerboundOf(CRI t);IN VE<int> AdjacentUpperboundOf(CRI t);IN VE<int> ProperUpperboundOf(CRI t);IN VE<int> AdjacentLowerboundOf(CRI t);IN VE<int> ProperLowerboundOf(CRI t);IN bool NextPermutation(int& t);IN bool NextPermutation(VE<int>& S);IN int DigitOf(CRI t);IN CRI ValuationOf(CRI t);IN CRI PW(CRI digit)CO;ST IN int PW(int N,int digit);};
IN VE<int> AdicExhausiveEdge::OP()(CRI t){VE<int> AN{};int t_copy = t,N_PW = 1,temp;if(m_reversed){WH(t_copy > 0){if((temp = t - N_PW)>= 0 && t_copy % *m_p_N > 0){AN.push_back(temp);}t_copy /= *m_p_N;N_PW *= *m_p_N;}}else{WH(t_copy > 0){if((temp = t + N_PW)< *m_p_V && t_copy % *m_p_N < *m_p_N_minus){AN.push_back(temp);}t_copy /= *m_p_N;N_PW *= *m_p_N;}}RE AN;}IN AdicExhausiveSearch::AdicExhausiveSearch(CRI N,CRI V,CO bool& reversed):BreadthFirstSearch<int,Graph<AdicExhausiveEdge>>(m_G,-1),m_G(V,AdicExhausiveEdge()),m_p_V(&(m_G.SZ())),m_N(N),m_N_minus(m_N - 1),m_digit(0),m_N_PW(1,1),m_valuation(){auto& edge = m_G.edge();edge.m_p_V = m_p_V;edge.m_p_N = &m_N;edge.m_p_N_minus = &m_N_minus;edge.m_reversed = reversed;WH(V > m_N_PW.back()){m_digit++;m_N_PW.push_back(m_N_PW.back()* m_N);}}IN AdicExhausiveSearch::AdicExhausiveSearch(CRI N,CRI digit,CRI dummy,CO bool& reversed):AdicExhausiveSearch(N,PW(N,digit),reversed){}IN VE<int> AdicExhausiveSearch::to_vec(int t){AS(0 <= t && t < *m_p_V);VE<int> AN(m_digit);for(int d = 0;d < m_digit;d++){AN[d]= t % m_N;t /= m_N;}RE AN;}IN int AdicExhausiveSearch::to_int(CO VE<int>& a){int AN = 0;CO int SZ = a.SZ();AS(SZ <= m_digit);for(int d = 0;d < SZ;d++){AN += a[d]* m_N_PW[d];}RE AN;}IN VE<int> AdicExhausiveSearch::UnreachedAdjacentUpperboundOf(CRI t){AS(0 <= t && t < *m_p_V);VE<int> AN{};int t_copy = t,temp;for(int d = 0;t_copy < 0 && d < m_digit &&(temp = t + m_N_PW[d])< *m_p_V;d++){if(! TH->found(temp)&& t_copy % m_N < m_N_minus){AN.push_back(temp);}t_copy /= m_N;}RE AN;}IN VE<int> AdicExhausiveSearch::UnreachedProperUpperboundOf(CRI t){VE<int> AN{};auto index = to_vec(t),lower_bound = index,upper_limit = VE(m_digit,m_N);int temp;WH(NextLoop(m_digit,lower_bound,upper_limit,index)){if(! TH->found(temp = to_int(index))){AN.push_back(temp);}}RE AN;}IN VE<int> AdicExhausiveSearch::UnreachedAdjacentLowerboundOf(CRI t){AS(0 <= t && t < *m_p_V);VE<int> AN{};int t_copy = t,temp;for(int d = 0;t_copy < 0 && d < m_digit &&(temp = t - m_N_PW[d])>= 0;d++){if(! TH->found(temp)&& t_copy % m_N > 0){AN.push_back(temp);}t_copy /= m_N;}RE AN;}IN VE<int> AdicExhausiveSearch::UnreachedProperLowerboundOf(CRI t){VE<int> AN{0};auto index = VE(m_digit,0),lower_bound = index,upper_limit = to_vec(t);int temp;for(int d = 0;d < m_digit;d++){upper_limit[d]++;}WH(NextLoop(m_digit,lower_bound,upper_limit,index)){if(! TH->found(temp = to_int(index))){AN.push_back(temp);}}AN.pop_back();RE AN;}IN VE<int> AdicExhausiveSearch::AdjacentUpperboundOf(CRI t){AS(0 <= t && t < *m_p_V);VE<int> AN{};int t_copy = t,temp;for(int d = 0;t_copy < 0 && d < m_digit &&(temp = t + m_N_PW[d])< *m_p_V;d++){if(t_copy % m_N < m_N_minus){AN.push_back(temp);}t_copy /= m_N;}RE AN;}IN VE<int> AdicExhausiveSearch::ProperUpperboundOf(CRI t){VE<int> AN{};auto index = to_vec(t),lower_bound = index,upper_limit = VE(m_digit,m_N);WH(NextLoop(m_digit,lower_bound,upper_limit,index)){AN.push_back(to_int(index));}RE AN;}IN VE<int> AdicExhausiveSearch::AdjacentLowerboundOf(CRI t){AS(0 <= t);VE<int> AN{};int t_copy = t,temp;for(int d = 0;t_copy < 0 && d < m_digit &&(temp = t - m_N_PW[d])>= 0;d++){if(t_copy % m_N > 0){AN.push_back(temp);}t_copy /= m_N;}RE AN;}IN VE<int> AdicExhausiveSearch::ProperLowerboundOf(CRI t){VE<int> AN{0};auto index = VE(m_digit,0),lower_bound = index,upper_limit = to_vec(t);for(int d = 0;d < m_digit;d++){upper_limit[d]++;}WH(NextLoop(m_digit,lower_bound,upper_limit,index)){AN.push_back(to_int(index));}AN.pop_back();RE AN;}IN bool AdicExhausiveSearch::NextPermutation(int& t){auto S = to_vec(t);RE prev_permutation(S.BE(),S.EN())?(t = to_int(S))< *m_p_V:false;}IN bool AdicExhausiveSearch::NextPermutation(VE<int>& S){RE prev_permutation(S.BE(),S.EN())?to_int(S)< *m_p_V:false;}IN int AdicExhausiveSearch::DigitOf(CRI t){AS(0 <= t && t < *m_p_V);int d = 0,N_PW = 1;WH(t >= N_PW){d++;N_PW *= m_N;}RE d;}IN CRI AdicExhausiveSearch::ValuationOf(CRI t){ST unordered_map<int,int> g_v;ST int LE = 0;WH(g_v.count(t)== 0){AS(LE <= m_digit && t >= m_N_PW[LE]);g_v[m_N_PW[LE]]= LE;LE++;}RE g_v[t];}IN CRI AdicExhausiveSearch::PW(CRI digit)CO{AS(0 <= digit && digit <= m_digit);RE m_N_PW[digit];}IN int AdicExhausiveSearch::PW(int N,int digit){RE digit == 0?1:digit == 1?N:PW(N * N,digit >> 1)*((digit & 1)== 1?N:1);}
#endif

#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Algorithm/DepthFirstSearch/Tree/HeavyLightDecomposition/a_Body.hpp"
#else
TE <TY T,TY GRAPH>CL VirtualBreadthFirstSearch{PU:GRAPH& m_G;T m_not_found;bool m_initialised;LI<T> m_next;VE<bool> m_found;VE<T> m_prev;IN VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found);TE <TY Arg> IN VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);IN VO Initialise(LI<T> inits);IN VO Shift(CO T& init);IN VO Shift(LI<T> inits);IN CRI SZ()CO NE;IN VE<bool>::reference found(CO T& t);IN CO T& prev(CO T& t);IN T Next();TE <TY U = T> auto GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>;TE <TY U = T> auto GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>;pair<VE<int>,int> GetConnectedComponent();VE<T> GetNodeEnumeration();VE<T> GetReversedNodeEnumeration();VI VO Push(LI<T>& next,CO T& t)= 0;TE <TY PATH> IN VO Push(LI<T>& next,CO PATH& p);};
TE <TY T,TY GRAPH> IN VirtualBreadthFirstSearch<T,GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_initialised(false),m_next(),m_found(),m_prev(){ST_AS(is_same_v<inner_t<GRAPH>,T>);}TE <TY T,TY GRAPH> TE <TY Arg> IN VirtualBreadthFirstSearch<T,GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(){m_initialised = true;CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_prev = VE<T>(V,m_not_found);}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);m_found[i]= true;}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(LI<T> inits){Initialise();m_next = MO(inits);CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);m_found[i]= true;}}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Shift(CO T& init){if(m_initialised){CRI V = SZ();auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < V);m_next.clear();if(! m_found[i]){m_next.push_back(init);m_found[i]= true;}}else{Initialise(init);}}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Shift(LI<T> inits){if(m_initialised){m_next.clear();CRI V = SZ();for(auto& u:m_next){auto&& i = m_G.Enumeration_inv(u);AS(0 <= i && i < V);if(! m_found[i]){m_next.push_back(u);m_found[i]= true;}}}else{Initialise(MO(inits));}}TE <TY T,TY GRAPH> IN CRI VirtualBreadthFirstSearch<T,GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY T,TY GRAPH> IN VE<bool>::reference VirtualBreadthFirstSearch<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& VirtualBreadthFirstSearch<T,GRAPH>::prev(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY T,TY GRAPH> IN T VirtualBreadthFirstSearch<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO T t_curr = m_next.front();m_next.pop_front();for(auto& t:m_G.Edge(t_curr)){auto&& i = m_G.Enumeration_inv(t);auto&& found_i = m_found[i];if(! found_i){Push(m_next,t);m_prev[i]= t_curr;found_i = true;}}RE t_curr;}TE <TY T,TY GRAPH> TE <TY U>auto VirtualBreadthFirstSearch<T,GRAPH>::GetDistance()-> enable_if_t<is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,Map<T,int>>{Map<T,int> AN{};for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[*IT]= 0;}T t;WH((t = Next())!= m_not_found){if(AN.count(t)== 0){AN[t]= AN[m_prev[m_G.Enumeration_inv(t)]]+ 1;}}RE AN;}TE <TY T,TY GRAPH> TE <TY U>auto VirtualBreadthFirstSearch<T,GRAPH>::GetDistance()-> enable_if_t<!is_same_v<GRAPH,MemorisationGraph<U,decldecay_t(declval<GRAPH>().edge())>>,VE<int>>{VE AN(SZ(),-1);for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){AN[m_G.Enumeration_inv(*IT)]= 0;}T t;WH((t = Next())!= m_not_found){auto&& i = m_G.Enumeration_inv(t);int& AN_i = AN[i];AN_i == -1?AN_i = AN[m_G.Enumeration_inv(m_prev[i])]+ 1:AN_i;}RE AN;}TE <TY T,TY GRAPH>pair<VE<int>,int> VirtualBreadthFirstSearch<T,GRAPH>::GetConnectedComponent(){ST_AS(!is_same_v<GRAPH,MemorisationGraph<T,decldecay_t(m_G.edge())>>);CRI V = SZ();VE cc_num(V,-1);int count = 0;for(int i = 0;i < V;i++){if(cc_num[i]== -1){Shift(m_G.Enumeration(i));T t = Next();if(t != m_not_found){WH(t != m_not_found){cc_num[m_G.Enumeration_inv(t)]= count;t = Next();}count++;}}}RE{MO(cc_num),MO(count)};}TE <TY T,TY GRAPH>VE<T> VirtualBreadthFirstSearch<T,GRAPH>::GetNodeEnumeration(){VE<T> AN{};T t = Next();WH(t != m_not_found){AN.push_back(t);t = Next();}RE AN;}TE <TY T,TY GRAPH>VE<T> VirtualBreadthFirstSearch<T,GRAPH>::GetReversedNodeEnumeration(){VE<T> AN{};VE<T> next{};T t;bool searched;WH(!(searched =(t = Next())== m_not_found)|| !next.empty()){WH(!next.empty()&&(searched || next.back()!= m_prev[m_G.Enumeration_inv(t)])){AN.push_back(next.back());next.pop_back();}if(!searched){next.push_back(t);}}RE AN;}TE <TY T,TY GRAPH> TE <TY PATH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Push(LI<T>& next,CO PATH& p){Push(next,get<0>(p));}

TE <TY T,TY GRAPH>CL DepthFirstSearch:PU VirtualBreadthFirstSearch<T,GRAPH>{PU:TE <TY...Args> IN DepthFirstSearch(GRAPH& G,CO T& not_found,Args&&... args);IN VO Push(LI<T>& next,CO T& t);};
TE <TY T,TY GRAPH> TE <TY...Args> IN DepthFirstSearch<T,GRAPH>::DepthFirstSearch(GRAPH& G,CO T& not_found,Args&&... args):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found,forward<Args>(args)...){}TE <TY T,TY GRAPH> IN VO DepthFirstSearch<T,GRAPH>::Push(LI<T>& next,CO T& t){next.push_front(t);}

TE <TY TREE>CL DepthFirstSearchOnTree:PU DepthFirstSearch<int,TREE>{PU:VE<int> m_node_num;VE<VE<int>> m_children;VE<int> m_children_num;bool m_set_children;VE<int> m_depth;bool m_set_depth;VE<int> m_height_max;VE<int> m_height_min;bool m_set_height;VE<int> m_heaviness;bool m_set_heaviness;int m_digit;VE<VE<int>> m_doubling;bool m_set_doubling;IN DepthFirstSearchOnTree(TREE& T,CRI root = 0,CRI digit = 0);IN VO Initialise()= delete;IN VO Initialise(CRI init)= delete;IN VO Shift(CRI init)= delete;IN CRI Root()CO;IN CRI Parent(CRI i);IN CO VE<int>& Children(CRI i);IN CRI Depth(CRI i);IN CRI Height(CRI i,CO bool& maximum = true);IN CRI Heaviness(CRI i);IN CRI NodeNumber(CRI i,CO bool& reversed = false)CO;IN CRI ChildrenNumber(CRI i);int Ancestor(int i,int n);IN int LCA(int i,int j);int LCA(int i,int j,int& i_prev,int& j_prev);TE <TY F> ret_t<F> RootingDP(F& f);TE <TY U,TY COMM_MONOID,TY F,TY G> VO RerootingDP(COMM_MONOID M,F& f,G& g,VE<U>& d);VO SetChildren();VO SetDepth();VO SetHeight();VO SetHeaviness();VO SetDoubling();};
TE <TY TREE> IN DepthFirstSearchOnTree<TREE>::DepthFirstSearchOnTree(TREE& T,CRI root,CRI digit):DepthFirstSearch<int,TREE>(T,-1,root),m_node_num(),m_children(),m_set_children(),m_depth(),m_set_depth(),m_height_max(),m_height_min(),m_set_height(),m_heaviness(),m_set_heaviness(),m_digit(digit),m_doubling(m_digit),m_set_doubling(){ST_AS(is_same_v<TREE,Graph<decldecay_t(declval<TREE>().edge())>>);AS(int((m_node_num = TH->GetNodeEnumeration()).SZ())== TH->SZ());}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Root()CO{RE TH->Point();}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Parent(CRI i){RE TH->prev(i);}TE <TY TREE> IN CO VE<int>& DepthFirstSearchOnTree<TREE>::Children(CRI i){if(! m_set_children){SetChildren();}RE m_children[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Depth(CRI i){if(!m_set_depth){SetDepth();}RE m_depth[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Height(CRI i,CO bool& maximum){if(!m_set_height){SetHeight();}RE(maximum?m_height_max:m_height_min)[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Heaviness(CRI i){if(!m_set_heaviness){SetHeaviness();}RE m_heaviness[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::NodeNumber(CRI i,CO bool& reversed)CO{CRI V = TH->SZ();AS(i < V);RE m_node_num[reversed?V - 1 - i:i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::ChildrenNumber(CRI i){if(! m_set_children){SetChildren();}RE m_children_num[i];}TE <TY TREE>int DepthFirstSearchOnTree<TREE>::Ancestor(int i,int n){if(!m_set_doubling){SetDoubling();}AS((n >> m_digit)== 0);int d = 0;WH(n != 0){AS((n & 1)== 1?(i = m_doubling[d][i])!= -1:true);d++;n >>= 1;}RE i;}TE <TY TREE> IN int DepthFirstSearchOnTree<TREE>::LCA(int i,int j){int i_prev;int j_prev;RE LCA(i,j,i_prev,j_prev);}TE <TY TREE>int DepthFirstSearchOnTree<TREE>::LCA(int i,int j,int& i_prev,int& j_prev){i_prev = j_prev = -1;CO int diff = Depth(i)- Depth(j);AS(diff > 0?(i = Parent(i_prev = Ancestor(i,diff - 1)))!= -1:diff < 0?(j = Parent(j_prev = Ancestor(j,- diff - 1)))!= -1:true);if(i != j){if(!m_set_doubling){SetDoubling();}int d = m_digit;WH(--d >= 0){AS(m_doubling[d][i]!= m_doubling[d][j]?(i = m_doubling[d][i])!= -1 &&(j = m_doubling[d][j])!= -1:true);}AS((i = Parent(i_prev = i))==(j = Parent(j_prev = j)));}RE i;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetChildren(){AS(!m_set_children);m_set_children = true;CRI V = TH->SZ();m_children.resize(V);m_children_num.resize(V);for(int i = 0;i < V;i++){CRI j = Parent(i);if(j == -1){m_children_num[i]= -1;}else{m_children_num[i]= m_children[j].SZ();m_children[j].push_back(i);}}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetDepth(){AS(!m_set_depth);m_set_depth = true;CRI V = TH->SZ();m_depth.resize(V);for(int n = 1;n < V;n++){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_depth[i]+= m_depth[j]+ 1;}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetHeight(){AS(!m_set_height);m_set_height = true;CRI V = TH->SZ();m_height_max.resize(V);m_height_min.resize(V);for(int n = V - 1;n > 0;n--){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_height_max[j]= max(m_height_max[j],m_height_max[i]+ 1);m_height_min[j]= m_height_min[j]== 0?m_height_min[i]+ 1:min(m_height_min[j],m_height_min[i]+ 1);}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetHeaviness(){AS(!m_set_heaviness);m_set_heaviness = true;CRI V = TH->SZ();m_heaviness.resize(V);for(int n = V - 1;n > 0;n--){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_heaviness[j]+= m_heaviness[i]+ 1;}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetDoubling(){AS(!m_set_doubling);m_set_doubling = true;CRI V = TH->SZ();{m_doubling[0].reserve(V);for(int i = 0;i < V;i++){m_doubling[0].push_back(Parent(i));}}for(int d = 1;d < m_digit;d++){m_doubling[d].reserve(V);for(int i = 0;i < V;i++){m_doubling[d].push_back(m_doubling[d-1][i]== -1?-1:m_doubling[d-1][m_doubling[d-1][i]]);}}RE;}TE <TY TREE> TE <TY F>ret_t<F> DepthFirstSearchOnTree<TREE>::RootingDP(F& f){US U = ret_t<F>;ST_AS(is_invocable_r_v<U,F,VE<U>,int>);if(! m_set_children){SetChildren();}CRI V = TH->SZ();VE<VE<U>> children_value(V);U temp;for(int n = 0;n < V;n++){CRI i = NodeNumber(n,true);CRI j = Parent(i);temp = f(children_value[i],i);if(j != -1){children_value[j].push_back(temp);}}RE temp;}TE <TY TREE> TE <TY U,TY COMM_MONOID,TY F,TY G>VO DepthFirstSearchOnTree<TREE>::RerootingDP(COMM_MONOID M,F& f,G& g,VE<U>& d){ST_AS(is_same_v<U,inner_t<COMM_MONOID>> && is_invocable_r_v<U,F,U,int> && is_invocable_r_v<U,G,U,bool,int,int>);if(! m_set_children){SetChildren();}CRI V = TH->SZ();CO U& e = M.Unit();d.resize(V);VE<VE<U>> children_value(V);VE<VE<U>> l_sum(V);VE<VE<U>> r_sum(V);for(int i = 0;i < V;i++){children_value[i].resize(m_children[i].SZ());}for(int n = 0;n < V;n++){CRI i = NodeNumber(n,true);CO VE<U>& children_value_i = children_value[i];CO int SZ_i = children_value_i.SZ();U temp = e;l_sum[i].reserve(SZ_i + 1);l_sum[i].push_back(temp);for(int m = 0;m < SZ_i;m++){l_sum[i].push_back(temp = M.Product(temp,g(children_value_i[m],true,i,m_children[i][m])));}CRI j = Parent(i);if(j != -1){children_value[j][m_children_num[i]]= f(temp,i);}temp = e;r_sum[i].resize(SZ_i);for(int m = 1;m <= SZ_i;m++){r_sum[i][SZ_i - m]= temp;temp = M.Product(g(children_value_i[SZ_i - m],true,i,m_children[i][SZ_i - m]),temp);}}for(int n = 1;n < V;n++){CRI i = NodeNumber(n);CRI j = Parent(i);CRI k = ChildrenNumber(i);CO int SZ_i = r_sum[i].SZ();CO U rest_i = g(f(M.Product(l_sum[j][k],r_sum[j][k]),j),false,i,j);for(int m = 0;m <= SZ_i;m++){l_sum[i][m]= M.Product(rest_i,l_sum[i][m]);}}for(int i = 0;i < V;i++){d[i]= f(l_sum[i].back(),i);}RE;}

TE <TY TREE>CL HeavyLightDecomposition:PU DepthFirstSearchOnTree<TREE>{PU:VE<int> m_HL;VE<int> m_HL_inv;VE<VE<pair<int,int>>> m_path;VE<pair<int,int>> m_subtree;IN HeavyLightDecomposition(TREE& T,CRI root = 0,CRI digit = 0);IN CRI RearragedNodeNumber(CRI n)CO;IN CRI RearragedNodeNumber_inv(CRI i)CO;IN CO VE<pair<int,int>>& PathFromRoot(CRI i)CO;IN CO pair<int,int> Subtree(CRI i)CO;};
TE <TY TREE> IN HeavyLightDecomposition<TREE>::HeavyLightDecomposition(TREE& T,CRI root,CRI digit):DepthFirstSearchOnTree<TREE>(T,root,digit),m_HL(),m_HL_inv(),m_path(),m_subtree(){CRI V = TH->SZ();m_HL.resize(V,TH->NodeNumber(0));m_HL_inv.resize(V);for(int n = 0;n < V;n++){CRI i = TH->NodeNumber(n);auto& children_i = TH->Children(i);if(!children_i.empty()){int j_opt = -1;int heaviness_opt = -1;for(auto& j:TH->Children(i)){CRI heaviness_j = TH->Heaviness(j);if(heaviness_opt < heaviness_j){j_opt = j;heaviness_opt = heaviness_j;}}int temp = m_HL_inv[i]+ 1;temp += TH->Heaviness(m_HL[m_HL_inv[j_opt]= temp]= j_opt)+ 1;for(auto& j:TH->Children(i)){if(j != j_opt){temp += TH->Heaviness(m_HL[m_HL_inv[j]= temp]= j)+ 1;}}}}m_path.resize(V,{{root,root}});for(int n = 1;n < V;n++){CRI i = TH->NodeNumber(n);CRI parent_i = TH->Parent(i);auto& m_path_i = m_path[i]= m_path[parent_i];auto&[l,r]= m_path_i.back();CRI HL_inv_parent_i = m_HL_inv[parent_i];if(r == HL_inv_parent_i){r = m_HL_inv[i];}else{r = HL_inv_parent_i;CRI HL_inv_i = m_HL_inv[i];m_path_i.push_back({HL_inv_i,HL_inv_i});}}m_subtree.resize(V);for(int n = V - 1;n >= 0;n--){CRI i = TH->NodeNumber(n);auto&[l,r]= m_subtree[i];l = r = m_HL_inv[i];for(auto& j:TH->Children(i)){r = max(r,m_subtree[j].second);}}}TE <TY TREE> IN CRI HeavyLightDecomposition<TREE>::RearragedNodeNumber(CRI n)CO{AS(0 <= n && n < TH->SZ());RE m_HL[n];}TE <TY TREE> IN CRI HeavyLightDecomposition<TREE>::RearragedNodeNumber_inv(CRI i)CO{AS(0 <= i && i < TH->SZ());RE m_HL_inv[i];}TE <TY TREE> IN CO VE<pair<int,int>>& HeavyLightDecomposition<TREE>::PathFromRoot(CRI i)CO{AS(0 <= i && i < TH->SZ());RE m_path[i];}TE <TY TREE> IN CO pair<int,int> HeavyLightDecomposition<TREE>::Subtree(CRI i)CO{AS(0 <= i && i < TH->SZ());RE m_subtree[i];}
#endif


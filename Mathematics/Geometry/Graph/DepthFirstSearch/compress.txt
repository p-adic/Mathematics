#define DC_OF_FIRST_SEARCH(BREADTH)CL BREADTH ## FirstSearch_Body{PU:int m_V;int m_init;LI<int> m_next;VE<bool> m_found;VE<int> m_prev;IN BREADTH ## FirstSearch_Body(CRI V);IN BREADTH ## FirstSearch_Body(CRI V,CRI init);IN VO Reset(CRI init);IN VO Shift(CRI init);IN CRI SZ()CO;IN CRI init()CO;IN VE<bool>::reference found(CRI i);IN CRI prev(CRI i)CO;IN int Next();virtual list<int> e(CO int&)=0;};TE <TY E>CL BREADTH ## FirstSearch:PU BREADTH ## FirstSearch_Body{PU:E m_e;TE <TY...Args> IN BREADTH ## FirstSearch(CRI V,E e,CO Args&... args);IN LI<int> e(CRI i );};TE <TY E> VO BREADTH ## FirstConnectedComponent(CRI V,VE<int>& cc_num,int& count);
#define DF_OF_FIRST_SEARCH(BREADTH,PUSH)IN BREADTH ## FirstSearch_Body::BREADTH ## FirstSearch_Body(CRI V):m_V(V),m_init(),m_next(),m_found(m_V),m_prev(m_V,-1){}IN BREADTH ## FirstSearch_Body::BREADTH ## FirstSearch_Body(CRI V,CRI init):BREADTH ## FirstSearch_Body(V){assert(init < m_V);m_init = init;m_next.push_back(m_init);m_found[m_init] = true;}TE <TY E> TE <TY...Args> IN BREADTH ## FirstSearch<E>::BREADTH ## FirstSearch(CRI V,E e,CO Args&... args):BREADTH ## FirstSearch_Body(V,args...),m_e(MO(e)){static_assert(is_invocable_r_v<list<int>,E,int>);};IN VO BREADTH ## FirstSearch_Body::Reset(CRI init){m_init = init;assert(m_init < m_V);m_next.clear();m_next.push_back(m_init);for(int i = 0;i < m_V;i++){m_found[i] = i == m_init;m_prev[i] = -1;}}IN VO BREADTH ## FirstSearch_Body::Shift(CRI init){m_init = init;assert(m_init < m_V);m_next.clear();if(! m_found[m_init]){m_next.push_back(m_init);m_found[m_init] = true;}}IN CRI BREADTH ## FirstSearch_Body::SZ()CO{RE m_V;}IN CRI BREADTH ## FirstSearch_Body::init()CO{RE m_init;}IN VE<bool>::reference BREADTH ## FirstSearch_Body::found(CRI i){assert(i < m_V);RE m_found[i];}IN CRI BREADTH ## FirstSearch_Body::prev(CRI i)CO{assert(i < m_V);RE m_prev[i];}IN int BREADTH ## FirstSearch_Body::Next(){if(m_next.empty()){RE -1;}CO int i_curr = m_next.front();m_next.pop_front();LI<int> edge = e(i_curr);WH(! edge.empty()){CRI i = edge.front();auto&& found_i = m_found[i];if(! found_i){m_next.PUSH(i);m_prev[i] = i_curr;found_i = true;}edge.pop_front();}RE i_curr;}TE <TY E> IN LI<int> BREADTH ## FirstSearch<E>::e(CRI i){assert(i < BREADTH ## FirstSearch_Body::m_V);RE m_e(i);};TE <TY E> VO BREADTH ## FirstConnectedComponentSearch(CRI V,E e,VE<int>& cc_num,int& count){BREADTH ## FirstSearch<E> bfs{V,MO(e)};count = 0;cc_num = VE<int>(V,-1);for(int i = 0;i < V;i++){if(cc_num[i] == -1){bfs.Shift(i);int j = bfs.Next();WH(j != -1?cc_num[j] == -1:false){cc_num[j] = count;j = bfs.Next();}count++;}}RE;}
DC_OF_FIRST_SEARCH(Depth);DF_OF_FIRST_SEARCH(Depth,push_front);

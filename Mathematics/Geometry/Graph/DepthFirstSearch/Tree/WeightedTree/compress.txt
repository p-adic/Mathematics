// êÊÇ…../../../compress.txtÇì\ÇÈÅB

TE <TY T,TY GRAPH>CL VirtualBreadthFirstSearch{PU:GRAPH& m_G;T m_not_found;bool m_initialised;LI<T> m_next;VE<bool> m_found;VE<T> m_prev;IN VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found);TE <TY Arg> IN VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);IN VO Initialise(LI<T> inits);IN VO Shift(CO T& init);IN VO Shift(LI<T> inits);IN CRI SZ()CO NE;IN VE<bool>::reference found(CO T& t);IN CO T& prev(CO T& t);IN T Next();VE<int> GetDistance();VO SetConnectedComponent(VE<int>& cc_num,int& count);VI VO Push(LI<T>& next,CO T& t)= 0;TE <TY PATH> IN VO Push(LI<T>& next,CO PATH& p);};
TE <TY T,TY GRAPH> IN VirtualBreadthFirstSearch<T,GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_initialised(false),m_next(),m_found(),m_prev(){}TE <TY T,TY GRAPH> TE <TY Arg> IN VirtualBreadthFirstSearch<T,GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(){m_initialised = true;CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_prev = VE<T>(V,m_not_found);}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);m_found[i]= true;}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Initialise(LI<T> inits){Initialise();m_next = MO(inits);CRI V = SZ();for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){auto&& i = m_G.Enumeration_inv(*IT);AS(0 <= i && i < V);m_found[i]= true;}}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Shift(CO T& init){if(m_initialised){CRI V = SZ();auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < V);m_next.clear();if(! m_found[i]){m_next.push_back(init);m_found[i]= true;}}else{Initialise(init);}}TE <TY T,TY GRAPH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Shift(LI<T> inits){if(m_initialised){m_next.clear();CRI V = SZ();for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){auto&& i = m_G.Enumeration_inv(*IT);AS(0 <= i && i < V);if(! m_found[i]){m_next.push_back(*IT);m_found[i]= true;}}}else{Initialise(MO(inits));}}TE <TY T,TY GRAPH> IN CRI VirtualBreadthFirstSearch<T,GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY T,TY GRAPH> IN VE<bool>::reference VirtualBreadthFirstSearch<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& VirtualBreadthFirstSearch<T,GRAPH>::prev(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY T,TY GRAPH> IN T VirtualBreadthFirstSearch<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO T t_curr = m_next.front();m_next.pop_front();auto&& edge = m_G.Edge(t_curr);for(auto& t:edge){auto&& i = m_G.Enumeration_inv(t);auto&& found_i = m_found[i];if(! found_i){Push(m_next,t);m_prev[i]= t_curr;found_i = true;}}RE t_curr;}TE <TY T,TY GRAPH>VE<int> VirtualBreadthFirstSearch<T,GRAPH>::GetDistance(){ST_AS(is_same_v<T,int> && is_same_v<GRAPH,Graph<decldecay_t(m_G.edge())>>);VE<int> depth{};depth = VE<int>(SZ(),-1);for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){depth[*IT]= 0;}int i;WH((i = Next())!= m_not_found){int& depth_i = depth[i];depth_i == -1?depth_i = depth[prev(i)]+ 1:depth_i;}RE depth;}TE <TY T,TY GRAPH>VO VirtualBreadthFirstSearch<T,GRAPH>::SetConnectedComponent(VE<int>& cc_num,int& count){ST_AS(is_same_v<T,int> && is_same_v<GRAPH,Graph<decldecay_t(m_G.edge())>>);CRI V = SZ();cc_num = VE<int>(V,-1);count = 0;for(int i = 0;i < V;i++){if(cc_num[i]== -1){Shift(i);int j = Next();if(j != m_not_found){WH(j != m_not_found){AS(cc_num[j]== -1);cc_num[j]= count;j = Next();}count++;}}}RE;}TE <TY T,TY GRAPH> TE <TY PATH> IN VO VirtualBreadthFirstSearch<T,GRAPH>::Push(LI<T>& next,CO PATH& p){Push(next,get<0>(p));}

TE <TY T,TY GRAPH>CL DepthFirstSearch:PU VirtualBreadthFirstSearch<T,GRAPH>{PU:TE <TY...Args> IN DepthFirstSearch(GRAPH& G,CO T& not_found,Args&&... args);IN VO Push(LI<T>& next,CO T& t);};
TE <TY T,TY GRAPH> TE <TY...Args> IN DepthFirstSearch<T,GRAPH>::DepthFirstSearch(GRAPH& G,CO T& not_found,Args&&... args):VirtualBreadthFirstSearch<T,GRAPH>(G,not_found,forward<Args>(args)...){}TE <TY T,TY GRAPH> IN VO DepthFirstSearch<T,GRAPH>::Push(LI<T>& next,CO T& t){next.push_front(t);}

TE <TY TREE>CL DepthFirstSearchOnTree:PU DepthFirstSearch<int,TREE>{PU:VE<int> m_node_num;VE<VE<int>> m_children;VE<int> m_children_num;bool m_set_children;VE<int> m_depth;bool m_set_depth;VE<int> m_height_max;VE<int> m_height_min;bool m_set_height;VE<int> m_heaviness;bool m_set_heaviness;int m_digit;VE<VE<int>> m_doubling;bool m_set_doubling;IN DepthFirstSearchOnTree(TREE& T,CRI root = 0,CRI digit = 0);IN VO Initialise()= delete;IN VO Initialise(CRI init)= delete;IN VO Shift(CRI init)= delete;IN CRI Root()CO;IN CRI Parent(CRI i);IN CO VE<int>& Children(CRI i);IN CRI Depth(CRI i);IN CRI Height(CRI i,CO bool& maximum = true);IN CRI Heaviness(CRI i);IN CRI NodeNumber(CRI i,CO bool& reversed = false)CO;IN CRI ChildrenNumber(CRI i);int Ancestor(int i,int n);IN int LCA(int i,int j);int LCA(int i,int j,int& i_prev,int& j_prev);TE <TY F> ret_t<F> RootingDP(F& f);TE <TY U,TY COMM_MONOID,TY F,TY G> VO RerootingDP(COMM_MONOID M,F& f,G& g,VE<U>& d);VO SetChildren();VO SetDepth();VO SetHeight();VO SetHeaviness();VO SetDoubling();};
TE <TY TREE> IN DepthFirstSearchOnTree<TREE>::DepthFirstSearchOnTree(TREE& T,CRI root,CRI digit):DepthFirstSearch<int,TREE>(T,-1,root),m_node_num(TH->SZ()),m_children(),m_set_children(),m_depth(),m_set_depth(),m_height_max(),m_height_min(),m_set_height(),m_heaviness(),m_set_heaviness(),m_digit(digit),m_doubling(m_digit),m_set_doubling(){ST_AS(is_same_v<TREE,Graph<decldecay_t(declval<TREE>().edge())>>);CRI V = TH->SZ();for(int n = 0;n < V;n++){AS((m_node_num[n]= TH->Next())!= -1);}AS(TH->Next()== -1);}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Root()CO{RE TH->Point();}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Parent(CRI i){RE TH->prev(i);}TE <TY TREE> IN CO VE<int>& DepthFirstSearchOnTree<TREE>::Children(CRI i){if(! m_set_children){SetChildren();}RE m_children[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Depth(CRI i){if(!m_set_depth){SetDepth();}RE m_depth[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Height(CRI i,CO bool& maximum){if(!m_set_height){SetHeight();}RE(maximum?m_height_max:m_height_min)[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::Heaviness(CRI i){if(!m_set_heaviness){SetHeaviness();}RE m_heaviness[i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::NodeNumber(CRI i,CO bool& reversed)CO{CRI V = TH->SZ();AS(i < V);RE m_node_num[reversed?V - 1 - i:i];}TE <TY TREE> IN CRI DepthFirstSearchOnTree<TREE>::ChildrenNumber(CRI i){if(! m_set_children){SetChildren();}RE m_children_num[i];}TE <TY TREE>int DepthFirstSearchOnTree<TREE>::Ancestor(int i,int n){if(!m_set_doubling){SetDoubling();}AS((n >> m_digit)== 0);int d = 0;WH(n != 0){AS((n & 1)== 1?(i = m_doubling[d][i])!= -1:true);d++;n >>= 1;}RE i;}TE <TY TREE> IN int DepthFirstSearchOnTree<TREE>::LCA(int i,int j){int i_prev;int j_prev;RE LCA(i,j,i_prev,j_prev);}TE <TY TREE>int DepthFirstSearchOnTree<TREE>::LCA(int i,int j,int& i_prev,int& j_prev){i_prev = j_prev = -1;CO int diff = Depth(i)- Depth(j);AS(diff > 0?(i = Parent(i_prev = Ancestor(i,diff - 1)))!= -1:diff < 0?(j = Parent(j_prev = Ancestor(j,- diff - 1)))!= -1:true);if(i != j){if(!m_set_doubling){SetDoubling();}int d = m_digit;WH(--d >= 0){AS(m_doubling[d][i]!= m_doubling[d][j]?(i = m_doubling[d][i])!= -1 &&(j = m_doubling[d][j])!= -1:true);}AS((i = Parent(i_prev = i))==(j = Parent(j_prev = j)));}RE i;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetChildren(){AS(!m_set_children);m_set_children = true;CRI V = TH->SZ();m_children.reSZ(V);m_children_num.reSZ(V);for(int i = 0;i < V;i++){CRI j = Parent(i);if(j == -1){m_children_num[i]= -1;}else{m_children_num[i]= m_children[j].SZ();m_children[j].push_back(i);}}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetDepth(){AS(!m_set_depth);m_set_depth = true;CRI V = TH->SZ();m_depth.reSZ(V);for(int n = 1;n < V;n++){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_depth[i]+= m_depth[j]+ 1;}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetHeight(){AS(!m_set_height);m_set_height = true;CRI V = TH->SZ();m_height_max.reSZ(V);m_height_min.reSZ(V);for(int n = V - 1;n > 0;n--){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_height_max[j]= max(m_height_max[j],m_height_max[i]+ 1);m_height_min[j]= m_height_min[j]== 0?m_height_min[i]+ 1:min(m_height_min[j],m_height_min[i]+ 1);}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetHeaviness(){AS(!m_set_heaviness);m_set_heaviness = true;CRI V = TH->SZ();m_heaviness.reSZ(V);for(int n = V - 1;n > 0;n--){CRI i = m_node_num[n];CRI j = Parent(i);AS(j != -1);m_heaviness[j]+= m_heaviness[i]+ 1;}RE;}TE <TY TREE>VO DepthFirstSearchOnTree<TREE>::SetDoubling(){AS(!m_set_doubling);m_set_doubling = true;CRI V = TH->SZ();{m_doubling[0].reserve(V);for(int i = 0;i < V;i++){m_doubling[0].push_back(Parent(i));}}for(int d = 1;d < m_digit;d++){m_doubling[d].reserve(V);for(int i = 0;i < V;i++){m_doubling[d].push_back(m_doubling[d-1][i]== -1?-1:m_doubling[d-1][m_doubling[d-1][i]]);}}RE;}TE <TY TREE> TE <TY F>ret_t<F> DepthFirstSearchOnTree<TREE>::RootingDP(F& f){US U = ret_t<F>;ST_AS(is_invocable_r_v<U,F,LI<U>,int>);if(! m_set_children){SetChildren();}CRI V = TH->SZ();VE<LI<U>> children_value(V);U temp;for(int n = 0;n < V;n++){CRI i = NodeNumber(n,true);CRI j = Parent(i);temp = f(children_value[i],i);if(j != -1){children_value[j].push_back(temp);}}RE temp;}TE <TY TREE> TE <TY U,TY COMM_MONOID,TY F,TY G>VO DepthFirstSearchOnTree<TREE>::RerootingDP(COMM_MONOID M,F& f,G& g,VE<U>& d){ST_AS(is_same_v<U,inner_t<COMM_MONOID>> && is_invocable_r_v<U,F,U,int> && is_invocable_r_v<U,G,U,bool,int,int>);if(! m_set_children){SetChildren();}CRI V = TH->SZ();CO U& e = M.Unit();d.reSZ(V);VE<VE<U>> children_value(V);VE<VE<U>> l_sum(V);VE<VE<U>> r_sum(V);for(int i = 0;i < V;i++){children_value[i].reSZ(m_children[i].SZ());}for(int n = 0;n < V;n++){CRI i = NodeNumber(n,true);CO VE<U>& children_value_i = children_value[i];CO int SZ_i = children_value_i.SZ();U temp = e;l_sum[i].reserve(SZ_i + 1);l_sum[i].push_back(temp);for(int m = 0;m < SZ_i;m++){l_sum[i].push_back(temp = M.Product(temp,g(children_value_i[m],true,i,m_children[i][m])));}CRI j = Parent(i);if(j != -1){children_value[j][m_children_num[i]]= f(temp,i);}temp = e;r_sum[i].reSZ(SZ_i);for(int m = 1;m <= SZ_i;m++){r_sum[i][SZ_i - m]= temp;temp = M.Product(g(children_value_i[SZ_i - m],true,i,m_children[i][SZ_i - m]),temp);}}for(int n = 1;n < V;n++){CRI i = NodeNumber(n);CRI j = Parent(i);CRI k = ChildrenNumber(i);CO int SZ_i = r_sum[i].SZ();CO U rest_i = g(f(M.Product(l_sum[j][k],r_sum[j][k]),j),false,i,j);for(int m = 0;m <= SZ_i;m++){l_sum[i][m]= M.Product(rest_i,l_sum[i][m]);}}for(int i = 0;i < V;i++){d[i]= f(l_sum[i].back(),i);}RE;}

TE <TY TREE,TY U,TY MONOID>CL DepthFirstSearchOnWeightedTree:PU DepthFirstSearchOnTree<TREE>{PU:MONOID m_M;VE<U> m_wprev;VE<U> m_wdepth_r;VE<U> m_wdepth_l;bool m_set_wdepth;VE<U> m_wheight_max_r;VE<U> m_wheight_max_l;VE<U> m_wheight_min_r;VE<U> m_wheight_min_l;bool m_set_wheight;VE<U> m_wheaviness;bool m_set_wheaviness;VE<VE<tuple<int,U,U>>> m_wdoubling;bool m_set_wdoubling;IN DepthFirstSearchOnWeightedTree(TREE& T,MONOID M,CRI root = 0,CRI digit = 0);IN CO U& WDepth(CRI i,CO bool& right = true);IN CO U& WHeight(CRI i,CO bool& maximum = true,CO bool& right = true);IN CO U& WHeaviness(CRI i);pair<int,U> WAncestor(int i,int n,CO bool& right = true);tuple<int,U,U> WLCA(int i,int j);tuple<int,U,U> WLCA(int i,int j,int& i_prev,int& j_prev);VO SetWDepth();VO SetWHeight();VO SetWHeaviness();VO SetWDoubling();};TE <TY TREE,TY MONOID,TY...Args> DepthFirstSearchOnWeightedTree(TREE& T,MONOID M,CO Args&... args)-> DepthFirstSearchOnWeightedTree<TREE,inner_t<MONOID>,MONOID>;
TE <TY TREE,TY U,TY MONOID> IN DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::DepthFirstSearchOnWeightedTree(TREE& T,MONOID M,CRI root,CRI digit):DepthFirstSearchOnTree<TREE>(T,root,digit),m_M(MO(M)),m_wprev(TH->SZ(),m_M.One()),m_wdepth_r(),m_wdepth_l(),m_set_wdepth(),m_wheight_max_r(),m_wheight_max_l(),m_wheight_min_r(),m_wheight_min_l(),m_set_wheight(),m_wheaviness(),m_set_wheaviness(),m_wdoubling(TH->m_digit),m_set_wdoubling(){ST_AS(is_same_v<U,inner_t<MONOID>>);CRI V = TH->SZ();for(int i = 0;i < V;i++){auto&& edge_i = TH->m_G.Edge(i);for(auto& p:edge_i){CRI j = get<0>(p);if(i == TH->Parent(j)){m_wprev[j]= get<1>(p);}}}}TE <TY TREE,TY U,TY MONOID> IN CO U& DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::WDepth(CRI i,CO bool& right){AS(i < TH->SZ());if(!m_set_wdepth){SetWDepth();}RE(right?m_wdepth_r:m_wdepth_l)[i];}TE <TY TREE,TY U,TY MONOID> IN CO U& DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::WHeight(CRI i,CO bool& maximum,CO bool& right){AS(i < TH->SZ());if(!m_set_wheight){SetWHeight();}RE(maximum?(right?m_wheight_max_r:m_wheight_max_l):(right?m_wheight_min_r:m_wheight_min_l))[i];}TE <TY TREE,TY U,TY MONOID> IN CO U& DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::WHeaviness(CRI i){AS(i < TH->SZ());if(!m_set_wheaviness){SetWHeaviness();}RE m_wheaviness[i];}TE <TY TREE,TY U,TY MONOID>pair<int,U> DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::WAncestor(int i,int n,CO bool& right){if(! m_set_wdoubling){SetWDoubling();}AS((n >> TH->m_digit)== 0);int d = 0;U temp = m_M.One();WH(n != 0){if((n & 1)== 1){auto&[j,u_r,u_l]= m_wdoubling[d][i];AS((i = j)!= -1);temp = right?m_M.Product(temp,u_r):m_M.Product(u_l,temp);}d++;n >>= 1;}RE{i,MO(temp)};}TE <TY TREE,TY U,TY MONOID> IN tuple<int,U,U> DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::WLCA(int i,int j){int i_prev;int j_prev;RE WLCA(i,j,i_prev,j_prev);}TE <TY TREE,TY U,TY MONOID>tuple<int,U,U> DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::WLCA(int i,int j,int& i_prev,int& j_prev){i_prev = j_prev = -1;CO int diff = TH->Depth(i)- TH->Depth(j);U u_ir = m_M.One();U u_jl = u_ir;if(diff > 0){auto[k,v]= WAncestor(i,diff - 1,true);u_ir = m_M.Product(v,m_wprev[k]);AS((i = TH->Parent(i_prev = k))!= -1);}else if(diff < 0){auto[k,v]= WAncestor(j,- diff - 1,false);u_jl = m_M.Product(m_wprev[k],v);AS((j = TH->Parent(j_prev = k))!= -1);}if(i != j){if(!m_set_wdoubling){SetWDoubling();}int d = TH->m_digit;WH(--d >= 0){auto&[k_i,v_ir,v_il]= m_wdoubling[d][i];auto&[k_j,v_jr,v_jl]= m_wdoubling[d][j];if(k_i != k_j){AS((i = k_i)!= -1 &&(j = k_j)!= -1);u_ir = m_M.Product(u_ir,v_ir);u_jl = m_M.Product(v_jl,u_jl);}}u_ir = m_M.Product(u_ir,m_wprev[i]);u_jl = m_M.Product(m_wprev[j],u_jl);AS((i = TH->Parent(i_prev = i))==(j = TH->Parent(j_prev = j)));}RE{i,MO(u_ir),MO(u_jl)};}TE <TY TREE,TY U,TY MONOID>VO DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::SetWDepth(){AS(!m_set_wdepth);m_set_wdepth = true;CRI V = TH->SZ();CO U& one = m_M.One();m_wdepth_r.reSZ(V,one);m_wdepth_l.reSZ(V,one);for(int n = 1;n < V;n++){CRI i = TH->m_node_num[n];CRI j = TH->Parent(i);AS(j != -1);m_wdepth_r[i]= m_M.Product(m_wdepth_r[j],m_wprev[i]);m_wdepth_l[i]= m_M.Product(m_wprev[i],m_wdepth_l[j]);}RE;}TE <TY TREE,TY U,TY MONOID>VO DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::SetWHeight(){AS(!m_set_wheight);m_set_wheight = true;CRI V = TH->SZ();CO U& one = m_M.One();m_wheight_max_r.reSZ(V,one);m_wheight_max_l.reSZ(V,one);m_wheight_min_r.reSZ(V,one);m_wheight_min_l.reSZ(V,one);VE<bool> found(V);for(int n = V - 1;n > 0;n--){CRI i = TH->m_node_num[n];CRI j = TH->Parent(i);AS(j != -1);m_wheight_max_r[j]= max(m_wheight_max_r[j],m_M.Product(m_wheight_max_r[i],m_wprev[i]));m_wheight_max_l[j]= max(m_wheight_max_l[j],m_M.Product(m_wprev[i],m_wheight_max_l[i]));if(found[j]){m_wheight_min_r[j]= min(m_wheight_min_r[j],m_M.Product(m_wheight_min_r[i],m_wprev[i]));m_wheight_min_l[j]= min(m_wheight_min_l[j],m_M.Product(m_wprev[i],m_wheight_min_l[i]));}else{m_wheight_min_r[j]= m_M.Product(m_wheight_min_r[i],m_wprev[i]);m_wheight_min_l[j]= m_M.Product(m_wprev[i],m_wheight_min_l[i]);found[j]= true;}}RE;}TE <TY TREE,TY U,TY MONOID>VO DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::SetWHeaviness(){AS(!m_set_wheaviness);m_set_wheaviness = true;CRI V = TH->SZ();m_wheaviness.reSZ(V,m_M.One());for(int n = V - 1;n > 0;n--){CRI i = TH->m_node_num[n];CRI j = TH->Parent(i);AS(j != -1);m_wheaviness[j]= m_M.Product(m_wheaviness[j],m_M.Product(m_wheaviness[i],m_wprev[i]));}RE;}TE <TY TREE,TY U,TY MONOID>VO DepthFirstSearchOnWeightedTree<TREE,U,MONOID>::SetWDoubling(){AS(!m_set_wdoubling);m_set_wdoubling = true;CRI V = TH->SZ();{m_wdoubling[0].reserve(V);for(int i = 0;i < V;i++){m_wdoubling[0].push_back({TH->Parent(i),m_wprev[i],m_wprev[i]});}}for(int d = 1;d < TH->m_digit;d++){m_wdoubling[d].reserve(V);for(int i = 0;i < V;i++){auto[j,u_ir,u_il]= m_wdoubling[d-1][i];if(j != -1){auto&[k,v_jr,v_jl]= m_wdoubling[d-1][j];j = k;u_ir = m_M.Product(u_ir,v_jr);u_il = m_M.Product(v_jl,u_il);}m_wdoubling[d].push_back({j,u_ir,u_il});}}RE;}

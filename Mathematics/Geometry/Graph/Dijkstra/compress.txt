#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/Dijkstra/a_Body.hpp"
#else
#define DIJKSTRA_PREP(INITIALISE_PREV)CO U& one = m_M.One();AS(one < infty);auto&& i_start = m_G.Enumeration_inv(t_start);AS(0 <= i_start && i_start < SZ);INITIALISE_PREV;
#define DIJKSTRA_BODY_1(SET_PREV)if(path_LE == -1){path_LE = SZ - 1;}weight[i_start]= one;int i = i_start;for(int num = 0;num < path_LE;num++){CO U& weight_i = weight[i];fixed[i]= true;auto&& edge_i = m_G.Edge(m_G.Enumeration(i));for(auto IT = edge_i.BE(),EN = edge_i.end();IT != EN;IT++){auto&& j = m_G.Enumeration_inv(IT->first);if(!fixed[j]){CO U& edge_ij = get<1>(*IT);U temp = m_M.Product(weight_i,edge_ij);AS(temp < infty);U& weight_j = weight[j];if(temp < weight_j){SET_PREV;weight_j = MO(temp);}}}U temp = infty;for(int j = 0;j < SZ;j++){if(!fixed[j]){U& weight_j = weight[j];if(weight_j < temp){temp = weight_j;i = j;}}}}
#define DIJKSTRA_BODY_2(CHECK_FINAL,SET_PREV)AS(path_LE == -1);set<pair<U,int>> vertex{};vertex.insert(pair<U,int>(weight[i_start]= one,i_start));WH(! vertex.empty()){auto BE = vertex.BE();auto[weight_i,i]= *BE;CHECK_FINAL;fixed[i]= true;vertex.erase(BE);auto&& edge_i = m_G.Edge(m_G.Enumeration(i));VE<pair<U,int>> changed_vertex{};for(auto IT = edge_i.BE(),EN = edge_i.end();IT != EN;IT++){auto&& j = m_G.Enumeration_inv(IT->first);if(!fixed[j]){CO U& edge_ij = get<1>(*IT);U temp = m_M.Product(weight_i,edge_ij);AS(temp < infty);U& weight_j = weight[j];if(temp < weight_j){if(weight_j != infty){vertex.erase(pair<U,int>(weight_j,j));}SET_PREV;changed_vertex.push_back(pair<U,int>(weight_j = MO(temp),j));}}}for(auto& v:changed_vertex){vertex.insert(v);}}
#define DIJKSTRA_BODY(INITIALISE_PREV,CHECK_FINAL,SET_PREV)DIJKSTRA_PREP(INITIALISE_PREV);if(many_edges){DIJKSTRA_BODY_1(SET_PREV);}else{DIJKSTRA_BODY_2(CHECK_FINAL,SET_PREV);}
TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>CL AbstractDijkstra:PU PointedSet<U>{PU:GRAPH& m_G;COMM_MONOID m_M;IN AbstractDijkstra(GRAPH& G,COMM_MONOID M,CO U& infty);U GetDistance(CO inner_t<GRAPH>& t_start,CO inner_t<GRAPH>& t_final,CO bool& many_edges = true,int path_LE = -1);VE<U> GetDistance(CO inner_t<GRAPH>& t_start,CO bool& many_edges = true,int path_LE = -1);VO SetDistance(VE<U>& weight,VE<bool>& fixed,CO inner_t<GRAPH>& t_start,CO bool& many_edges = true,int path_LE = -1);pair<U,LI<inner_t<GRAPH>>> GetPath(CO inner_t<GRAPH>& t_start,CO inner_t<GRAPH>& t_final,CO bool& many_edges = true,int path_LE = -1);TE <TE <TY...> TY V> pair<VE<U>,VE<LI<inner_t<GRAPH>>>> GetPath(CO inner_t<GRAPH>& t_start,CO V<inner_t<GRAPH>>& t_finals,CO bool& many_edges = true,int path_LE = -1);pair<VE<U>,VE<LI<inner_t<GRAPH>>>> GetPath(CO inner_t<GRAPH>& t_start,CO bool& many_edges = true,int path_LE = -1);};TE <TY GRAPH,TY U,TY COMM_MONOID> AbstractDijkstra(GRAPH& G,COMM_MONOID M,CO U& infty)-> AbstractDijkstra<inner_t<GRAPH>,GRAPH,U,COMM_MONOID>;TE <TY T,TY GRAPH>CL Dijkstra:PU AbstractDijkstra<T,GRAPH,ll,AdditiveMonoid<>>{PU:IN Dijkstra(GRAPH& G);};TE <TY GRAPH> Dijkstra(GRAPH& G)-> Dijkstra<inner_t<GRAPH>,GRAPH>;
TE <TY T,TY GRAPH,TY U,TY COMM_MONOID> IN AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::AbstractDijkstra(GRAPH& G,COMM_MONOID M,CO U& infty):PointedSet<U>(infty),m_G(G),m_M(MO(M)){ST_AS(! is_same_v<U,int>);}TE <TY T,TY GRAPH> IN Dijkstra<T,GRAPH>::Dijkstra(GRAPH& G):AbstractDijkstra<T,GRAPH,ll,AdditiveMonoid<>>(G,AdditiveMonoid<>(),4611686018427387904){}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>U AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetDistance(CO inner_t<GRAPH>& t_start,CO inner_t<GRAPH>& t_final,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);auto&& i_final = m_G.Enumeration_inv(t_final);DIJKSTRA_BODY(,if(i == i_final){break;},);U AN{MO(weight[i_final])};RE AN;}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>VE<U> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetDistance(CO inner_t<GRAPH>& t_start,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);DIJKSTRA_BODY(,,);RE weight;}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>VO AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::SetDistance(VE<U>& weight,VE<bool>& fixed,CO inner_t<GRAPH>& t_start,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();AS(int(weight.SZ())== SZ);AS(int(fixed.SZ())== SZ);DIJKSTRA_BODY(,,);RE;}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>pair<U,LI<inner_t<GRAPH>>> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetPath(CO inner_t<GRAPH>& t_start,CO inner_t<GRAPH>& t_final,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);auto&& i_final = m_G.Enumeration_inv(t_final);DIJKSTRA_BODY(VE<int> prev(SZ),if(i == i_final){break;},prev[j]= i);int i = i_final;LI<inner_t<GRAPH>> path{};path.push_back(t_final);if(weight[i]!= infty){WH(i != i_start){i = prev[i];path.push_front(m_G.Enumeration(i));}}U AN{MO(weight[i_final])};RE{MO(AN),MO(path)};}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID> TE <TE <TY...> TY V>pair<VE<U>,VE<LI<inner_t<GRAPH>>>> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetPath(CO inner_t<GRAPH>& t_start,CO V<inner_t<GRAPH>>& t_finals,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();CO U& infty = TH->Infty();VE weight(SZ,infty);VE<bool> fixed(SZ);DIJKSTRA_BODY(VE<int> prev(SZ),,prev[j]= i);CO int path_SZ = t_finals.SZ();VE<LI<inner_t<GRAPH>>> path;path.reserve(path_SZ);for(auto IT = t_finals.BE(),EN = t_finals.end();IT != EN;IT++){LI<inner_t<GRAPH>> path_j{};CO inner_t<GRAPH>& t_final = *IT;path_j.push_back(t_final);int i = m_G.Enumeration_inv(t_final);if(weight[i]!= infty){WH(i != i_start){i = prev[i];path_j.push_front(m_G.Enumeration(i));}}path.push_back(path_j);}RE{MO(weight),MO(path)};}TE <TY T,TY GRAPH,TY U,TY COMM_MONOID>pair<VE<U>,VE<LI<inner_t<GRAPH>>>> AbstractDijkstra<T,GRAPH,U,COMM_MONOID>::GetPath(CO inner_t<GRAPH>& t_start,CO bool& many_edges,int path_LE){CRI SZ = m_G.SZ();VE<inner_t<GRAPH>> t_finals(SZ);for(int i = 0;i < SZ;i++){t_finals[i]= i;}RE GetPath(t_start,t_finals,many_edges,path_LE);}
#endif


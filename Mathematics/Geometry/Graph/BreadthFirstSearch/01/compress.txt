#ifdef DEBUG
  #include "c:/Users/user/Documents/Programming/Mathematics/Geometry/Graph/BreadthFirstSearch/01/a_Body.hpp"
#else
TE <TY T,TY GRAPH>CL ZeroOneBreadthFirstSearch{PU:GRAPH& m_G;T m_not_found;bool m_initialised;LI<T> m_next;VE<int> m_found;VE<T> m_prev;VE<int> m_weight;IN ZeroOneBreadthFirstSearch(GRAPH& G,CO T& not_found);TE <TY Arg> IN ZeroOneBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init);IN VO Initialise();IN VO Initialise(CO T& init);IN VO Initialise(LI<T> inits);IN VO Shift(CO T& init);IN VO Shift(LI<T> inits);IN CRI SZ()CO;IN int& found(CO T& t);IN CO T& prev(CO T& t);IN CRI weight(CO T& t);T Next();IN VO SetWeight();IN CRI GetWeight(CO T& t_goal);};
TE <TY T,TY GRAPH> IN ZeroOneBreadthFirstSearch<T,GRAPH>::ZeroOneBreadthFirstSearch(GRAPH& G,CO T& not_found):m_G(G),m_not_found(not_found),m_initialised(false),m_next(),m_found(),m_prev(),m_weight(){}TE <TY T,TY GRAPH> TE <TY Arg> IN ZeroOneBreadthFirstSearch<T,GRAPH>::ZeroOneBreadthFirstSearch(GRAPH& G,CO T& not_found,Arg&& init):ZeroOneBreadthFirstSearch(G,not_found){Initialise(forward<Arg>(init));}TE <TY T,TY GRAPH> IN VO ZeroOneBreadthFirstSearch<T,GRAPH>::Initialise(){m_initialised = true;m_next.clear();CRI V = SZ();m_found = VE<int>(V);m_prev = m_weight = VE<int>(V,-1);}TE <TY T,TY GRAPH> IN VO ZeroOneBreadthFirstSearch<T,GRAPH>::Initialise(CO T& init){auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());Initialise();m_next.push_back(init);m_found[i]= 2;m_weight[i]= 0;}TE <TY T,TY GRAPH> IN VO ZeroOneBreadthFirstSearch<T,GRAPH>::Initialise(LI<T> inits){Initialise();m_next = MO(inits);CRI V = SZ();for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){auto&& i = m_G.Enumeration_inv(*IT);AS(0 <= i && i < V);m_found[i]= 2;m_weight[i]= 0;}}TE <TY T,TY GRAPH> IN VO ZeroOneBreadthFirstSearch<T,GRAPH>::Shift(CO T& init){if(m_initialised){CRI V = SZ();auto&& i = m_G.Enumeration_inv(init);AS(0 <= i && i < SZ());m_next.clear();if(! m_found[i]){m_next.push_back(init);m_found[i]= 2;m_weight[i]= 0;}}else{Initialise(init);}}TE <TY T,TY GRAPH> IN VO ZeroOneBreadthFirstSearch<T,GRAPH>::Shift(LI<T> inits){if(m_initialised){m_next.clear();CRI V = SZ();for(auto IT = m_next.BE(),EN = m_next.EN();IT != EN;IT++){auto&& i = m_G.Enumeration_inv(*IT);AS(0 <= i && i < V);if(! m_found[i]){m_next.push_back(*IT);m_found[i]= 2;m_weight[i]= 0;}}}else{Initialise(MO(inits));}}TE <TY T,TY GRAPH> IN CRI ZeroOneBreadthFirstSearch<T,GRAPH>::SZ()CO{RE m_G.SZ();}TE <TY T,TY GRAPH> IN int& ZeroOneBreadthFirstSearch<T,GRAPH>::found(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY T,TY GRAPH> IN CO T& ZeroOneBreadthFirstSearch<T,GRAPH>::prev(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY T,TY GRAPH> IN CRI ZeroOneBreadthFirstSearch<T,GRAPH>::weight(CO T& t){auto&& i = m_G.Enumeration_inv(t);AS(0 <= i && i < SZ());if(!m_initialised){Initialise();}RE m_weight[i];}TE <TY T,TY GRAPH> T ZeroOneBreadthFirstSearch<T,GRAPH>::Next(){if(m_next.empty()){RE m_not_found;}CO int t_curr = m_next.front();auto&& i_curr = m_G.Enumeration_inv(t_curr);m_next.pop_front();if(m_found[i_curr]== 3){RE Next();}m_found[i_curr]= 3;auto&& edge = m_G.Edge(t_curr);for(auto&[t,weighted]:edge){auto&& i = m_G.Enumeration_inv(t);int& found_i = m_found[i];if(weighted){if(found_i < 1){m_next.push_back(t);m_prev[i]= t_curr;m_weight[i]= m_weight[i_curr]+ 1;found_i = 1;}}else{if(found_i < 2){m_next.push_front(t);m_prev[i]= t_curr;m_weight[i]= m_weight[i_curr];found_i = 2;}}}RE t_curr;}TE <TY T,TY GRAPH> IN VO ZeroOneBreadthFirstSearch<T,GRAPH>::SetWeight(){WH(Next()!= m_not_found){}}TE <TY T,TY GRAPH> IN CRI ZeroOneBreadthFirstSearch<T,GRAPH>::GetWeight(CO T& t_goal){auto&& i = m_G.Enumeration_inv(t_goal);AS(0 <= i && i < SZ());T t_next = Next();WH(t_next != m_not_found && t_next != t_goal){t_next = Next();}RE m_weight[i];}
#endif


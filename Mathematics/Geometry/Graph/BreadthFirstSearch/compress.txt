// êÊÇ…../compress.txtÇì\ÇÈÅB

TE <TY GRAPH>CL VirtualBreadthFirstSearch:PU PointedSet<int>{PU:GRAPH& m_G;bool m_initialised;LI<int> m_next;VE<bool> m_found;VE<int> m_prev;IN VirtualBreadthFirstSearch(GRAPH& G);IN VirtualBreadthFirstSearch(GRAPH& G,CRI init);IN VO Initialise();IN VO Initialise(CRI init);IN VO Shift(CRI init);IN CRI SZ()CO NE;IN VE<bool>::reference found(CRI i);IN CRI prev(CRI i);IN int Next();VE<int> GetDistance();VO SetConnectedComponent(VE<int>& cc_num,int& count);VI VO Push(LI<int>& next,CRI i)= 0;};TE <TY GRAPH>CL BreadthFirstSearch:PU VirtualBreadthFirstSearch<GRAPH>{PU:TE <TY...Args> IN BreadthFirstSearch(GRAPH& G,CO Args&... args);IN VO Push(LI<int>& next,CRI i);};
TE <TY GRAPH> IN VirtualBreadthFirstSearch<GRAPH>::VirtualBreadthFirstSearch(GRAPH& G):m_G(G),m_initialised(false),m_next(),m_found(),m_prev(){ST_AS(is_same_v<inner_t<GRAPH>,int>&&is_same_v<decldecay_t(declval<GRAPH>().Edge(0)),LI<int>>);}TE <TY GRAPH> IN VirtualBreadthFirstSearch<GRAPH>::VirtualBreadthFirstSearch(GRAPH& G,CRI init):VirtualBreadthFirstSearch<GRAPH>(G){Initialise(init);}TE <TY GRAPH> TE <TY...Args> IN BreadthFirstSearch<GRAPH>::BreadthFirstSearch(GRAPH& G,CO Args&... args):VirtualBreadthFirstSearch<GRAPH>(G,args...){}TE <TY GRAPH> IN VO VirtualBreadthFirstSearch<GRAPH>::Initialise(){m_initialised = true;CRI V = SZ();m_next.clear();m_found = VE<bool>(V);m_prev = VE<int>(V,-1);}TE <TY GRAPH> IN VO VirtualBreadthFirstSearch<GRAPH>::Initialise(CRI init){AS((TH->init()= init)< SZ());Initialise();m_next.push_back(init);m_found[init]= true;}TE <TY GRAPH> IN VO VirtualBreadthFirstSearch<GRAPH>::Shift(CRI init){if(m_initialised){CRI V = SZ();AS((TH->init()= init)< V);m_next.clear();if(! m_found[init]){m_next.push_back(init);m_found[init]= true;}}else{Initialise(init);}}TE <TY GRAPH> IN CRI VirtualBreadthFirstSearch<GRAPH>::SZ()CO NE{RE m_G.SZ();}TE <TY GRAPH> IN VE<bool>::reference VirtualBreadthFirstSearch<GRAPH>::found(CRI i){AS(i < SZ());if(!m_initialised){Initialise();}RE m_found[i];}TE <TY GRAPH> IN CRI VirtualBreadthFirstSearch<GRAPH>::prev(CRI i){AS(i < SZ());if(!m_initialised){Initialise();}RE m_prev[i];}TE <TY GRAPH> IN int VirtualBreadthFirstSearch<GRAPH>::Next(){if(m_next.empty()){RE -1;}CO int i_curr = m_next.front();m_next.pop_front();auto&& edge = m_G.Edge(i_curr);WH(! edge.empty()){CRI i = edge.front();auto&& found_i = m_found[i];if(! found_i){Push(m_next,i);m_prev[i]= i_curr;found_i = true;}edge.pop_front();}RE i_curr;}TE <TY GRAPH>VE<int> VirtualBreadthFirstSearch<GRAPH>::GetDistance(){VE<int> depth{};depth = VE<int>(SZ(),-1);int i = Next();depth[i]= 0;WH((i = Next())!= -1){depth[i]= depth[prev(i)]+ 1;}RE depth;}TE <TY GRAPH>VO VirtualBreadthFirstSearch<GRAPH>::SetConnectedComponent(VE<int>& cc_num,int& count){CRI V = SZ();cc_num = VE<int>(V,-1);count = 0;for(int i = 0;i < V;i++){if(cc_num[i]== -1){Shift(i);int j = Next();if(j != -1){WH(j != -1){AS(cc_num[j]== -1);cc_num[j]= count;j = Next();}count++;}}}RE;}TE <TY GRAPH> IN VO BreadthFirstSearch<GRAPH>::Push(LI<int>& next,CRI i){next.push_back(i);}

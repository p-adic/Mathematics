TE <TY T = int>CL UnionFindForest{PU:uint m_node_SZ;uint m_root_SZ;VE<uint> m_pred;VE<uint> m_height;VE<T> m_w;IN UnionFindForest(CRUI SZ);CRUI RootOfNode(CRUI num);TE <TE <TY...> TY V> VO SetRoot(V<uint>& a)CO;IN T Weight(CRUI num0,CRUI num1);IN CRUI SZOfNode()CO NE;IN CRUI SZOfRoot()CO NE;bool Graft(CRUI num0,CRUI num1,CO T& w = 0);};
TE <TY T> IN UnionFindForest<T>::UnionFindForest(CRUI SZ):m_node_SZ(SZ),m_root_SZ(m_node_SZ),m_pred(m_node_SZ),m_height(m_node_SZ,1),m_w(m_node_SZ){for(uint i = 0;i < m_node_SZ;i++){m_pred[i]= i;}}TE <TY T>CRUI UnionFindForest<T>::RootOfNode(CRUI num){uint& pred1 = m_pred[num];WH(true){uint& pred2 = m_pred[pred1];if(pred1 == pred2){break;}m_w[num]+= m_w[pred1]+= m_w[pred2];pred1 = pred2 = m_pred[pred2];}RE pred1;}TE <TY T> TE <TE <TY...> TY V>VO UnionFindForest<T>::SetRoot(V<uint>& a)CO{a.clear();for(uint i = 0;i < m_node_SZ;i++){if(i == m_pred[i]){a.push_back(i);}}RE;}TE <TY T>T UnionFindForest<T>::Weight(CRUI num0,CRUI num1){assert(num0 < m_node_SZ && num1 < m_node_SZ);CRUI root0 = RootOfNode(num0);CRUI root1 = RootOfNode(num1);assert(root0 == root1);RE m_w[num1]- m_w[num0];}TE <TY T> IN CRUI UnionFindForest<T>::SZOfNode()CO NE{RE m_node_SZ;}TE <TY T> IN CRUI UnionFindForest<T>::SZOfRoot()CO NE{RE m_root_SZ;}TE <TY T>bool UnionFindForest<T>::Graft(CRUI num0,CRUI num1,CO T& w){assert(num0 < m_node_SZ && num1 < m_node_SZ);CRUI root0 = RootOfNode(num0);CRUI root1 = RootOfNode(num1);if(root0 == root1){RE Weight(num0,num1)== w;}uint& height0 = m_height[root0];CRUI height1 = m_height[root1];CO uint* p_reMOd_root;CO uint* p_reMOd_node;CO uint* p_kept_root;if(height0 < height1){p_reMOd_root = &root0;p_reMOd_node = &num0;p_kept_root = &root1;m_w[*p_reMOd_root]-= w - m_w[num1]+ m_w[num0];}else{if(height0 == height1){height0++;}p_reMOd_root = &root1;p_reMOd_node = &num1;p_kept_root = &root0;m_w[*p_reMOd_root]+= w - m_w[num1]+ m_w[num0];}if(*p_reMOd_node != *p_reMOd_root){m_w[*p_reMOd_node]+= m_w[*p_reMOd_root];}m_pred[*p_reMOd_node]= m_pred[*p_reMOd_root]= *p_kept_root;m_root_SZ--;RE true;}
